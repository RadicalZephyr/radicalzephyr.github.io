<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Zephyrizing]]></title>
  <link href="http://www.zephyrizing.net/atom.xml" rel="self"/>
  <link href="http://www.zephyrizing.net/"/>
  <updated>2015-04-16T18:52:00-05:00</updated>
  <id>http://www.zephyrizing.net/</id>
  <author>
    <name><![CDATA[Geoff Shannon]]></name>
    <email><![CDATA[geoffpshannon@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning TDD]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/04/14/learning-tdd/"/>
    <updated>2015-04-14T14:37:34-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/04/14/learning-tdd</id>
    <content type="html"><![CDATA[<p>This is my first week at 8th Light and I&rsquo;ve been working on writing an
object-oriented Tic Tac Toe program.  This would be no big deal for
typically, even though I&rsquo;m doing it in a language I&rsquo;m unfamiliar with.</p>

<p>Except! I&rsquo;m trying to very rigorously drive the development with
tests.</p>

<!--more-->


<p>This is a fairly new experience for me. I mean, sure, when I first
read about TDD a while ago, I got really interested and excited about
it. I played with it a little bit, and tried to do some small stuff in
it. But I quickly got overwhelmed with the difficulty of &ldquo;How do you
even get started?&rdquo;</p>

<p>Monday, I made very minimal progress. I felt stuck not really sure
where to begin, and what to do. I ended up by basically writing tests
for a simple Board data class where I could make marks, and then see
that the marks were actually set. This felt highly unimpressive as the
output of my first day.</p>

<p>Tuesday and Wednesday I made some more progress. The thing that helped
for most was certainly reaching out for guidance from my mentors. I
had a good conversation with Brian. Despite it&rsquo;s somewhat brief and
vague nature it actually was very helpful. And I did some pairing with
Zach that really helped on the Ruby comfortability front. Just seeing
how someone who knows how to use Ruby approaches things made me feel
more confident and grounded in the language.</p>

<p>I also did quite a bit of Googling and reading about Ruby concepts and
paradigms. There wasn&rsquo;t anything really specific that I was looking
for, I was just trying to absorb some of the context of the community
by seeing what is talked about and the sorts of code snippets that are
out there. To an outside observer this probably seemed mostly like
procrastinating. To be fair, I sort of judged it that way myself.</p>

<p>The thing is though, in all my professional software development work,
I&rsquo;ve noticed that whenever I end up procrastinating and sort of
&ldquo;working around&rdquo; a difficulty I&rsquo;m having a peculiar thing happens. If
I try to force myself to face it head on and work at it, nothing
really good comes out of it. Often I just end up feeling stuck and
then I&rsquo;m really unproductive, just staring at the keyboard.</p>

<p>But I find if I just relax into the procrastination, and try to stay
working on related things, that eventually everything sort of gels in
my mind, and then when I come back to the &ldquo;hard&rdquo; thing I&rsquo;m usually
able to make some useful headway.</p>

<p>Today was that day for TDD in Ruby; I felt like everything sort of
came together. I came into work determined not to &ldquo;procrastinate&rdquo; like
I did for much of yesterday. I started off by starting to test drive a
Console or display class. But I quickly realized that this would just
be a thin wrapper on top of the IO class that already exists in Ruby!
So I went back to implementing my game class, and used mocks to
replace an instance of an IO class.</p>

<p>From there I got into a very nice flow. Even the tricky nature of
testing the main game loop didn&rsquo;t seem overly difficult in my mind. By
the end of the day I had gotten to the point where I couldn&rsquo;t really
think of any more functionality that would be needed to play an actual
game at the command line.</p>

<p>When I wired up the class to finally actually test it from end to end
and try to play a game, there were some unexpected problems. But the
basic logical structure of the game was pretty much entirely
correct. And I knew it would be, because of the tests that I wrote.</p>

<p>Very cool.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shaving the Clojurescript Yak(s)]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/04/04/shaving-the-clojurescript-yaks/"/>
    <updated>2015-04-04T13:08:18-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/04/04/shaving-the-clojurescript-yaks</id>
    <content type="html"><![CDATA[<p>About a week ago I got fed up with a <a href="http://mangafox.me/">terrible website</a> that
had comics on it I wanted to read.  So I decided to write a little web
app to make the reading experience more pleasant. Since I&rsquo;m an avid
<a href="http://clojure.org/">Clojurian</a>, I&rsquo;ve been interested in checking out
<a href="http://clojure.org/clojurescript">Clojurescript</a> for doing web development, and in particular
exploring the wonderful new world of React.js wrappers available in
Clojurescript. This is the story of how I learned to setup a
Clojurescript project.</p>

<!--more-->


<p>Since I&rsquo;ve been interested in Clojurescript for a while, and even
toyed with it a few times, I came into this project with at least a
fair idea of what was out there. I knew about Om, and new basically
how the Clojurescript compilation process worked. I also am vaguely
comfortable with setting up a basic Clojure web app using <a href="https://github.com/ring-clojure/ring">Ring</a>
and <a href="https://github.com/weavejester/compojure">Compojure</a>.</p>

<p>I was also aware that there had been significant advances in the
Clojurescript workflow in the past few years. Most importantly I knew
about an apparently awesome Leiningen project template for
Clojure/Clojurescript web apps called <a href="https://github.com/plexus/chestnut">Chestnut</a>. However,
the times that I had tried to get up and running with Chestnut
previously I was totally overwhelmed by the amount of unfamiliar
code/configuration that it produced. Quite frankly, it seemed
excessive, and quickly led to me giving up on whatever
project-of-the-moment had inspired me.</p>

<p>So! This time, I determined to not start with Chestnut, and instead
build up slowly from the basic Lein app template that I was already
familiar with. And so commenced roughly five full days of mostly
yak-shaving. I&rsquo;m not going to try and recount it all here; just the
highlights will be more than enough.</p>

<h2>How I Shaved My Yak</h2>

<p>I started with off with a very vanilla <code>lein new app
comic-reader</code>. From there, I copied the basic dependencies for a
jetty/ring/compojure web app from my <a href="https://github.com/RadicalZephyr/url-shortener">url-shortener</a>
project. I made some basic routes to make sure everything was working
correctly.</p>

<p>Next came adding Clojurescript into the project. This meant setuping
the <code>project.clj</code> to point to where the <code>*.cljs</code> files would live, and
then configuring the Clojurescript compiler.  Basic Clojurescript
compilation with <a href="https://github.com/emezeske/lein-cljsbuild">lein-cljsbuild</a> is not totally trivial to
configure, especially since there are now many different options to
the Clojurescript compiler and many resources on the web have
older/outdated configuration examples, and typically no explanation
whatsoever of why they have it configured they way they do. But
overall it wasn&rsquo;t too tough. It helped significantly that I could
again copy setups I had previously found to work.</p>

<p>At this point, I was sick of shaving Yaks for a moment so I went and
learned how to use <a href="https://github.com/cgrand/enlive">Enlive</a> for doing
<a href="https://github.com/swannodette/enlive-tutorial#an-introduction-to-enlive">web scraping</a>! Then, feeling refreshed, I went back to the
Yak.</p>

<p>I knew that I wanted the awesome <a href="https://github.com/bhauman/lein-figwheel">Figwheel</a> plugin for an awesome
(mostly) reload-less Clojurescript experience. Again, Figwheel comes
with a Lein template that I didn&rsquo;t use directly. Instead, I made an
extra copy and then used it as a reference for when my configuration
based on reading the documentation didn&rsquo;t work.</p>

<p>Next step was adding in Om, and making a basic page setup
there. Again, nothing incredibly hard. I mostly just followed the
tutorial and everything came together fairly quickly. Only maybe an
hour of struggling and cursing at my computer. Then, I decided that I
wanted to build a single-page application (SPA). So I started looking
at libraries like <a href="https://github.com/gf3/secretary">Secretary</a> and
<a href="https://github.com/r0man/sablono">Sablono</a>. Eventually, after reading several blog posts and
pages of documentation, I decided that I actually wanted to use
<a href="https://github.com/reagent-project/reagent">Reagent</a> instead of Om. Luckily I hadn&rsquo;t written much actual
code before I came to that decision.</p>

<p>After playing with Reagent for a while, I started having difficulty
with thinking about how to use it as the basis for a SPA, especially
with in-browser routing happening, and changing the history token so
that different app states would be bookmark-able. (N.B. I&rsquo;ve minimized
the explanation of this considerably. I spent a good chunk of time
wrestling with getting history integration working with Reagent before
realizing that Reagent&rsquo;s flow didn&rsquo;t make any damn sense to me.)</p>

<p>Back to the Google! After quite a lot of searching, sleeping, reading,
and searching again I found <a href="https://github.com/Day8/re-frame">re-frame</a> and it&rsquo;s epic
manifesto. After reading the whole damn thing (and all of the
&ldquo;read-this-first&rdquo; links), I decided that I would switch from vanilla
Reagent to re-frame. Again, thank goodness I hadn&rsquo;t really written any
significant code that was tightly coupled to reagent.</p>

<p>At this point, most everything worked pretty nicely, but there was
some significant ugliness about. I had my Figwheel configuration
inline in the same file as my main site code, and the clojurescript
configurations for production and dev were getting quite messy. After
incrementally gaining experience with most of the gaggle of
technologies that Chestnut uses, I felt prepared to tackle their
template again. So I started using it as a reference to enhance my own
configuration.</p>

<p>In particular, I started doing this when I wanted to deploy my app to
Heroku. It turns out that there are a whole raft of things that where
wrong with my configuration from Heroku&rsquo;s point of view. But after
about two hours of compare/edit/deploy cycles, I finally managed to
deploy my app to Heroku.</p>

<h2>Wrapping Up</h2>

<p>To sum it all up, while this was in some ways a very frustrating
exercise (especially at times during the process!), overall it was
also a really excellent learning experience. Too often I try and
approach too many new things all at once. This often leads quickly to
getting overwhelmed by all the new-ness, and then often giving
up. It&rsquo;s not a great pattern.</p>

<p>The longer that I practice programming, the more firmly I come to
believe that incremental, evolutions of projects and knowledge are
fundamentally more approachable, sustainable and, quite simply, more
fun!</p>

<p>Now I&rsquo;m feeling sort of pumped to do an &ldquo;Annotated Chestnut&rdquo;
walkthrough of what all the various configurations in Chestnut are
doing, and why they are useful and cool.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two Days In]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/04/02/two-days-in/"/>
    <updated>2015-04-02T23:34:05-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/04/02/two-days-in</id>
    <content type="html"><![CDATA[<p>It&rsquo;s only been two days and already a lot has happened, so it seemed
like time for an update.  Oh, BTW since I haven&rsquo;t mentioned it on my
blog before, I just moved to Chicago to work at <a href="http://8thlight.com/">8th Light</a>.</p>

<p>I arrived in Chicago on Tuesday afternoon/evening and had an
uneventful time finding my Airbnb in Edgewater on the north side of
Chicago.  I spent the evening searching house listings on Craigslist
and Zillow, and sending emails trying to schedule viewings for the
next few days.</p>

<!--more-->


<p>Wednesday, and today I spent looking at different units.  Wednesday
was mostly sort of disappointing, especially in the kitchen
department.  But there was one unit that had a good location, and very
nice amenities and layout; except for the kitchen was long and narrow
and sort of awkward looking.</p>

<p>Today started out looking like more of the same, until my 3rd and 4th
viewings.  The 3rd place I looked at was right across the street from
the best one from Wednesday, except it was two bedrooms, and a much
more reasonable kitchen for only slightly more money.  This seemed
like a clear win, and I very excitedly applied for it immediately
after I left.</p>

<p>I kept my final appointment of the day mostly out of politeness and
curiosity.  I really had no expectations for it, since the pictures in
the Craigslist ad had been sort of iffy.  But walking into the space I
was pretty blown away.</p>

<p>This is what I wrote about it after seeing it (admittedly, several
hours after seeing it). The TL;DR is that it&rsquo;s really quite awesome.</p>

<blockquote><p>Beautiful high ceilings with gorgeous detail work.  Several built-in
pieces of furniture including a floor to ceiling hutch in the dining
room/kitchen with a glass paneled portion and a lower area with
several full-width drawers.  There is also a built-in dresser in the
bedroom closet (which is large and walk-in, and has shelves REALLY
high).</p>

<p>The living room area is large and has great windows and light, with an
alcove-ish area perfect for a desk/work area.  It’s on the third floor
of a house where each level is a unit (called a “three-flat”).</p>

<p>The owner lives in the ground floor, another couple in the middle.
there is an attic above me with some possibility of storing some stuff
there.  Two entrances, front and back.  Front has an interior
staircase with a landing at the top, perfect for shoe/coat storage.</p>

<p>The bedroom is a very nice size (not too big, not too small) and it
has fewer windows so it’s not incredibly bright.  Yet still has a
reasonable amount of light so it’s not cave-like.</p>

<p>The biggest downside is the kitchen which has some awkwardness to the
layout (counter space is separated from the range by the fridge, and
the sink is on a different wall altogether.  But the sink is awesome
old pewter with a built-in dish drying area (slanted and grooved and
with a lip).  No dishwasher.  But plenty of room for a dining room
table, and there is room next to the range to put an extra
tall-cutting board or general end-table.  And the cabinets in the
kitchen have interior shelves (not on top of the cabinet!) that go to
the limit of what I can reach.</p>

<p>The bathroom is also quite small, with a claw foot tub/shower (which
probably needs a special/double shower curtain setup.  But it is
gorgeous with some really amazing Turkish tiles in the walls.</p></blockquote>

<p>So that&rsquo;s pretty exciting. I guess I&rsquo;ve found my new place to live.
Now what do I do until I start at 8th Light in two weeks?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sane Static Site Setups]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/12/30/sane-static-site-setups/"/>
    <updated>2014-12-30T14:44:37-06:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/12/30/sane-static-site-setups</id>
    <content type="html"><![CDATA[<p>During the last week of Hacker School I helped <a href="http://lmontopo.github.io/">Leta</a> sort out
some issues she had with her blog setup and restore everything to
sanity. It was a lot of fun and the setup is pretty straightforward so
I thought I&rsquo;d do a short write-up on what we did and why.</p>

<p>To be clear, this blog post is about solving the particular problem of
how to organize a statically generated site/blog. The particulars I&rsquo;m
going to discuss are for when you host the site on <a href="https://pages.github.com/">Github Pages</a>
but you need to generate the site locally because you&rsquo;re not using
vanilla <a href="http://jekyllrb.com/">Jekyll</a> or not using Jekyll at all.</p>

<!--more-->


<p>This isn&rsquo;t a tutorial about how to set up and use any particular
static site generator.  There are <a href="http://jekyllrb.com/">quite</a> <a href="http://docs.getpelican.com/en/3.5.0/">a</a> <a href="http://wintersmith.io/">few</a> <a href="https://github.com/greghendershott/frog">out</a>
<a href="https://github.com/taylorchu/baker">there</a>, and <a href="https://github.com/hugoduncan/cl-blog-generator">they</a> <a href="https://staticsitegenerators.net/">all</a> seem to be quite good. So pick one and
get your site setup.  You should be comfortable generating the content
of your site before worrying about what I&rsquo;m describing in this post.</p>

<p>One of the best and worst things about using a static site generator (SSG)
is that the source for the site is fundamentally a separate thing from
the actual files that compose the site itself. The good news is that
the generated files are, well, generated. Given the source for a
site you can always regenerate the presentation files.</p>

<p>So clearly we want to keep the source for our site under version
control. If you&rsquo;re using Github Pages then git is a natural
choice. But Github Pages also requires that the generated content of
your site be in a git repository. This leads to an un-intuitive setup.
Because the source and published files don&rsquo;t actually share a common
history, it seems like they need to be stored in separate git
repositories.  However, there is a fundamental relationship between
the files that dictates that organizationally they should always be
found together.</p>

<p>Luckily for us, git is flexible enough to allow us to achieve both
these seemingly conflicting goals. Since the usual workflow for a git
repository simply involves <code>git init</code> and then edit, <code>add</code>,
<code>commit</code> cycles, it&rsquo;s less well known that a git repository can
actually contain multiple independent &ldquo;head&rdquo; commits. Don&rsquo;t worry if
that doesn&rsquo;t totally make sense. The important thing is that we can
store two separate revision histories in the same git repository.</p>

<p>So, you have the source for a static site, and you&rsquo;ve maybe written
some dummy (or real!) content for it and generated the site at least
once. Now, we want to make sure that we have a setup that will help us
preserve all of your hard work on making an awesome website.</p>

<p>The first thing we need to do is to make sure we have git repositories
in both the source and output directories by running <code>git init</code> in
both of them separately. Since most SSG&rsquo;s by default use a structure
where the output folder is a subdirectory of the source folder, make
sure that you have an entry in your gitignore file so that the output
isn&rsquo;t committed into the source repository. At this point we should
have two git repo&rsquo;s, one that <em>only</em> has the site source content
(including any files need by your SSG) and one that <em>only</em> has the
generated version of your site.</p>

<p>Now for the magic trick of combining the repositories. Let&rsquo;s say we
have this folder structure:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- website/
</span><span class='line'> - .git/  # Git folder for source files
</span><span class='line'> - ...    # Lots of awesome content files
</span><span class='line'> - output/
</span><span class='line'>  - .git/ # Git folder for output files
</span><span class='line'>  - ...   # The actual generated content files</span></code></pre></td></tr></table></div></figure>


<p>At a shell prompt in the directory <code>website</code>, you can run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote add output output/
</span><span class='line'>git push output master:source</span></code></pre></td></tr></table></div></figure>


<p>Basically, what we&rsquo;re doing is setting one repository as a remote of
the other, and then pushing the content to new branch there.  Now the
<code>output</code> repository contains both the source and output files in
separate git branches. Pushing all the branches of this to a hosting
site means you have a complete backup of your site.</p>

<p>Now, the process of updating your site is a little more complicated
than the general Github Pages workflow of edit, commit and push since
you need to generate the site yourself.</p>

<p>First, edit your site&rsquo;s content files.  Commit as necessary for your
peace of mind. Once you&rsquo;re satisfied with how the content looks
(you&rsquo;ve been previewing and generating the site right?), it&rsquo;s time to
commit the new content to the output branch, and then push it to your
hosting location.</p>

<p>That&rsquo;s basically it. It&rsquo;s a simple structure, but it&rsquo;s not totally
straightforward of how to get it set up, and it&rsquo;s also a bit more work
to maintain. Of course there are some interesting tools out there to
help with this process. <a href="http://octopress.org/">Octopress 2.0</a> tries to setup this
structure automatically for you, and provides a Rakefile for helping
to automate a lot of the normal tasks like site generation, previewing
and even deployment. <a href="http://docs.getpelican.com/en/3.5.0/">Pelican</a> offers to generate a Makefile and/or
a fabfile for doing the same sorts of things. Pelican also makes use
of the really neat <a href="https://github.com/davisp/ghp-import">GHP-Import</a> project to simplify the deploying
process.</p>

<p>Now go forth and blog!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With LLVM and OCaml on OS&nbsp;X]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/12/14/getting-started-with-llvm-and-ocaml-on-os-x/"/>
    <updated>2014-12-14T00:15:16-06:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/12/14/getting-started-with-llvm-and-ocaml-on-os-x</id>
    <content type="html"><![CDATA[<p>I <a href="http://www.zephyrizing.net/blog/2014/11/19/getting-started-with-llvm-on-os-x/">wrote recently</a> about my (second) experience trying to
get started using LLVM on my Macbook. Shortly after that, I became
interested in combining my interest in LLVM with my interest OCaml. As
it turns out, this was a much easier task than I anticipated.</p>

<!--more-->


<p>Since my whole experiment with Vagrant was so successful for using
the C++ LLVM libraries, I immediately started doing the same thing for
my OCaml experiments. I created a <code>Vagrantfile</code> and started trying to
write a bash script to correctly provision an Ubuntu instance with the
requirements for the OCaml LLVM bindings.</p>

<p>I was stalled fairly quickly by the fact that the version of
[OPAM][opam] in the Ubuntu apt repositories is somewhat old.  Old
enough that it doesn&rsquo;t want to talk to the official OPAM servers for
package updates. So I futzed and fiddled a bit, and looked around for
alternate ways to install OCaml.</p>

<p>Eventually I got it figured out, and started trying to install the
OCaml bindings for LLVM. It didn&rsquo;t go well. The compilation of the
llvm opam package errored almost immediately. But while I was looking
through the error messages, I noticed something interesting. The
errors were related to nonexistent paths, and the paths that the
package was expecting all started with <code>/usr/local/Cellar</code>. For the
non brew-savvy, this is the default location that <a href="http://brew.sh/">Homebrew</a>
uses for all it&rsquo;s installations.</p>

<p>I knew that homebrew had an LLVM package because of my C++
meanderings. The error messages from OPAM on Ubuntu made me think that
the OCaml LLVM package was actually expecting to be run on a Mac, or
at least to work with a <code>brew install</code>ed LLVM.</p>

<p>So I gave it a shot. I cleaned out and re-installed my LLVM installation
with <code>brew rm llvm &amp;&amp; brew install llvm</code>. And then I simply ran <code>opam
install llvm</code>. As far as I remember (it was a couple weeks ago now ;),
everything went off without a hitch.</p>

<p><How was I able to validate the installation? Looked at Kaleidoscope
tutorial?></p>

<p>Finally, I wanted to be able to use the top-level to explore the LLVM
API, but that didn&rsquo;t appear to work right away. After some googling, I
found an answer on Stack Overflow (of course!) that said I had to
compile a custom version of utop with the LLVM libraries linked in.</p>

<p>I did that <describe it!! got to refigure out how I did that though>,
and then was able to get the wonderful utop completion stuff to work
with the totally unfamiliar LLVM bindings in OCaml.</p>

<p>Of course, then I needed to implement a <a href="https://github.com/RadicalZephyr/postfix-ocaml">language to actually compile
with LLVM</a>. And of course I still haven&rsquo;t actually done
anything with LLVM&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With LLVM on OS&nbsp;X]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/11/19/getting-started-with-llvm-on-os-x/"/>
    <updated>2014-11-19T02:31:00-06:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/11/19/getting-started-with-llvm-on-os-x</id>
    <content type="html"><![CDATA[<p>A few weeks ago, I decided that one of the things I wanted to tackle
during my time at Hacker School was getting familiar with the LLVM
project. To that end, myself and several other Hacker Schoolers formed
an informal group to work through the official
<a href="http://llvm.org/releases/3.5.0/docs/tutorial/index.html">LLVM Kaleidoscope</a> tutorial. We made reasonable progress at
first, but as soon as we actually had to start dealing with the LLVM
tools, I started encountering problems.</p>

<p>Long story short, I ended up getting frustrated with the state of the
documentation surrounding LLVM and moving on to working on other less
upsetting projects. This last weekend though I ended up getting back
into it. I tried two different approaches.</p>

<!--more-->


<p>First, I decided to use a Vagrant supported VM to do my LLVM
setups. This was for two reasons: the fact that I do my development on
a Mac running OS X seems to be problematic when trying to install LLVM
in a global manner. This is because <em>some</em> of the LLVM tools (like
Clang) make up the default build environment on OS X. But the toolset is
insufficient if you actually want to build languages with LLVM, and
the presence of these libraries makes it&hellip; complicated to try and
install a more complete version. As Homebrew says when you try to
install LLVM via <code>brew install llvm</code>:</p>

<blockquote><p>Mac OS X already provides this software and installing another
version in parallel can cause all kinds of trouble.</p></blockquote>

<p>This is essentially the problem that I ran into a couple weeks ago
that caused me to give up on working with LLVM. This time however, I
had the insight that I wasn&rsquo;t solely limited to the physical machine
that I had an the one operating system I have the space to install on
it. By using <a href="https://www.vagrantup.com/">Vagrant</a> I could pretty trivially have a working Ubuntu
environment to use as my development platform for working with LLVM.</p>

<p>So that&rsquo;s what <a href="https://github.com/RadicalZephyr/postfix-llvm">I did</a>. The most interesting thing about
that repository is how I ended up provisioning my Vagrant
VM. To quote briefly from the <a href="https://en.wikipedia.org/wiki/Provisioning#Server_provisioning">Wikipedia Article</a>:</p>

<blockquote><p>&hellip; provisioning is a set of actions to prepare a server with
appropriate systems, data and software, and make it ready&hellip;</p></blockquote>

<p>The provisioning is done via shell scripts (that&rsquo;s not the interesting
part!), but instead of using <code>apt-get</code> to install all the software
that I required I mostly had to build them from scratch. But let&rsquo;s go
through the story end to end.</p>

<p>First off, I did try to install all the software via <code>apt-get</code>. There
was some confusion for me about which version of LLVM to install. From
the reading I&rsquo;d done on the [LLVM site] previously I thought that
since 3.5 has been officially released it would be considered the
stable version. However, when you install LLVM 3.5 via <code>apt</code> (with
<code>sudo apt-get install llvm-3.5</code>) the binaries don&rsquo;t seem to end up
getting installed on a path location. Or rather, they are on path, but
the names are all suffixed with <code>-3.5</code>.</p>

<p>This wasn&rsquo;t really what I wanted, so I also tried installing the 3.4
packages which it turns out are also the default set of packages
installed if you <code>apt-get install llvm</code>. This got the right names for
the tools onto my path, so step one check. So much easier to install
than with Homebrew! Well, to install and make sure that it was available
to me anyhow.</p>

<p>Then, since I was going to be doing <code>C++</code> development, I wanted to use
<a href="http://www.cmake.org/">CMake</a> as my build generator. If you&rsquo;ve never used CMake but you do
<code>C/C++</code> development I&rsquo;d highly recommend checking it out. It allows
you to specify your build process at a very high level.  As a bonus,
it can then generate the files to process that build with <a href="http://www.gnu.org/software/make/">several</a>
<a href="https://eclipse.org/">different</a> <a href="http://msdn.microsoft.com/en-us/vstudio/aa718325.aspx">kinds</a> of actual <a href="http://www.cmake.org/cmake/help/v3.0/manual/cmake-generators.7.html#id4">build systems</a>. It&rsquo;s way more
convenient than writing your own <code>Makefiles</code> and much more modern than
the whole <a href="https://www.gnu.org/software/autoconf/">autoconf</a> system (which I can&rsquo;t say much about, I&rsquo;ve never
learned it).</p>

<p>Anyhow, CMake has another handy benefit. It has a system for
<a href="http://www.cmake.org/Wiki/CMake:How_To_Find_Libraries">finding your dependencies</a>. Not like over the internet like
<a href="http://stackoverflow.com/questions/1541771/using-maven-for-c-c-projects">some build systems</a>, but still it&rsquo;s better than the basic
situation in C. Since CMake has actually been around for a while there
are many standard open source projects that provide the mechanics for
finding their libraries with CMake, including - handily enough - the
LLVM project.</p>

<p>One requirement of this system is that a &ldquo;module file&rdquo; be somewhere on
the CMake <code>modules-path</code>. For packages that support it, this should
happen when the package is installed and the locations of the critical
library and header files are actually known. Only problem is that the
CMake packages available in the Ubuntu repositories don&rsquo;t actually do
this. Turns out there was a <a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=735592">bug report</a> early in 2014 describing the
issue. Then a long back and forth with the package maintainer (I
think) and many cases of &ldquo;Hey, it should be fixed now!&rdquo;, followed by a
response of &ldquo;No, it actually still doesn&rsquo;t work&hellip;&rdquo;</p>

<p>Then I found the LLVM <code>apt</code> <a href="http://llvm.org/apt/">nightly builds page</a> which
possibly answers why LLVM 3.4 is still the default package on Ubuntu,
since the LLVM project considers 3.4 to be &ldquo;stable&rdquo; and 3.5 is the
&ldquo;qualification branch.&rdquo; This <code>apt</code> repository seemed like a good bet
for finding an LLVM package that would properly install the necessary
CMake files, but alas, I had no such luck.</p>

<p>So instead I built LLVM from scratch. This is both easier and harder
than it sounds. Building LLVM from source is a very automated process,
and the parts that aren&rsquo;t automatic by default (like downloading,
checking file signatures and unpacking archives) are highly
automatable. The painful part is that VM&rsquo;s are always slower than a
natively installed OS. And my poor Macbook Air takes about 45 minutes
to do a full LLVM build under the native OS X. So basically once I got
everything setup I let the LLVM build run and stopped thinking about
it except to check on it every few hours.</p>

<p>I had quite a few build failures mostly related to what seem
like out of memory errors in GCC. Sometimes just restarting the
compilation helped, but I also restarted Vagrant VM and gave it a full
2GB of memory which helped a lot.</p>

<p>Once the install finished though CMake was able to find it
immediately. As pointed out earlier, the code is up on Github. I was
surprised to discover that there is no Vagrant VM that exists for
doing LLVM development, so that&rsquo;s going to go on my list of
projects. Ideally, that <strong>won&rsquo;t</strong> involve building LLVM from source in
the provisioning stage, because of the computational issues with
VM&rsquo;s. It might be an interesting excuse to learn how to build .deb
packages and make a PPA with a CMake that properly installs the
<code>FindLLVM.cmake</code> files&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Demonstrating demonstrate.sh]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/10/30/demonstrating-demonstrate-dot-sh/"/>
    <updated>2014-10-30T15:33:34-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/10/30/demonstrating-demonstrate-dot-sh</id>
    <content type="html"><![CDATA[<p><em>Edit 2014/12/30: I ended up rewriting demonstrate in <a href="https://github.com/RadicalZephyr/demonstrate.sh">several</a>
<a href="https://github.com/RadicalZephyr/demonstrate">different</a> languages, but the implementation that I like the
best is in <a href="https://github.com/RadicalZephyr/demonstrate.py">python</a>.</em></p>

<p>So, in the course of trying to prepare a presentation for this
Thursday (today!), I ended up creating a program called
<code>demonstrate.sh</code>. Basically, it lets you write a script, meant for an
interpreter (like bash, python, irb, coffee etc.) and then execute it
on demand.</p>

<!--more-->


<p>What do I mean by &ldquo;on demand&rdquo;? Well, basically it invokes the
interpreter and then reads the script file one line at a time. Then it
prints out a fake prompt based on the interpreter you specified, and
then it prints out the line of input it&rsquo;s processing.  When you hit
enter, the script sends that line of input to the interpreter and it
then prints its output to the screen. Oh, there&rsquo;s one little
caveat. When <code>demonstrate.sh</code> prints the line of output, it prints it
character by character with a small randomized delay. So it looks a
bit like you&rsquo;re actually typing out the command.</p>

<p>That&rsquo;s it! It&rsquo;s a simple script, but it allows you to create and then
run in a repeatable way a sequence of commands that you want to
<em>demonstrate</em>.</p>

<p>There are some improvements I&rsquo;d like to add. The ability to
recursively run demonstrate scripts inside of a demonstrate script
would be awesome. Currently because I&rsquo;m doing everything in the
simplest possible way, and the script is run in the background running
demonstrate inside of a demonstrate script doesn&rsquo;t work very well. I&rsquo;m
actually not entirely sure why it doesn&rsquo;t work, but the results are
demonstrably not what I want.</p>

<p>It would also be nice to make it so that you can insert arbitrary
commands to the interpreter, instead of only being able to run the
commands in the script. This is a particularly key feature since if
you just start another interpreter to run ad-hoc commands, you don&rsquo;t
have the same environment. This isn&rsquo;t important if your script doesn&rsquo;t
contain any side-effectful things, but I think that a lot of scripts
will tend to.</p>

<p>Finally, it would be really nice if the <code>demonstrate.sh</code> didn&rsquo;t need
to fake the prompts for the interpreters. In an ideal world, those
prompts would be transparently printed directly to the screen. I&rsquo;m
sure there&rsquo;s a way to do it, but it probably isn&rsquo;t possible/easy in
<code>bash</code>.</p>

<p>When I talked to <a href="https://github.com/doy">Jesse</a> about this, he asked the critical question.
Why not just record the output? My answer was essentially because I
wanted to eventually be able to run arbitrary commands in addition to
the script commands. This is sort of a weak answer, since it depends
on a feature I haven&rsquo;t yet implemented!</p>

<p>But there&rsquo;s another answer, that I discovered today when I was playing
with the classic Unix utility <code>script</code> that does exactly what Jesse
was talking about. The difference between recording an interaction
with <code>script</code> and writing a demonstrate script is this. Recording with
<code>script</code> is <em>still live coding</em>. This is especially true if you want
to use the timing feature to play it back at the same speed that it
happened at. In contrast, writing a <code>demonstrate</code> script is the same
as writing any regular script for the interpreter you&rsquo;re
targeting. You are totally offline, and you can write and edit the
script directly, and then run it with demonstrate to make sure it does
exactly what you want.</p>

<p>From what I&rsquo;ve been told about the early days of programming, the
difference between recording an interaction with <code>script</code> and writing
a <code>demonstrate</code> script is approximately the same as the difference
between writing programs on punch cards and writing programs in a text
editor on a computer. If you mess up while punching the card, you have
to start over from the beginning (barring awesome hacks
<a href="https://twitter.com/francesc/status/521602168022118400">like this</a>).</p>

<p>Yup, that&rsquo;s it. If you&rsquo;re interested, check it out
<a href="https://github.com/RadicalZephyr/demonstrate.sh">on Github</a>. Pull requests welcome :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing With Org-mode]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/10/27/playing-with-org-mode/"/>
    <updated>2014-10-27T17:30:05-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/10/27/playing-with-org-mode</id>
    <content type="html"><![CDATA[<p>So, as a way to procrastinate on actually starting to write/practice
my lightning talk for Thursday, I decided that I absolutely wanted to
make a slide show using the <a href="https://github.com/relevance/org-html-slideshow">org-html-slideshow</a>, a pretty neat piece
of Clojurescript written by those smart guys at
<del>Relevance</del> Cognitect.</p>

<p>Basically, it lets you take an outline/document written in <a href="http://orgmode.org/">Org-mode</a>
(another really cool piece of software!) and put some small
annotations in it to delimit your &ldquo;slides&rdquo; and then you have a
document that can be viewed as either a slideshow, or a web page. It&rsquo;s
harder to explain in words than it is to observe, so here&rsquo;s the
<a href="http://www.zephyrizing.net/demos/example.html">example page</a> from their github repo, and the
<a href="http://www.zephyrizing.net/demos/example.org">org-mode document</a> that produced that page.</p>

<!--more-->


<p>Now that is pretty neat. However, the workflow needed to create one of
these is sort of a pain. From the documentation on the project page,
you&rsquo;re expected to create a one-off web site that has the contents of
this production folder available and then manually generate the
html document from the org-mode source. Ick.</p>

<p>My blog is made with <a href="http://jekyllrb.com/">Jekyll</a>, which is a static site generator. None
of my posts are actually written in html, instead I write them in
<a href="http://daringfireball.net/projects/markdown/syntax">Markdown</a>, and then Jekyll handling converts the markdown into
html. When it does this I can also cause it to be inserted into a page
template (i.e. layout). The upshot is, I can create a static site but
not have to duplicate all of the code to have a common set of header
info, navigation toolbar, nifty sidebar etc. Because only the unique
things are specified in each document, and the general boilerplate is
automatically included for me by Jekyll.</p>

<p>So if I&rsquo;m generating html from markdown automatically with Jekyll it
feels sort of wrong to be generating html manually with an interactive
emacs command and then committing this generated html into my git
repo. It would be so much nicer if I could just get Jekyll to invoke
emacs as the translator for turning <code>.org</code> files into <code>.html</code> files.</p>

<p>Well, pursuing that line of thought today I worked with
<a href="https://github.com/wallyqs">Waldemar Quevedo</a>. He showed me his incredible org-based workflow for
everything (he also gave an awesome lightning talk on it the first
week of Hacker School!). While it looks really cool, it&rsquo;s sort
heavy-weight for what I want to do. Frankly, I&rsquo;m really comfortable
writing markdown, so I&rsquo;ll probably continue to write most of my posts
in it. But org-html-slideshow is exciting enough that I&rsquo;d be willing
to write my presentations in Org-mode so I can utilize it.</p>

<p>I won&rsquo;t attempt to explain Wally&rsquo;s setup, but he&rsquo;s got some
<a href="https://github.com/wallyqs/org-ruby">pretty</a> <a href="https://github.com/eggcaker/jekyll-org">cool</a> <a href="https://github.com/punchagan/org-hyde">stuff</a> going on. In essence
though, he uses a ruby gem to parse the org syntax and transform it
into markdown. As of this writing though, it doesn&rsquo;t support the tags
feature that org-html-slideshow depends on for it&rsquo;s functionality.</p>

<p>While showing Wally the slideshow thing got him excited to try and
integrate it into his workflow, I started poking around and looking at
how to integrate it into my site. The solution I decided on was to
make <code>.org</code> files a generic member of the Jekyll source files. This
means that they&rsquo;ll still use a YAML frontmatter to mark that they need
to be transformed. This means that I need some way to transform a body
of org text into just the html content that it represents. Normally
when you generate an html page from org-mode, you get a complete html
page, <code>html</code>, <code>body</code> tags and all. What I needed was a way to invoke
the org->html transformation using the Elisp code in org-mode from
Jekyll.</p>

<p>With Wally&rsquo;s help, I was able to get this far towards that goal. This
is the elisp that will continuously read from the minibuffer until an
error occurs, and then transform that text using the org->html backend,
and finally print out the generated html.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="k">progn</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;org</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">progn</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">condition-case</span> <span class="no">nil</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">while</span> <span class="no">t</span>
</span><span class='line'>          <span class="p">(</span><span class="nv">insert</span> <span class="p">(</span><span class="nv">read-string</span> <span class="s">&quot;&quot;</span><span class="p">)</span> <span class="s">&quot;\n&quot;</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">error</span> <span class="no">nil</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">set-buffer</span>
</span><span class='line'>     <span class="p">(</span><span class="nv">org-export-to-buffer</span> <span class="ss">&#39;html</span> <span class="s">&quot;*Org HTML Export*&quot;</span>
</span><span class='line'>       <span class="no">nil</span> <span class="no">nil</span> <span class="no">nil</span> <span class="no">t</span> <span class="no">nil</span>
</span><span class='line'>       <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="no">t</span><span class="p">)))</span>
</span><span class='line'>       <span class="p">(</span><span class="nv">message</span> <span class="s">&quot;%s&quot;</span> <span class="p">(</span><span class="nv">buffer-string</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this is how you invoke the transformation of a file from org to
html. The <code>$emacs</code> is because I use <a href="http://emacsformacosx.com/">Emacs for Mac OSX</a> which means
that my emacs executable is buried inside of a mac <code>.app</code> file/folder
thing. Pipe a file into this script and if it&rsquo;s valid org syntax,
you&rsquo;ll get the corresponding html.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tail -n+4 hello.org <span class="p">|</span> <span class="nv">$emacs</span> --batch --eval <span class="s2">&quot;(progn (require &#39;org) (progn (condition-case nil (while t (insert (read-string \&quot;\&quot;) \&quot;\\n\&quot;)) (error nil)) (set-buffer (org-export-to-buffer &#39;html \&quot;*Org HTML Export*\&quot; nil nil nil t nil (lambda () t))) (message \&quot;%s\&quot; (buffer-string))))&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the only thing that&rsquo;s left is to write a Jekyll plugin to do this
invocation to produce the final output. <del>This is what I came up with
as a first attempt. Of course, it doesn&rsquo;t actually work for me,
because of the dumb location of my emacs executable&hellip; Oh well, that&rsquo;s
for tomorrow.</del></p>

<p><strong>Edit 10/28</strong>: So I spent the first half of today fixing this up.
Turned out to be more involved than I suspected. I had to evolve the
emacs lisp command enough that I actually made a separate git repo for
it. I fixed the problem of locating a proper emacs binary by deferring
to an appropriately named environment variable. I originally
implemented this shortcut by letting the user specify the location of
emacs in their <code>_config.yml</code>. But then I realized, this is not a
configuration that happens per-site, it&rsquo;s per machine so the site
config file is totally inappropriate. It&rsquo;s kind of annoying though
since if I forget to specify this environment variable then my site
generation won&rsquo;t work&hellip;</p>

<p>Anyhow, it works and as proof I made a version of the example
presentation that is <a href="http://www.zephyrizing.net/demos/example-plugin.html">generated by my plugin</a>, not by
hand. You don&rsquo;t have to take my word for it, but you will have to look
at the <a href="zephyrizing">git repository for this site</a>.</p>

<p>And here is the final code for my org-mode plugin generator:</p>

<figure class='code'><figcaption><span>&#8220;Org Converter&#8221;  (org_converter.rb)</span> <a href='//../plugins/org_converter.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># A generator that uses a emacs invoked in batch mode to process</span>
</span><span class='line'><span class="c1"># org-mode files into html</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open3&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">OrgModeConverter</span> <span class="o">&lt;</span> <span class="no">Converter</span>
</span><span class='line'>    <span class="n">safe</span> <span class="kp">false</span>
</span><span class='line'>    <span class="n">priority</span> <span class="ss">:low</span>
</span><span class='line'>
</span><span class='line'>    <span class="vc">@@emacs_org_html_cmd</span> <span class="o">=</span> <span class="s2">&quot;(progn (require (quote org)) (setq font-lock-mode t) (setq org-html-head-include-default-style nil) (setq org-html-head-include-scripts nil) (condition-case nil (while t (insert (read-string </span><span class="se">\&quot;\&quot;</span><span class="s2">) </span><span class="se">\&quot;\n\&quot;</span><span class="s2">)) (error nil)) (set-buffer (org-export-to-buffer (quote html) </span><span class="se">\&quot;</span><span class="s2">*Org HTML Export*</span><span class="se">\&quot;</span><span class="s2"> nil nil nil t nil (lambda nil t))) (send-string-to-terminal (buffer-string) nil))&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">matches</span><span class="p">(</span><span class="n">ext</span><span class="p">)</span>
</span><span class='line'>      <span class="n">ext</span> <span class="o">=~</span> <span class="sr">/^\.org$/i</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">output_ext</span><span class="p">(</span><span class="n">ext</span><span class="p">)</span>
</span><span class='line'>      <span class="s2">&quot;.html&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">convert</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span><span class='line'>      <span class="n">emacs_path</span> <span class="o">=</span> <span class="k">if</span> <span class="no">ENV</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="s2">&quot;EMACS&quot;</span><span class="p">)</span>
</span><span class='line'>                     <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;EMACS&quot;</span><span class="o">]</span>
</span><span class='line'>                   <span class="k">else</span>
</span><span class='line'>                     <span class="sb">`which emacs`</span>
</span><span class='line'>                   <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">emacs_path</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;Could not find an emacs executable.&quot;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">out</span><span class="p">,</span> <span class="n">status</span> <span class="o">=</span> <span class="no">Open3</span><span class="o">.</span><span class="n">capture2</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">emacs_path</span><span class="si">}</span><span class="s2"> --batch --eval &quot;</span> <span class="o">+</span>
</span><span class='line'>                                     <span class="s2">&quot;</span><span class="si">#{</span><span class="vc">@@emacs_org_html_cmd</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>                                     <span class="ss">:stdin_data</span><span class="o">=&gt;</span><span class="n">content</span><span class="p">)</span>
</span><span class='line'>        <span class="n">out</span> <span class="k">unless</span> <span class="n">status</span> <span class="o">!=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On the Importance of Distinguishing Between Stable and Development Documentation]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/10/26/on-the-importance-of-distinguishing-between-stable-and-development-documentation/"/>
    <updated>2014-10-26T22:10:04-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/10/26/on-the-importance-of-distinguishing-between-stable-and-development-documentation</id>
    <content type="html"><![CDATA[<p>A few weeks ago I wrote about <a href="http://www.zephyrizing.net/blog/2014/10/07/dot-dot-dot-and-this-is-why-master-should-be-stable/">Why Master Should Be Stable</a>. I
spent most of that post explaining what had actually happened to me,
but not really talking about the fundamental underlying difficulty.
Well, now that I&rsquo;ve encountered this issue again in a different
context, maybe it&rsquo;s time to dive in a bit and examine what I call the
Doc&rsquo;s Mismatch problem, and how it can be avoided.</p>

<!--more-->


<p>As the title hints, this issue is really more about being able to
match the documentation of a project to a particular version. The
problem with Flaskr was that when you went searching for the
documentation, you most easily found the documentation for the
currently in development branch. This isn&rsquo;t a problem when no major
changes have been made, but when there are major changes this becomes
an issue.</p>

<p>Part of the reason that I&rsquo;m writing this blog post is because last
week, while I was going through the <a href="http://llvm.org">LLVM</a> project&rsquo;s <a href="http://llvm.org/docs/tutorial/index.html">tutorial</a> I ran
into the exact same issue! But I didn&rsquo;t spot that this version
mismatch was the issue until after I had found another workaround.</p>

<p>Not to belabor the point, but basically the LLVM tutorial linked above
is actually the version of the tutorial written for the upcoming 3.6
release. Since there are several breaking changes to the API occurring
in this release, when you have installed LLVM 3.5 the tutorial appears
to be rather broken.</p>

<p>This problem is sort of ironic as the majority of open source software
out there (most definitely including all of my projects :) have
little-to-no documentation, or what there is, is hopelessly
out-of-date. In contrast, the issue that I had with both Flaskr and
LLVM was actually a case of the most easily available documentation
being TOO up-to-date.</p>

<h3>How can we do better?</h3>

<p>Let&rsquo;s contrast these experiences with a project that gets it right:
<a href="https://www.djangoproject.com/">Django</a>. First off, I just want to praise the Django project for
their excellent documentation in general. There is a lot of it, and it
is fairly well-written and clear. There is also a good mixture of the
<a href="http://jacobian.org/writing/great-documentation/what-to-write/">three types of documentation</a> that every project
needs.<code>&lt;/praise&gt;</code></p>

<p>Okay, now lets look at how Django avoids the Docs Mismatch
problem. First, look at the URL for the main
<a href="https://docs.djangoproject.com/en/1.7/">Django Documentation page</a>:
<code>https://docs.djangoproject.com/en/1.7/</code>.  Notice that <code>1.7</code> at the
end? That indicates what version of Django these docs are for. At the
time of this writing, 1.7 is the latest <strong>stable</strong> release of
Django. So, right away Django is doing well. By default the link on
the Django homepage takes you to this page.  And you can bet, that
when the next stable release of Django comes out, that homepage will
be updated to point at the 1.8 version.</p>

<p>However, there is still more that Django is getting fundamentally
right here. By embedding the version of the documentation in the URL,
they can host multiple different versions of the documentation. And
they do! This means that if you&rsquo;re forced to use an older version of
Django for whatever reason (legacy project, no install privileges
etc.) you can still go online to the Django website and find the
documentation for the version you&rsquo;re using. To make this even easier,
their documentation pages all have a permanent float in the bottom
right hand corner that shows the current version of the docs that
you&rsquo;re looking at, and has links to other recent versions of the
documentation.  How cool is that!</p>

<p>If you look at the links in that little floated element, you&rsquo;ll notice
a non-numbered version is available <code>dev</code>. This is the documentation
for the [current development head][djangodevdoc]. More importantly,
notice that this is the equivalent of the documentation that was
easiest for me to find when dealing with both LLVM and Flaskr. But
with Django I had to specifically go looking for it. Why? Because most
people don&rsquo;t want to read the docs for the development head.  And if
they do, they know it!</p>

<p>Django gets one more thing really right here. When you go to the dev
docs page, they automatically add a float at the top of the screen, in
an eye-catching color that effectively says: &ldquo;These are the dev
docs. Are you sure you want to be reading them? They&rsquo;re probably
different.&rdquo;</p>

<p>This last feature is really the key to avoiding the Docs Mismatch
problem. The development docs are fairly rarely what people want to be
reading when they first pick up a new project. So they shouldn&rsquo;t be
the easiest (or only!) documentation to find for your project.</p>

<h3>How do we fix it?</h3>

<p>The ideal situation is for your documentation to be structured like
Django&rsquo;s: multiple versions available, notifications when viewing the
dev version. The good news is that this is much easier to achieve
thany you might expect. <a href="https://readthedocs.org/">Read The Docs</a> makes it trivial to have this
kind of setup for your open source project. In fact, Django actually
uses Read The Docs for their own documentation. I highly recommend
checking out their page and seeing just how easy it is to set up for
your own projects. Of course, once you have this awesome system the
only issue is actually writing all the awesome documentation to
populate it&hellip;</p>

<h3>Other issues</h3>

<p>A primary problem with the Docs Mismatch issue is that the people who
notice it are typically people just wanting to use the project, not
the people developing it. This is especially problematic because these
people are also the most easily discouraged from using a project.</p>

<p>Another problem is that often - especially in older projects - fixing
the Docs Mismatch issue will require either access to a server, or
changes in a release deployment process or something similar. None of
these things are possible for a beginner in a project to do. This
means that the people the most motivated to fix the issue, are the
least able to do anything about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adventures With Clojure Macros]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/10/14/adventures-with-clojure-macros/"/>
    <updated>2014-10-14T18:20:56-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/10/14/adventures-with-clojure-macros</id>
    <content type="html"><![CDATA[<p>So, this is the second day of my second week of <a href="https://www.hackerschool.com/">Hacker School</a>. I&rsquo;m
finally starting to feel like I&rsquo;m getting into the
groove.</p>

<p>So I tackled <a href="http://mitpress.mit.edu/books/design-concepts-programming-languages">DCPL</a> in Clojure once again. I found two sort of scary
things. One, although my code was in a git repo, it wasn&rsquo;t pushed to
Github. Two, there was a big hairy macro that had apparently replaced
the core of my postfix program, but it wasn&rsquo;t checked in!!! Bad past
Geoff. Very bad, no good software practices&hellip;</p>

<!--more-->


<p>Anyhow, so I cleaned things up, and pushed up to Github (it&rsquo;s
<a href="https://github.com/RadicalZephyr/postfix-clj">here</a> FYI), and then I started playing with that macro
again. Turns out it pretty much worked. After a bit of mucking around
I managed to get it going. This quick success buoyed my spirits and I
thought, why don&rsquo;t I write another&hellip; replacing repetitive code is
awesome etc.</p>

<p>Then there I wrote some tests, and it turns out that it didn&rsquo;t
actually work. Repeat for the better part of two hours with testing
getting slowly better and my implementation getting slowly more
correct. But, there were lots of little successes throughout, so I
didn&rsquo;t get discouraged, and the thrill of surmounting the difficulties
I encountered gave me a warm glow when I overcame them (macro writing
is hard! I know, because <a href="http://www.paulgraham.com/avg.html">Paul Graham told me so</a> ;).</p>

<p>Anyhow, my success at writing this one macro made me want to write
another.  And I immediately saw an opportunity!  All of the binary
math operations for postfix are going to have the exact same form,
even with the last macro I wrote. etc. etc. about that macro, goes
pretty smooth.</p>

<p>Anyhow, so that went alright and now there are a bunch of tests I want
to write, just to validate that my macro is producing reasonable code
and continues to do so.</p>

<p>But&hellip; these tests are going to be SOOOO similar!!!  Are you thinking
what I&rsquo;m thinking? Awww, yeah! Time for another macro.</p>

<p>So I start writing a macro to generate some simple tests for me.</p>

<p>All the tests have this general form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">deftest</span> <span class="nv">subcommand-test</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">testing</span> <span class="s">&quot;Sub command&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">sub-cmd</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'>           <span class="p">[</span><span class="mi">-1</span><span class="p">]))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">sub-cmd</span> <span class="p">[</span><span class="mi">0</span> <span class="mi">3</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'>           <span class="p">[</span><span class="mi">0</span> <span class="mi">1</span><span class="p">]))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nf">thrown-with-msg?</span> <span class="nv">clojure.lang.ExceptionInfo</span>
</span><span class='line'>                          <span class="o">#</span><span class="s">&quot;sub: not enough values on the stack&quot;</span>
</span><span class='line'>                          <span class="p">(</span><span class="nf">sub-cmd</span> <span class="p">[</span><span class="mi">1</span><span class="p">])))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>So I start my macro working on that basic outline. Over the course of
another hour or so, I tweak and work it up to be this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">defbinary-op-test</span> <span class="p">[</span><span class="nv">cmd-name</span> <span class="nv">op</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">cmd-name</span> <span class="p">(</span><span class="nb">name </span><span class="nv">cmd-name</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">fn-name</span>  <span class="p">(</span><span class="nb">symbol </span><span class="p">(</span><span class="nb">str </span><span class="nv">cmd-name</span> <span class="s">&quot;-cmd&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">test-args</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="nv">op-result</span> <span class="p">(</span><span class="nb">vector </span><span class="p">(</span><span class="nb">apply </span><span class="nv">op</span> <span class="p">(</span><span class="nb">reverse </span><span class="nv">test-args</span><span class="p">)))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">prn </span><span class="s">&quot;test-args:&quot;</span> <span class="nv">test-args</span> <span class="s">&quot;\nop result:&quot;</span> <span class="nv">op-result</span><span class="p">)</span>
</span><span class='line'>    <span class="o">`</span><span class="p">(</span><span class="nf">testing</span> <span class="o">~</span><span class="p">(</span><span class="nb">str </span><span class="nv">cmd-name</span> <span class="s">&quot; command&quot;</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="o">~</span><span class="ss">&#39;=</span> <span class="p">(</span><span class="o">~</span><span class="nv">fn-name</span> <span class="o">~</span><span class="nv">test-args</span><span class="p">)</span>
</span><span class='line'>              <span class="o">~</span><span class="nv">op-result</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="o">~</span><span class="ss">&#39;=</span> <span class="p">(</span><span class="o">~</span><span class="nv">fn-name</span> <span class="o">~</span><span class="p">(</span><span class="nb">into </span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="nv">test-args</span><span class="p">))</span>
</span><span class='line'>              <span class="o">~</span><span class="p">(</span><span class="nb">into </span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="nv">op-result</span><span class="p">)))</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="o">~</span><span class="ss">&#39;thrown-with-msg?</span> <span class="nv">clojure.lang.ExceptionInfo</span>
</span><span class='line'>                               <span class="p">(</span><span class="nb">re-pattern </span><span class="o">~</span><span class="p">(</span><span class="nb">str </span><span class="nv">cmd-name</span>
</span><span class='line'>                                                 <span class="s">&quot;: not enough values on the stack&quot;</span><span class="p">))</span>
</span><span class='line'>                               <span class="p">(</span><span class="o">~</span><span class="nv">fn-name</span> <span class="p">[</span><span class="mi">1</span><span class="p">]))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Okay, it looks like a monster.  But it&rsquo;s pretty straightforward.
Since my binary ops are actually implemented by the core functions
they represent I&rsquo;m not concerned with the correctness or with testing
that they work per se. I&rsquo;m more concerned with the vectors going in
and coming out.  So I figure, I&rsquo;ll use the same numbers for all of
them, and have the macro generate the result of actually applying the
given binary operator to the data I&rsquo;ve hardcoded.</p>

<p>That&rsquo;s whats going inside the <code>let</code> with <code>test-args</code> and <code>op-result</code>.</p>

<p>There are a couple of other tricky things I found out. For instance,
the <code>is</code> testing macro is looking for exactly the symbol <code>=</code> not for
<code>clojure.core/=</code> or for <code>postfix.core-test/thrown-with-msg?</code>. I know,
because those are the things <code>defbinary-op-test</code> produced before I put
in the unquoted-quote <code>~'</code> to stop the automatic namespace resolution,
as described in the <a href="http://www.manning.com/fogus2/">Joy of Clojure</a>.</p>

<p>But then, after I debugged all of these little problems, I discovered
that, though my tests were being generated syntactically correctly,
they were failing!</p>

<p>Now, given the way that I constructed the macro, this didn&rsquo;t seem
possible.  I mean, I&rsquo;m literally testing that my command, which uses
the given operator, produces the same thing as that operator.</p>

<p>So I dig in to make sure my macro is doing the right stuff, and pull
out <code>(clojure.pprint/pprint (macroexpand-1 '(defbinary-op-test add
+)))</code></p>

<p>which produces this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">clojure.test/testing</span>
</span><span class='line'> <span class="s">&quot;add command&quot;</span>
</span><span class='line'> <span class="p">(</span><span class="nf">clojure.test/is</span> <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">add-cmd</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])</span> <span class="p">[</span><span class="mi">3</span><span class="p">]))</span>
</span><span class='line'> <span class="p">(</span><span class="nf">clojure.test/is</span> <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">add-cmd</span> <span class="p">[</span><span class="mi">0</span> <span class="mi">3</span> <span class="mi">1</span><span class="p">])</span> <span class="p">[</span><span class="mi">0</span> <span class="mi">3</span><span class="p">]))</span>
</span><span class='line'> <span class="p">(</span><span class="nf">clojure.test/is</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">thrown-with-msg?</span>
</span><span class='line'>   <span class="nv">clojure.lang.ExceptionInfo</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">clojure.core/re-pattern</span> <span class="s">&quot;add: not enough values on the stack&quot;</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">add-cmd</span> <span class="p">[</span><span class="mi">1</span><span class="p">]))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Okay, okay everything looks good&hellip; Wait a second&hellip; Did the macro
produce the result that 3 + 1 is 3?  Okay, let&rsquo;s take a closer look at
that macro again. Specifically, the two relevant portions of the let:</p>

<pre><code>test-args [3 1]
op-result (vector (apply op (reverse test-args)))]
</code></pre>

<p>and the part where <code>op-result</code> is used:</p>

<pre><code>(is (~'= (~fn-name ~test-args)
       ~op-result))
</code></pre>

<p>Okay, everthing looks pretty kosher, but to be sure, let&rsquo;s try it out
in the repl, with the appropriate values filled in.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">op</span> <span class="nv">+</span>
</span><span class='line'>      <span class="nv">test-args</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">vector </span><span class="p">(</span><span class="nb">apply </span><span class="nv">op</span> <span class="p">(</span><span class="nb">reverse </span><span class="nv">test-args</span><span class="p">))))</span>
</span><span class='line'><span class="c1">;; =&gt; [4]</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s correct.  But that macroexpand clearly shows a <code>[3]</code> where that
<code>[4]</code> should be.</p>

<p>Okay, maybe I didn&rsquo;t reproduce something correctly in the REPL.  Let&rsquo;s
put some print statements in the macro before the expansion</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">defbinary-op-test</span> <span class="p">[</span><span class="nv">cmd-name</span> <span class="nv">op</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">cmd-name</span> <span class="p">(</span><span class="nb">name </span><span class="nv">cmd-name</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">fn-name</span>  <span class="p">(</span><span class="nb">symbol </span><span class="p">(</span><span class="nb">str </span><span class="nv">cmd-name</span> <span class="s">&quot;-cmd&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">test-args</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="nv">op-result</span> <span class="p">(</span><span class="nb">vector </span><span class="p">(</span><span class="nb">apply </span><span class="nv">op</span> <span class="p">(</span><span class="nb">reverse </span><span class="nv">test-args</span><span class="p">)))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">prn </span><span class="s">&quot;test-args:&quot;</span> <span class="nv">test-args</span> <span class="s">&quot;op result:&quot;</span> <span class="nv">op-result</span><span class="p">)</span>
</span><span class='line'>    <span class="o">`</span><span class="p">(</span><span class="nf">testing</span> <span class="o">~</span><span class="p">(</span><span class="nb">str </span><span class="nv">cmd-name</span> <span class="s">&quot; command&quot;</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="o">~</span><span class="ss">&#39;=</span> <span class="p">(</span><span class="o">~</span><span class="nv">fn-name</span> <span class="o">~</span><span class="nv">test-args</span><span class="p">)</span>
</span><span class='line'>              <span class="o">~</span><span class="nv">op-result</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="o">~</span><span class="ss">&#39;=</span> <span class="p">(</span><span class="o">~</span><span class="nv">fn-name</span> <span class="o">~</span><span class="p">(</span><span class="nb">into </span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="nv">test-args</span><span class="p">))</span>
</span><span class='line'>              <span class="o">~</span><span class="p">(</span><span class="nb">into </span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="nv">op-result</span><span class="p">)))</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="o">~</span><span class="ss">&#39;thrown-with-msg?</span> <span class="nv">clojure.lang.ExceptionInfo</span>
</span><span class='line'>                               <span class="p">(</span><span class="nb">re-pattern </span><span class="o">~</span><span class="p">(</span><span class="nb">str </span><span class="nv">cmd-name</span>
</span><span class='line'>                                                 <span class="s">&quot;: not enough values on the stack&quot;</span><span class="p">))</span>
</span><span class='line'>                               <span class="p">(</span><span class="o">~</span><span class="nv">fn-name</span> <span class="p">[</span><span class="mi">1</span><span class="p">]))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I reload the namespace I get this:</p>

<pre><code>:reloading (postfix.core postfix.core-test)
"test-args:" [3 1] "op result:" [3]
"test-args:" [3 1] "op result:" [3]
"test-args:" [3 1] "op result:" [3]
"test-args:" [3 1] "op result:" [3]
</code></pre>

<p>Okay, that&rsquo;s clearly what&rsquo;s happening but it&rsquo;s still really strange
that the <code>[3]</code> is showing up at all. So how about a
<a href="https://en.wikipedia.org/wiki/Minimal_Working_Example">minimal working example</a> (or rather, not-working in this case)?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">deftestaddproblem</span> <span class="p">[</span><span class="nv">op</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">test-args</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="nv">op-result</span> <span class="p">(</span><span class="nb">vector </span><span class="p">(</span><span class="nb">apply </span><span class="nv">op</span> <span class="p">(</span><span class="nb">reverse </span><span class="nv">test-args</span><span class="p">)))]</span>
</span><span class='line'>    <span class="o">`</span><span class="p">[</span><span class="o">~</span><span class="nv">test-args</span> <span class="o">~</span><span class="nv">op-result</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then macroexpanding it:</p>

<pre><code>(clojure.pprint/pprint (macroexpand-1 '(deftestaddproblem +)))
[[3 1] [3]]
</code></pre>

<p>Just for sanity, lets make sure it&rsquo;s the right version of <code>+</code>:</p>

<pre><code>(clojure.pprint/pprint (macroexpand-1 '(deftestaddproblem clojure.core/+)))
[[3 1] [3]]
</code></pre>

<p>What is going on!?!?!?!?! Okay, back to the REPL. This time, a raw
REPL from <code>lein repl</code> in my home directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="kd">defmacro </span><span class="nv">dotest</span> <span class="p">[</span><span class="nv">op</span><span class="p">]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>   <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">test-args</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>         <span class="nv">op-result</span> <span class="p">(</span><span class="nb">vector </span><span class="p">(</span><span class="nb">apply </span><span class="nv">op</span> <span class="p">(</span><span class="nb">reverse </span><span class="nv">test-args</span><span class="p">)))]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>     <span class="o">`</span><span class="p">[</span><span class="o">~</span><span class="nv">test-args</span> <span class="o">~</span><span class="nv">op-result</span><span class="p">]))</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;user/dotest</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest</span> <span class="nv">+</span><span class="p">)</span>
</span><span class='line'><span class="p">[[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">3</span><span class="p">]]</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest</span> <span class="nv">-</span><span class="p">)</span>
</span><span class='line'><span class="p">[[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">3</span><span class="p">]]</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest</span> <span class="nv">*</span><span class="p">)</span>
</span><span class='line'><span class="p">[[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">3</span><span class="p">]]</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest</span> <span class="nv">/</span><span class="p">)</span>
</span><span class='line'><span class="p">[[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">3</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;; And without using the macro preprocessing</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">vector </span><span class="p">(</span><span class="nb">apply + </span><span class="p">(</span><span class="nb">reverse </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])))</span>
</span><span class='line'><span class="p">[</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">vector </span><span class="p">(</span><span class="nb">apply - </span><span class="p">(</span><span class="nb">reverse </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])))</span>
</span><span class='line'><span class="p">[</span><span class="mi">-2</span><span class="p">]</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">vector </span><span class="p">(</span><span class="nb">apply * </span><span class="p">(</span><span class="nb">reverse </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])))</span>
</span><span class='line'><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">vector </span><span class="p">(</span><span class="nb">apply / </span><span class="p">(</span><span class="nb">reverse </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])))</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="nv">/3</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Removing more complexity...</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="kd">defmacro </span><span class="nv">dotest2</span> <span class="p">[</span><span class="nv">op</span><span class="p">]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>   <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">test-args</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>         <span class="nv">op-result</span> <span class="p">(</span><span class="nb">apply </span><span class="nv">op</span> <span class="nv">test-args</span><span class="p">)]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>    <span class="o">`</span><span class="p">[</span><span class="o">~</span><span class="nv">test-args</span> <span class="o">~</span><span class="nv">op-result</span><span class="p">]))</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;user/dotest2</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest2</span> <span class="nv">+</span><span class="p">)</span>
</span><span class='line'><span class="p">[[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest2</span> <span class="nv">-</span><span class="p">)</span>
</span><span class='line'><span class="p">[[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest2</span> <span class="nv">*</span><span class="p">)</span>
</span><span class='line'><span class="p">[[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest2</span> <span class="nv">/</span><span class="p">)</span>
</span><span class='line'><span class="p">[[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; And again outside of the macro</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">apply + </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">apply - </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">apply * </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">apply / </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; More experiments</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="kd">defmacro </span><span class="nv">dotest3</span> <span class="p">[]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>   <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">+-res</span> <span class="p">(</span><span class="nb">apply + </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>         <span class="nv">--res</span> <span class="p">(</span><span class="nb">apply - </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>         <span class="nv">*-res</span> <span class="p">(</span><span class="nb">apply * </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>         <span class="nv">div-res</span> <span class="p">(</span><span class="nb">apply / </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>    <span class="o">`</span><span class="p">[</span><span class="o">~</span><span class="nv">+-res</span> <span class="o">~</span><span class="nv">--res</span> <span class="o">~</span><span class="nv">*-res</span> <span class="o">~</span><span class="nv">div-res</span><span class="p">]))</span>
</span><span class='line'><span class="mi">3</span><span class="o">#</span><span class="ss">&#39;user/dotest3</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest3</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mi">4</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; And another</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="kd">defmacro </span><span class="nv">dotest4</span> <span class="p">[]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>   <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">args</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>         <span class="nv">+-res</span> <span class="p">(</span><span class="nb">apply + </span><span class="nv">args</span><span class="p">)</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>         <span class="nv">--res</span> <span class="p">(</span><span class="nb">apply - </span><span class="nv">args</span><span class="p">)</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>         <span class="nv">*-res</span> <span class="p">(</span><span class="nb">apply * </span><span class="nv">args</span><span class="p">)</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>         <span class="nv">div-res</span> <span class="p">(</span><span class="nb">apply / </span><span class="nv">args</span><span class="p">)]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>    <span class="o">`</span><span class="p">[</span><span class="o">~</span><span class="nv">+-res</span> <span class="o">~</span><span class="nv">--res</span> <span class="o">~</span><span class="nv">*-res</span> <span class="o">~</span><span class="nv">div-res</span><span class="p">]))</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;user/dotest4</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest4</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mi">4</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; This might be important...</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="kd">defmacro </span><span class="nv">dotest5</span> <span class="p">[</span><span class="nv">op</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>   <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">res</span> <span class="p">(</span><span class="nb">apply </span><span class="nv">op</span> <span class="nv">args</span><span class="p">)]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>    <span class="o">`</span><span class="p">[</span><span class="o">~</span><span class="nv">op</span> <span class="o">~</span><span class="nv">args</span> <span class="o">~</span><span class="nv">res</span><span class="p">]))</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;user/dotest5</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest5</span> <span class="nb">+ </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'><span class="nv">ArityException</span> <span class="nv">Wrong</span> <span class="nv">number</span> <span class="nv">of</span> <span class="nv">args</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="nv">passed</span> <span class="nv">to</span><span class="err">:</span> <span class="nv">Symbol</span>  <span class="nv">clojure.lang.Compiler.macroexpand1</span> <span class="p">(</span><span class="nf">Compiler.java</span><span class="ss">:6557</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Or not... may just be a problem</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="kd">defmacro </span><span class="nv">dotest5</span> <span class="p">[</span><span class="nv">op</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>   <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">res</span> <span class="p">(</span><span class="nb">apply </span><span class="nv">op</span> <span class="nv">args</span><span class="p">)]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>  <span class="o">`</span><span class="p">[</span><span class="o">~</span><span class="nv">args</span> <span class="o">~</span><span class="nv">res</span><span class="p">]))</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;user/dotest5</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest5</span> <span class="nb">+ </span><span class="p">[</span><span class="mi">1</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'><span class="p">[[</span><span class="mi">1</span> <span class="mi">2</span><span class="p">]</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; For sanity checking purposes, since apply can only be used with</span>
</span><span class='line'><span class="c1">;; functions</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">fn?</span> <span class="nv">+</span><span class="p">)</span>
</span><span class='line'><span class="nv">true</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">fn?</span> <span class="nv">-</span><span class="p">)</span>
</span><span class='line'><span class="nv">true</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">fn?</span> <span class="nv">*</span><span class="p">)</span>
</span><span class='line'><span class="nv">true</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">fn?</span> <span class="nv">/</span><span class="p">)</span>
</span><span class='line'><span class="nv">true</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; And as Kevin Lynagh helpfully pointed out to me, macros don&#39;t</span>
</span><span class='line'><span class="c1">;; evaluate their arguments...  Time to re-read the section on macros</span>
</span><span class='line'><span class="c1">;; in Joy of Clojure</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">apply </span><span class="ss">&#39;+</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">apply </span><span class="p">(</span><span class="nb">eval </span><span class="ss">&#39;+</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School: Week 1 Review]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/10/11/hacker-school-week-1-review/"/>
    <updated>2014-10-11T03:48:52-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/10/11/hacker-school-week-1-review</id>
    <content type="html"><![CDATA[<p>So, I can&rsquo;t sleep, and it&rsquo;s the end of my first week at
<a href="https://www.hackerschool.com/">Hacker School</a>, so I thought I&rsquo;d do some reflecting on what I did,
why I&rsquo;m here and similar topics.</p>

<!--more-->


<h2>Week Review</h2>

<h3>Monday</h3>

<p>This week has been a blur in some ways and incredibly long in others.
I started out on Monday with an interesting but ultimately abortive
attempt to pair with Alyssa Carter on her observational type system
implementation in Idris. Given that I know pretty much nothing about
either type theory or Idris, this outcome was probably somewhat
inevitable.  In retrospect, while it was interesting to get some
exposure to the ideas and concepts that she talked about, I probably
should have admitted more freely when things she was saying were going
over my head. This is something that I&rsquo;ve always struggled with, and I
think that Hacker School is a great place to try and tackle getting
over it.</p>

<p>The rest of Monday I spent flailing. And not really with any code;
mostly with just getting familiarized with Zulip and the HS (physical)
environment, and turning off most notifications in Zulip.  I
discovered an interesting thing about myself that I hadn&rsquo;t been fully
aware of previously: when there are constant notifications happening
(like when you&rsquo;re highly subscribed to Zulip and desktop notifications
are turned on), I get really stressed out on a subconscious level.</p>

<p>It&rsquo;s sort of similar to how I start to feel inexplicably rushed when
my bladder is getting full, but before I actually notice the urge to
pee.</p>

<p>Anyhow, during my flailing I also poked a bit at my
<a href="https://github.com/RadicalZephyr/snake-puzzle-solver">snake-puzzle-solver</a> project, and discovered that I&rsquo;d left it in a
sort of broken-ish state.</p>

<h3>Tuesday</h3>

<p>On Tuesday I felt much calmer. I&rsquo;m having a hard time remembering now
what exactly I worked on. I believe it was working through
<em><a href="https://realworldocaml.org/">Real World OCaml</a></em> though.  I didn&rsquo;t get very far, but I also spent
a bit of time <a href="http://www.zephyrizing.net/blog/2014/10/07/dot-dot-dot-and-this-is-why-master-should-be-stable/">helping Sammy out</a>, and fixing up this
blog with Octopress.</p>

<h3>Wednesday</h3>

<p>Through some poor decision-making Tuesday evening (i.e. eating two
slices of pizza, and also drinking a not inconsiderable amount) I was
either very gluten-sick or very, very hungover on Wednesday. No good,
very bad feels were had all day. At the time I was fairly convinced
that it was the pizza. In retrospect, the symptoms were very
hangover-like. Perhaps I just got much drunker than I thought I did?
Hard to say.</p>

<h3>Thursday</h3>

<p>On Thursday I powered through the first third or so of <em>Real World
OCaml</em>. That was awesome. OCaml is a fascinating language, and even
though it has perhaps more than it&rsquo;s share of syntactic quirks it&rsquo;s
been fun learning it. On a slightly meta-level I was sort of
dissatisfied throughout the day because of my (mostly self-imposed)
isolation. Not using Zulip much - because of how distracting it is -
makes me feel a bit cut-off from some of the social aspects of HS. And
I still haven&rsquo;t really found the courage to seek out somebody to pair
with. Another thing I want to work on. Also, the fact that I was doing
something so ordinary and mundane as simply reading a book made me
feel bad. Reading a book on a new language and working through the
code examples is something that I can, have, and - most likely - will
do again at home. So why am I &ldquo;wasting&rdquo; my time at Hacker School,
precious, precious time that it is, doing it here? Particularly since
I&rsquo;m doing it alone!!</p>

<p>I don&rsquo;t really have answers to most of these dissatisfactions. Most of
them are probably just my social awkwardness manifesting, and the last
one sounds suspiciously like a strange form of Imposter Syndrome.</p>

<p>I stayed late in the evening though and started working on a neat
project that occurred to me when I suggested that another HS&#8217;er work
through Phil Nelson&rsquo;s minishell - implementing the minishell in
OCaml!! And even more importantly, I achieved a real-feeling amount of
success in the project! I was able, without any real documentation
(couldn&rsquo;t find accurate docs!) to utilize the OCaml Unix module well
enough to create the equivalent of the <code>minishell.c</code> that Nelson gives
out as the basis for the shell, and to complete the equivalent of
assignment 1.</p>

<h3>Friday</h3>

<p>I somehow gained the impression that showing up at the space was less
expected on Friday. Now I&rsquo;m really not sure where/how I got that
idea.  But I&rsquo;m also totally unsure if it&rsquo;s actually wrong&hellip; >:(</p>

<p>I did however use the day to catch up on some sleep, do some errands
(digital ones anyhow) and go hang out with a friend I haven&rsquo;t seen in
literally years. So, overall win even if I did totally miss out on a
HS day.  But again, it makes me feel sort of disconnected to be not at
the space when others are.</p>

<h2>Project Ideas</h2>

<p>Given some of my meta-dissatisfaction that I felt on Thursday
regarding what I&rsquo;ve been working on, I thought I might try to list
some other projects that seem more &ldquo;Hacker School worthy&rdquo;.</p>

<p>Looking to the <a href="https://www.hackerschool.com/manual#sec-principles">three traits of an awesome Hacker Schooler</a>,
I started thinking about what are some challenging (strive for
greatness) problems that I could approach with rigor.</p>

<ul>
<li>Dive into the bug in auto-fill in emacs, try to fix it</li>
<li>Pursue learning more graphics stuff (since I&rsquo;ve been sort of
intimidated by it for a while). Project-wise, it might be
interesting to try and discover what sort of work it would take to
update Emacs&#8217; rendering engine.</li>
<li>Try to dive into the Boomerang decompiler&rsquo;s source code and
understand it</li>
</ul>


<p>And some other random things I want to do (but might not be feasible):</p>

<ul>
<li>Implement a language that has lispy-prefix syntax but OCaml
semantics; in particular that has type-inferencing</li>
<li>To that end, implement the type inferencing engine that powers OCaml
type inferences</li>
<li>Port Boomerang to use the LLVM architecture</li>
</ul>


<h2>Final Thoughts</h2>

<p>It&rsquo;s frustrating how many of the things that I want to do still have
what seems like huge mounds of prerequisites in front of them. I want
to do all of these interesting language things, but I feel like I&rsquo;m
blocked from doing them because I want to do them in LLVM, but I don&rsquo;t
know anything about actually using the LLVM.</p>

<p>Also, when I was reflecting on what I need to do to become a better
programmer, one of the recurring thoughts I responded with is that I
need to write/work on a larger system/project. I feel like I have
quite a bit of experience taking an small projects. But not something
like YRAS&hellip; Which, I think, is one reason that I am absolutely
terrified of starting that project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[... And This Is Why Master Should Be Stable]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/10/07/dot-dot-dot-and-this-is-why-master-should-be-stable/"/>
    <updated>2014-10-07T12:28:48-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/10/07/dot-dot-dot-and-this-is-why-master-should-be-stable</id>
    <content type="html"><![CDATA[<p>Second day at Hacker School.  I spent the morning doing two things:</p>

<ul>
<li>getting my blog setup to use <a href="http://octopress.org/">Octopress</a>.</li>
<li>helping another HS-er troubleshoot getting setup with <a href="http://flask.pocoo.org/">Flask</a> and <a href="http://flask.pocoo.org/docs/0.10/tutorial/introduction/">Flaskr</a>.</li>
</ul>


<!--more-->


<p>Yesterday, I was super frustrated by the difficulties I had in getting
Octopress going, and was reminded of the frustrations with setting up
Ruby environments that led me to wipe my computer and start from
scratch a few weeks ago.  You know, that and a certain amount of boredom.</p>

<p>Anyhow, I was able to make more headway today, largely because I
sorted out all of the really silly stuff yesterday.</p>

<p>But helping Sammy with setting up <a href="http://flask.pocoo.org/">Flask</a> was a nightmare!  TL;DR, we
figured it out, and it was incredibly simple.</p>

<p>First off, there were some minor SNAFU&rsquo;s with me showing her about
[virtualenv], and explaining briefly how it works and how why she
should use it.  But then, we were confronted with these instructions
on the <a href="https://github.com/mitsuhiko/flask/tree/master/examples/flaskr">Flaskr doc page</a> on Github, a natural place to
look when the <a href="http://flask.pocoo.org/docs/0.10/tutorial/introduction/">&ldquo;actual&rdquo; docs</a> don&rsquo;t mention anything about how
to install or setup the damn thing.</p>

<p>We spent nearly two and a half hours searching for the mythical
<code>flask</code> binary, to no avail.  Finally, after I inadvertently ran
aacross this <a href="https://github.com/mitsuhiko/flask/issues/1180">flask issue</a>, it dawned on me that we might be
having the same problem.  Well, that&rsquo;s not quite true.  In reality, I
got so frustrated that I decided to just try the simplest thing that I
could think of to get flaskr to run <code>python flaskr.py</code>.  Low and
behold, it worked!!  Then, in retrospect, having seen that issue
describing the disconnect between the docs for flaskr in the flask
<code>master</code> branch and what the latest stable version was, I went and
looked at the <a href="https://github.com/mitsuhiko/flask/tree/0.10.1/examples/flaskr">last stable release docs</a> for Flaskr, and
there it was. Simple instructions to do the simple, straightforward
thing.</p>

<p>[[virtualenv]: <a href="http://virtualenv.readthedocs.org/en/latest/virtualenv.html">http://virtualenv.readthedocs.org/en/latest/virtualenv.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keybase Hacker News Q&A]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/06/11/keybase-hackernews-q-and-a/"/>
    <updated>2014-06-11T23:00:00-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/06/11/keybase-hackernews-q-and-a</id>
    <content type="html"><![CDATA[<p>I started using <a href="https://keybase.io">Keybase</a> sometime back in April. I&rsquo;ve been interested
in doing crypto stuff for a long time, starting with using an SSH
keypair instead of a password to access the WWU CS department&rsquo;s
computer labs remotely.</p>

<p>Learning more about GPG and actually figuring out how to send and
receive encrypted messages has been on my list of things to learn for
a while, but every time I had a couple spare minutes and tried to
approach it I was rebuffed by the impenetrability of the manuals for
gpg.</p>

<p>However, recently while thinking about who to give my remaining five
invites to, I decided to do some more research on what those more
security-savvy than I thought about Keybase.</p>

<!--more-->


<p>The results were somewhat of a mixed bag. In no particular order, I
read:</p>

<ul>
<li><a href="http://blog.lrdesign.com/2014/03/thoughts-on-keybase-io/">A thoughtful critique</a></li>
<li><a href="http://www.tbray.org/ongoing/When/201x/2014/03/19/Keybase">A nice first look</a></li>
<li><a href="https://filippo.io/on-keybase-dot-io-and-encrypted-private-key-sharing/">A response to the people decrying the upload private key feature</a></li>
<li><a href="http://blog.lizdenys.com/2014/03/31/refusing-to-verify-myself/">A brief look at the chain of trust in even getting Keybase</a></li>
</ul>


<p>I also came across the discussion that occurred on Hacker News shortly
after Keybase first appeared. As so often happens when I stumble on to
a HN comment page, I ended up reading the whole thing. What I noticed
was that there seems to be some information from Max and Chris (the
founders of Keybase) that I hadn&rsquo;t run across on the Keybase website
itself.</p>

<p>So I volunteered myself for a public service. I extracted the parts of
the discussion that were interesting and relevant into a text
document. I tried to focus on the questions that got interesting
responses. I left out many little asides, and tangential discussions.</p>

<p>The founders of Keybase are malgorithms and maxtaco. Most of the
answers are by them, though in some cases I&rsquo;ve preserved a chain of
replies, with only the first marked as a &ldquo;question&rdquo;. Without further
ado:</p>

<blockquote><h3>General Announcement</h3>

<p>malgorithms 118 days ago</p>

<p>There were multiple questions/comments below about this, so I felt I
should clarify one detail about the keybase client&rsquo;s trust of the
server. When the keybase client requests maria&rsquo;s key from the keybase
server, it does not simply trust the public key because it trusts the
server (or uses https - huh?).</p>

<p>Rather, the server replies with links to tweets, gists, etc. &ndash;
maria&rsquo;s public identity proofs. The keybase client does not trust that
these are honest, so it scrapes them directly and makes sure they were
signed by the same public key that the server provided. In other
words, the server could reply with a different maria, and simply lie,
but not with the real maria&rsquo;s github or twitter account.</p>

<p>The server could also lie by omission, leaving out an identity. But it
cannot invent ones that do not exist, without the client knowing.</p>

<p>Again, the premise here is that maria is the sum of her online
identities.</p>

<p>The website itself is of course a different story. When you look up
maria on keybase&rsquo;s website, you are trusting that keybase.io did not
lie about her github account. Fortunately you can confirm by following
the link to her gist, where she announced her keybase username and
posted her key fingerprint.</p>

<h3>Q:</h3>

<p>theboss 118 days ago</p>

<p>I don&rsquo;t see why you don&rsquo;t just get the key once, allow you to verify
it, and store it locally. It seems pointless to make all these extra
requests to you.</p>

<p>There&rsquo;s a reason that gpg does this&hellip;.. Maria&rsquo;s twitter being hacked,
Maria&rsquo;s github being hacked, Maria&rsquo;s Keystore being hacked&hellip;.a lot
can go wrong.</p>

<p>There are still weaknesses like, you lie about a github and link to
your own github, and lie about the public key. And&hellip;many others.</p>

<h3>A:</h3>

<p>malgorithms 118 days ago</p>

<p>yes, it does do this; once you&rsquo;re satisfied with maria&rsquo;s identity,
that she&rsquo;s the person you want, you sign a statement to that effect,
which you can store just locally or post back to the server. (or of
course you can just sign her key in GPG!) The latter - posting back to
the server - is for portability reasons. A keybase user will likely
use keybase on multiple machines.</p>

<h3>Q:</h3>

<p>riquito 117 days ago</p>

<p>The first thing I thought about is a man in the middle attack with
homoglyphs. I don&rsquo;t know if I&rsquo;m paranoid, but look at this</p>

<blockquote><p>keybase id maria</p></blockquote>

<p>   pgp: C4B3 15B4 7154 5281 5100 1C58 C2A5 977B 0022 github:
   mаria_leah ✓ <a href="https://gist.github.com/23423">https://gist.github.com/23423</a> twitter: mаria_h20 ✓
   <a href="https://t.co/m%D0%B0ria_h20/523554">https://t.co/m%D0%B0ria_h20/523554</a> site: mаriah20.com ✓
   <a href="https://m%D0%B0riah20.com/X904F...">https://m%D0%B0riah20.com/X904F&#8230;</a></p>

<p>I looked up for &lsquo;maria&rsquo;, all ascii. The answer, served by a malicious
server, contains the first &lsquo;a&rsquo; of maria in Cyrillic (check yourself,
you&rsquo;ll see that &lsquo;mаria_leah&rsquo; != &lsquo;maria_leah&rsquo;). This would fool the
user.</p>

<p>Maybe the client should apply some logic as browsers do for IDN
homograph attack to show characters not in your locale in a different
way, or at least warn you.</p>

<h3>A:</h3>

<p>malgorithms 117 days ago</p>

<p>Hi riquito - this is a very legitimate concern, and it has to be
reviewed individually for each type of proof keybase supports, in the
client. With twitter, keybase, and github, you can&rsquo;t have a username
containing any character other than an alphanumeric, dash, or
underscore. Which means this kind of attack is impossible.</p>

<p>But for future identity proofs (domains, for example, which we&rsquo;ve yet
to implement), this kind of attack is real. Our approach here will be
that anything outside of normal ascii will be highlighted and
addressed to the user, as a serious warning.</p>

<h3>Q:</h3>

<p>sweis 118 days ago</p>

<p>Even though there is a disclaimer, I think the &ldquo;encrypt in your
browser&rdquo; feature (<a href="https://keybase.io/encrypt">https://keybase.io/encrypt</a>) undermines Keybase&rsquo;s
security credibility.</p>

<p>This form has essentially the same level of security as
Hushmail. Anybody using it should consider the content exposed to
Keybase or anyone compromising Keybase.</p>

<h3>A:</h3>

<p>maxtaco 118 days ago</p>

<p>I&rsquo;m not an authority on hushmail, but it seems like they do crypto on
the server, and the server is just trusted to throw away the keys and
plaintext?</p>

<p>In the keybase Web client, all crypto happens on the browser. The
server knows no keys or data in plaintext. Of course, you&rsquo;d have to
audit the front-end JS code to believe that claim.</p>

<p>But our intention is that the only way to compromise the Web-based
tools would be to insert malicious JavaScript into the client&rsquo;s
browser. A read-only compromise of the server yields only encrypted
data, and the server never has access to the decryption keys.</p>

<h3>Q:</h3>

<p>JustARandomGuy 118 days ago</p>

<p>Hi Chris, a few comments:</p>

<ol>
<li><p>I like the site design, the story flow on the front page does a
great job of explaining what keybase is.</p></li>
<li><p>I see (from the abovementioned story flow) that keys can be
verified by reviewing signed tweets/gists. Is this functionality
extendable to arbitrary links; i.e. verifying keys against personal
blogs, Tumblr, WordPress or does the third-party site need to
implement a recognized API?</p></li>
</ol>


<p>Again, thanks so much, and it looks like a terrific site so far.</p>

<h3>A:</h3>

<p>malgorithms 118 days ago</p>

<p>Good question! There will be no such thing as a general check, because
&ndash; for any identity &ndash; the client software has to perform a check that
a human would agree means something. For example, what does it mean
that you own a certain blog? How would a person confirm it? Well, at
first glance it might mean that you have the power to post a message
there. But someone else could do that it in a comment, and so that
wouldn&rsquo;t work with Keybase. So any given identity check has to match
some human definition of what it means to have that identity. And it
has to be publicly auditable.</p>

<p>With twitter, it&rsquo;s the ability to post a tweet under a certain
username. With owning a tumblr account, it might be something
similar. With your known StackExchange profile it might mean posting a
statement in a specific part of your profile. And so on.</p>

<p>The common thread in each case is (1) that you post in a place where
only your identity can, and (2) what you post is a signed statement
claiming a connection among three things: (a) your keybase username,
(b) your public key, and (3) the identity on that third party
service. (The third one is necessary so it can&rsquo;t be moved elsewhere.)
Note how twitter and github&rsquo;s are totally different, but achieving
these three things.</p>

<p>We will build out this list of identity checks, hopefully making all
kinds of them easy to do. Everything from proving you own a domain to
having a tumblr or reddit accoun. The definition of those checks will
all be publicly reviewable, both in the spec and in the client, which
is what checks them for you.</p>

<h3>Q:</h3>

<p>ghayes 118 days ago</p>

<p>Well, to follow up, could this be extended to ownership of a domain
(via DNS txt record)? Could we use this as a means of authentication
of a self-signed certificate for a domain?</p>

<h3>A:</h3>

<p>maxtaco 118 days ago</p>

<p>Yes to DNS, though we have to be careful here since DNS can be spoofed
more easily than github or twitter proofs over https. I was thinking a
slightly better way to prove ownership of foo.com would be to post a
proof at <a href="https://foo.com/_keybase">https://foo.com/_keybase</a> (or something similar). To spoof
this, an attacker would have to spoof DNS and also the https
certificate.</p>

<p>Authenticating a self-signed domain certificate via keybase is a neat
idea, but would probably need some browser support, unless there&rsquo;s a
clever hack that I&rsquo;m not thinking of.</p>

<h3>Q:</h3>

<p>sneak 118 days ago</p>

<p>I really, really want crypto, specifically, safe and secure-by-default
crypto, to become much more usable.</p>

<p>Despite this hope, I can&rsquo;t seem to help the fact that the first thing
that popped into my head when I read their webpage is &ldquo;oh, they&rsquo;re
wrapping and abstracting important key authentication and critical key
trust configuration to make it more user-friendly, and implementing it
all in javascript. WHAT COULD POSSIBLY GO WRONG?&rdquo;</p>

<p>Even if I got whacked on the head one day and suddenly loved
javascript, I would not use it for certain projects when I wanted to
be taken seriously by, say, cryptographers.</p>

<p>Then again, look at all the success cryptocat has had!</p>

<h3>A:</h3>

<p>FiloSottile 118 days ago</p>

<p>As long as the trust model is that the server is untrusted, it can be
written in the language they prefer. As for the client, there can be
as many implementations in as many languages as needed to make
everyone happy IMHO (they call it reference client in the home).</p>

<h3>Q:</h3>

<p>sneak 118 days ago</p>

<p>If this talks to keybase&rsquo;s API over https and any large groups come to
rely on this, we&rsquo;ve then effectively replaced the decentralized safety
of the Web of Trust used for authenticating PGP keys with the PKI
that&rsquo;s used in browsers, which is completely and totally fucked.</p>

<p>I cannot support a project that doesn&rsquo;t build and strengthen the
underlying WoT. Getting https involved for authenticating unknown keys
is a huge step backwards. Madness.</p>

<h3>A:</h3>

<p>maxtaco 118 days ago</p>

<p>We&rsquo;re not big fans of browser PKI either, but we&rsquo;re using it as
scaffolding that hopefully one day can be torn down.</p>

<p><code>keybase-installer</code> needs an initial install over https from npm. We
unfortunately saw no way around this.</p>

<p>Assuming that install succeeds with integrity, then all future
upgrades of the installer and client are verified with PGP keys stored
locally on the client.</p>

<p>Once the client is installed, it speaks HTTPS to the server, but we&rsquo;re
not trusting the root CA. Rather, we sign with our own CA that we ship
with the client.</p>

<p>The proofs themselves, on twitter and github, all can be verified in
the clear, as FiloSottile points out, but of course relying upon the
HTTPS certificates of twitter and github to make sure the proofs
weren&rsquo;t corrupted in transit between those services and the client.</p>

<h3>Q:</h3>

<p>bqe 118 days ago</p>

<p>I don&rsquo;t understand how using HTTPS for the API has any bearing
whatsoever on the WoT built via PGP.</p>

<p>You can still verify the keys with your client&rsquo;s cached copies, or
using another PGP client.</p>

<h3>A:</h3>

<p>FiloSottile 118 days ago</p>

<p>Exactly, and moreover. If there is no trust in the server, everything
can even go over unencrypted HTTP. CAs have no business here.</p>

<h3>Q:</h3>

<p>IgorPartola 118 days ago</p>

<p>OK, finally looking at it on a desktop&hellip;</p>

<p>So my first question is this: if I know &ldquo;maria&rdquo; and I want to look her
up to get her GPG key, how does keybase handle that? Does it just do
an email address lookup, as in goes to, say, GitHub, grabs her email
address, maria@example.com, then goes to a public key server and grabs
the key that corresponds to maria@example.com?</p>

<p>If that&rsquo;s the case, there is a security issue: what if Maria never
published a GPG key, but Chloe did using Maria&rsquo;s email address?
Moreover, what if Chloe has access to Maria&rsquo;s inbox and can read these
messages I believe to be only readable by Maria?</p>

<p>Edit: I see from responses below that various online presences of an
identity tied to &ldquo;maria&rdquo; are checked. Is this not then susceptible to
its own attack? For example, if Maria does not have a Twitter account
and I create one, or compromise hers and post a different key, will I
be able to at least introduce doubt into her identity, if not take it
over outright?</p>

<h3>A:</h3>

<p>maxtaco 118 days ago</p>

<p>No, there are no proofs based on e-mail addresses, because such proofs
are not publicly-auditable. We could ask that maria prove to the
server that she controls a given gmail account, but there&rsquo;s no way for
the server to prove that to you.</p>

<p>We want the server to be untrusted, ideally just a dumb message
router.</p>

<p>If Chloe wants to impersonate maria, she&rsquo;ll need to get control of
maria&rsquo;s twitter and github accounts. Just claiming maria&rsquo;s email
address won&rsquo;t get her anywhere. (Note that GPG keyservers are
susceptible to exactly the attack you describe).</p>

<h3>A:</h3>

<p>IgorPartola 118 days ago</p>

<p>Hold on. First, GPG servers are susceptible to the same type of
attack, except they would never be used that way. You never look up a
person by email, the send them an encrypted message using the key you
get. Instead, you verify their key and email address out of band: you
meet them, check their credentials, then sign the key. Keybase is
trying to get rid of the in-person verification, an effort I applaud,
but in favor of a much weaker check: whether a few centralized
accounts had been compromised.</p>

<p>The other part, where you check Maria&rsquo;s Twitter and GitHub accounts,
means that a few things like Twitter, and GitHub are impervious to
Chloe: a tall order and a centralized one at that.</p>

<p>Once again, is the point here for me to get a tuple of (email address,
public GPG key) so I can email Maria securely? If so, then someone
somewhere has to prove that this tuple fetched from the public key
servers is valid.</p>

<p>If the point is to only communicate via keybase.io, then the service
is centralized, and useless once actual sensitive info is exchanged,
the US government takes notice and shuts it down at the DNS level.</p>

<h3>A:</h3>

<p>maxtaco 118 days ago</p>

<p>Cool, I agree no one should use PGP servers the way I described, but
you never know what people are doing out there. To do things the
proper way, as you described, is difficult in practice for lots of
people.</p>

<p>To answer the question, the point isn&rsquo;t to get an (email address,
GPG-key) mapping. It&rsquo;s to get a (public-internet-identity, GPG-key)
mapping. People sometimes do this today in an adhoc manner
(e.g. tweeting your GPG fingerprint). We want it to be checkable by
user-friendly software.</p>

<h3>A:</h3>

<p>IgorPartola 118 days ago</p>

<p>I see. That MO makes a bit more sense then, though is it not then
limited to just Keybase.io and will no longer work if something
happens to this service? Or more importantly, is there a way to make
this distributed?</p>

<h3>A:</h3>

<p>maxtaco 118 days ago</p>

<p>If the site went away tomorrow, you&rsquo;d still have keys in your GPG
keychain. You&rsquo;d also have a local cache of the server-side data
relevant to you.</p>

<p>All public server-side data is available as a dump
(<a href="https://keybase.io/__/api-docs/1.0#call-dump-all">https://keybase.io/__/api-docs/1.0#call-dump-all</a>). Private data like
encrypted public keys and password hashes we of course will keep under
wraps.</p>

<p>We don&rsquo;t have immediate plans to make the system distributed, but if
someone did it, we&rsquo;d find it very cool. It&rsquo;s just too much for us to
do right now.</p>

<h3>Q:</h3>

<p>theboss 118 days ago</p>

<p>Where are the security details published? I think that&rsquo;s what we all
want to see&hellip;</p>

<p>On top of this&hellip;.I think this is cool in theory but bad in practice.</p>

<p>The assumption that Root CA&rsquo;s are trustworthy is already hard enough
to make, how do I know that Maria is actually Maria? How will you
verify that &ldquo;Maria&rdquo; actually owns that twitter, github, gmail. Maybe
it is possible to devise some type of scheme for those sites, but how
about more obscure services?</p>

<p>One mistake in one single account causes the entire thing to fall
apart&hellip;</p>

<h3>A:</h3>

<p>maxtaco 118 days ago</p>

<p>As Chris said, we would like to publish everything, just haven&rsquo;t found
the time yet. We have bits and pieces in wikis in our various github
repositories (almost all of which are open source and public).</p>

<p>The high bits are: all crypto is with GPG/RSA as per RFC4880. There
are of course problems here, but we wanted backwards-compatibility and
well-tested, well-used clients.</p>

<p>We encrypt server-stored GPG private keys (if you choose to use that
option) with TripleSec (see <a href="https://keybase.io/triplesec">https://keybase.io/triplesec</a>).</p>

<p>Users use GPG to sign a series of JSON objects, of the form &ldquo;I&rsquo;m
maxtaco on twitter&rdquo;, or &ldquo;I checked Chris&rsquo;s proofs as of 2014/2/14 and
they look good to me.&rdquo; All JSON objects that a user signs are chained
together with SHA-2 hashes. So a user can sign the whole group of JSON
statements by just signing the most recent one.</p>

<p>Here&rsquo;s an example (click on &ldquo;Show the Proof&rdquo;)
<a href="https://keybase.io/max/sigs/ZnBizHMA8RKSB598TaDtjlPlLKSEu1Wu...">https://keybase.io/max/sigs/ZnBizHMA8RKSB598TaDtjlPlLKSEu1Wu&#8230;</a></p>

<p>There&rsquo;s a fair amount of engineering that went into the software
distribution system. We rely first on npm to get the initial client
out there, but after that, exclusively GPG for code-signing. That&rsquo;s
documented here:</p>

<p><a href="https://github.com/keybase/node-installer/wiki/Update-Archit...">https://github.com/keybase/node-installer/wiki/Update-Archit&#8230;</a></p>

<p>We hope to have better documentation soon, and we value feedback, we
just haven&rsquo;t had the time to put it together yet.</p>

<h3>Q:</h3>

<p>caf 118 days ago</p>

<p>The idea here isn&rsquo;t that you use keybase to find out Maria&rsquo;s twitter,
github or gmail identities - it&rsquo;s the opposite. The idea is that you
already know who Maria is on one or more of those services, so the
fact that the account you know is Maria&rsquo;s at github has posted a
signed message from that public key is supposed to testify to you that
that is really your Maria&rsquo;s public key.</p>

<p>You could of course manually review and verify Maria&rsquo;s github post
that contains her public key - all that keybase is really doing here
is providing an easy way of discovering that github post (or tweet, or
whatever).</p>

<h3>A:</h3>

<p>andrewaylett 117 days ago</p>

<p>s/could/should/?</p>

<h3>A:</h3>

<p>caf 116 days ago</p>

<p>Only if you don&rsquo;t trust your copy of the keybase client (as opposed to
the server, which you should not need to trust).</p>

<h3>Q:</h3>

<p>theboss 118 days ago</p>

<p>When I get someone&rsquo;s GPG key I can call them on the telephone or go to
their house and make sure I got the right one.</p>

<p>I add it and use it. When you use this, I&rsquo;m assuming I get that key
every time from the server. I can get it and verify it once, or twice,
or three times, but what about the 1000th time? What happens when I am
important enough that they return a public key that is not Maria&rsquo;s,
and I am none the wiser.</p>

<h3>A:</h3>

<p>malgorithms 117 days ago</p>

<p>boss, I&rsquo;m glad you answered this question. Because it explains the
impetus for Keybase.</p>

<p>I think what Keybase is addressing in the status quo is twofold: (1)
sadly, almost no one does what you describe; in person meeting key
exchanges and webs of trust may sadly be as unpopular in 20 years as
they are now, and as they were 20 years ago. People who go to them are
often confused, even programmers. I wish it were different.</p>

<p>And (2) more important, in 2014, often the person you&rsquo;re dealing with
is someone whose digital public identity is what matters, not their
face in real life or phone number. If you know me online as
github/malgorithms and twitter/malgorithms, to get my key, meeting
someone in person or talking on the phone to someone who claims to be
me is actually less compelling than a signed statement by malgorithms
in all those places you know me.</p>

<p>And if you do know me in real life, then I can tell you my keybase
username and fingerprint, exactly as you&rsquo;re used to. So it&rsquo;s still as
powerful for meeting in person. With the added benefit you can confirm
my other identities, which you likely know to.</p>

<p>In answer to your scenario about verifying: you only need to review
the &ldquo;maria&rdquo; the server provides once, and then your private key signs
a full summary of maria &ndash; her key and proofs. Cases 2 through 1000 of
performing a crypto action on maria involve you only trusting your own
signature of what &ldquo;maria&rdquo; is. The client can query the server for
changes to her identity, and this will be configurable; if maria adds
a new proof, you might wish to know.</p>

<h3>A:</h3>

<p>jonesetc 117 days ago</p>

<p>This is what I assumed the answer would be, and at this point it just
becomes a difference in opinion. I personally do not believe that the
methods you describe are generally acceptable options in the modern
age. My phone number and address are much more important to me than
the off chance of someone capturing my https traffic, breaking it, and
inserting a fake public key. There is a point where the absolute
security of exchanging public keys written on pieces of paper in a
park are called for, but it&rsquo;s not for everyone or even most.</p>

<h3>Q:</h3>

<p>jonesetc 118 days ago</p>

<p>Is there a way to remove an associated account?</p>

<h3>A:</h3>

<p>maxtaco 118 days ago</p>

<p>Yes, though it might be broken right now. Our plan is to allow this,
for sure.</p>

<h3>Q:</h3>

<p>diasp 117 days ago</p>

<p>Interesting. Another approach is <a href="https://encrypt.to/">https://encrypt.to/</a> which loads the
public key from key servers and encrypts client-side via JS.</p>

<h3>A:</h3>

<p>malgorithms 117 days ago</p>

<p>To clarify the difference, it seems encrypt.to is a service which does
PGP crypto in the browser, based on keys pulled from keyservers. In
contrast, Keybase is an identity-proving service, which proves key X
belongs to person with twitter account Y, github account Z, etc. As a
convenience, it also does encryption and other crypto actions for its
users.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Onward]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/06/07/s-and-e-part-seven:-onward/"/>
    <updated>2014-06-07T22:00:00-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/06/07/s-and-e-part-seven:-onward</id>
    <content type="html"><![CDATA[<p>The path to my graduation has been a long one. For almost a year now
different people have been asking me what I&rsquo;m going to do once I
graduate. For the most part my answer has been that I&rsquo;m focusing on
getting to graduation, and I&rsquo;ll handle the rest as it comes.</p>

<!--more-->


<p>While probably not the most satisfying answer, it seems to suffice.
The truth is, I&rsquo;ve made enough of a plan that I won&rsquo;t have to scramble
for a job once I do graduate. I have an offer from Sage Bionetworks -
the company that I did an internship with - to do some part-time
contract programming for them. The pay rate is low for my industry,
but it is a very livable wage. The plan is that I can relax and
decompress from the madness of my final weeks at Western while working
for Sage. It will be another Vacation. Then, when I&rsquo;m ready, I can
start to apply for a more long term position at a place of my
choosing.</p>

<p>I&rsquo;ve been ruminating on the different possibilities for where I&rsquo;d like
to work. By and large, I have set my sights high, and I have a
short-list of companies that I would like to work for. I was content
with this loose plan; that is, until a few days ago.</p>

<p>On Monday, April 14 I was killing time between classes by browsing the
internet, when I stumbled across something called Hacker School. Now,
the mainstream media may have given you an idea of what the word
hacker means.  Let me define how it is used in programming circles.</p>

<p>A hacker is not someone who breaks into computer systems for fun or
profit. Those people are known as crackers and are regarded among
programmers as the criminals that they usually are. To programmers,
&ldquo;Hacker&rdquo; signifies someone who is very good at coming up with clever
and interesting solutions to any sort of problem. Eric Raymond writes
about the definition of a hacker in his guide, &ldquo;How to Become a
Hacker&rdquo;:</p>

<blockquote><p>&ldquo;There is a community, a shared culture, of expert programmers and
networking wizards that traces its history back through decades to
the first time-sharing minicomputers and the earliest ARPAnet
experiments. The members of this culture originated the term
‘hacker’. Hackers built the Internet. Hackers made the Unix
operating system what it is today. Hackers make the World Wide Web
work.&rdquo;</p></blockquote>

<p>When I saw the name &ldquo;Hacker School,&rdquo; I was immediately intrigued and
needed to investigate. The Hacker School website self-describes the
program as &ldquo;like a writer&rsquo;s retreat for programmers.&rdquo; It is organized
into three &ldquo;batches&rdquo; per year, where each batch is made up of roughly
60 people. A batch consists of all the people coming together to work
in a shared space in New York City for a period of three months. The
primary purpose of Hacker School is to help participants grow
significantly as programmers. This is what they have to say about
their pedagogy:</p>

<blockquote><p>&ldquo;&hellip;Hacker School is largely unstructured, self-directed, and
project-based. That&rsquo;s because we value internal motivation over
external motivation, and self-direction over coercion. We believe
people learn best when they have the freedom to explore their
interests and passions, surrounded by friendly and intellectually
curious peers and mentors.&rdquo;</p></blockquote>

<p>I had two major emotional reactions as I read more of Hacker School&rsquo;s
website: elation, and frustration. Both emotions were highly familiar
to me. These feelings were almost identical to my first experience
with the <em>Teenage Liberation Handbook</em>.</p>

<p>This last year has been a trial for me academically. I have taken the
heaviest loads of my entire college career during these last three
quarters. I have sustained my motivation to do this by remembering how
near I am to completing this dreadful prerequisite to the rest of my
life. When I started to understand what Hacker School was, some
crucial part of this motivation broke.</p>

<p>Through my experiences during the time I took off after my junior year
I managed to convince myself that I needed to finish my Computer
Science degree in order to find work as a programmer. That conviction
is part of what I was looking for when I took that time off. I was
unsure how meaningful my degree would be, and that was preventing me
from being fully committed. The difficulty I had simply getting
responses to my resume, and what I learned talking to professional
programmers, managed to convince me of the utility of finishing my
degree.</p>

<p>Hacker School promises that there is a different path. Once again, I
find myself in the position of asking &ldquo;Why didn&rsquo;t I know about this?&rdquo;
The synchronicity of this is amazing: I dropped all my classes just
weeks after the second Hacker School batch began. If I had known about
it, I might have followed an entirely different path.</p>

<p>What is it about our society that these less travelled paths are so
invisible? In much of our literature and art we venerate those who
take these alternate paths. Daniel Quinn unintentionally proposes a
partial answer in his books <em>Ishmael</em>, <em>My Ishmael</em>, and <em>The Story of
B</em>. The basic idea that he writes about is that the dominant culture
in the world today is essentially formed around a single idea: that
there is one right way to live.</p>

<p>There is a great deal more to his analysis. One of the most important
pieces to me is that our cultural paradigm is such that we can be told
by others how we should live, but it is taboo to try and discover it
for ourselves. Why is that so? Does it have to be that way? Or can we
as a society learn to continually re-evaluate what we are doing and
how we are living?</p>

<p>These questions are a fundamental part of the way I am trying to live
my life. They are my companions. My guides.</p>

<p>There is a set of practices in the programming world today that have
become something of a fad. It is most generally identified by the name
&ldquo;Agile Development.&rdquo; One of the original co-authors of the <em>Manifesto
for Agile Software Development</em> recently wrote a blog post entitled
&ldquo;Agile Is Dead (Long Live Agility).&rdquo; In it he describes the genesis of
the Manifesto and how the word Agile has subsequently been subverted
to the point of losing all meaning. Several times throughout the
article he mentions the four values that brought about the original
Manifesto.</p>

<ul>
<li><em><strong>Individuals and Interactions</strong></em> over <em>Processes and Tools</em></li>
<li><em><strong>Working Software</strong></em> over <em>Comprehensive Documentation</em></li>
<li><em><strong>Customer Collaboration</strong></em> over <em>Contract Negotiation</em>, and</li>
<li><em><strong>Responding to Change</strong></em> over <em>Following a Plan</em></li>
</ul>


<p>Along with these four key values, the manifesto also contained a list
of practices that the founders associated with them. The second value
is the most directly tied to programming. Both the second and third
values are fairly tied to the world of business and programming. But I
think that the first and fourth values may actually be excellent
guides for living in a more universal sense.</p>

<p>The idea of living in a world were we value individuals and
interactions more than we value processes and tools is highly
appealing to me. I think it&rsquo;s telling to look at the people who
develop software and seeing them develop these ideas. Most of what we
do is to develop tools! I don&rsquo;t even know how to explain how important
I think the fourth value is.</p>

<p>Most importantly, with minor creative adaptation, the ideas that
surround these two values are applicable to the way that we inhabit
this planet we call home. I have many vague future plans for my
life. I know that something I feel strongly committed to is trying to
help change our modern culture from being so destructive towards the
planet. This sounds like a big job. But, as my friend Garrett likes to
keep saying &ldquo;You have to focus on the things that you can actually
begin to address.&rdquo; I whole-heartedly agree.</p>

<p>There are three problems that I&rsquo;ve been pondering during the last few
years. First, many people who are in the business of programming have
talked about how difficult it is to hire programmers. Particularly,
how it&rsquo;s really hard to hire good programmers. Second, I turned 18 and
entered the world of work just a year or two before the &ldquo;great
recession&rdquo; hit. One thing that I have noticed is that entry-level jobs
in pretty much every field out there have disappeared. What has
replaced them are internships; often unpaid. Third, during my time
working as a freelance programmer, I noticed that there was a certain
size of problem that is very awkward to try and solve. Large enough to
require experienced developers, but not quite large enough to justify
the resources required to hire the right caliber of professional.</p>

<p>These three problems have led me to the idea of creating a company
intended to address all three of these issues. I call it the Code
Academy. There are three core values that have guided my thoughts
about how the Academy would work.</p>

<p>First, everyone gets paid. In the society we live in today it simply
isn&rsquo;t feasible for most people to do work without being paid. It&rsquo;s
also incredibly unfair. The flip side to this is that everyone should
be paid commensurately to how much they are contributing.</p>

<p>Second, everyone will work on real projects. One of the most
detrimental things about the Computer Science program at Western - and
in universities in general - is that they invariably have students
work on &ldquo;toy projects.&rdquo; By this, I mean a couple of things. First, the
time students have to work on any one project is very limited. Worse,
it&rsquo;s limited in an artificial way, constricted by the bounds of a
single school &ldquo;unit,&rdquo; whether that is a quarter or a semester. Second,
because of the need for the university to rank students with grades,
most code is written by only one student. Collaboration, a key
component of all real-world programming, is actively disallowed under
the purview of academic dishonesty. Finally, somewhat corollary to the
first two, students get to write all of their code from scratch.</p>

<p>This is probably the worst of the &ldquo;toy code&rdquo; effects. In the
professional programming world, far less new code is written. In
general, there&rsquo;s a rule that &ldquo;code is read far more often than it is
written.&rdquo; A large part of any programmer&rsquo;s job is going to be dealing
with pre-existing code. Whether that will be in order to modify it to
do something new, or simply to fix minor imperfections or &ldquo;bugs&rdquo; in
it, most programmers spend a substantial portion of their time
attempting to read and understand code that other people have
written. This is simply not a skill that is taught or even given a
cursory mention in the typical Computer Science curriculum.</p>

<p>The final core value of my Code Academy is that the best way to learn
is to teach. I&rsquo;ve been a mentor for the CS department for nearly four
years now. During that time I have helped other students overcome a
wide range of issues. Many of the problems that they faced were issues
I never encountered in my own work. In addition, having to explain
complex programming topics to people with little background in it has
been a challenging task. I&rsquo;m reminded by a quote attributed to Albert
Einstein: &ldquo;If you can&rsquo;t explain it simply, you don&rsquo;t understand it
well enough.&rdquo; The efforts I have gone through to try and explain deep
and complex topics in Computer Science to novices and laymen alike has
deepened my own understanding of those topics immeasurably.</p>

<p>In the context of the Code Academy, teaching as learning will play an
extraordinarily important role. I see a system where as novices become
journeymen, they immediately become responsible for mentoring new
novices. This will help them solidify their own understanding.</p>

<p>This Code Academy is a long term dream. My conception of it is still
nascent. Also, I don&rsquo;t feel that I&rsquo;m currently qualified, or prepared
to undertake this particular journey. I still have a lot of growing to
do, both as a programmer. This is actually one of the reasons that I
am so looking forward to going to Hacker School. My Code Academy
springs from a desire to address similar problems that the Hacker School
founders are trying to ameliorate. But our approach is in some ways
fundamentally different. I hope to learn a lot from how Hacker School
is structured in addition to what I get out of being there as a student.</p>

<h3>Afterthought</h3>

<p>For the non-programmers in the audience, there is a small amount of
symbolism in the numbering of the sections. Since most programs grow
and change substantially throughout their life time, they are given
version numbers to help both the developers and their users
communicate about which iteration of the software is being used, or
has a problem. These version numbers typically have the form of two or
three integers separated by periods (i.e. &ldquo;1.0&rdquo; or &ldquo;1.0.0&rdquo;).</p>

<p>Each position has a specific meaning. The leftmost number indicates
the &ldquo;major version number.&rdquo; This is usually started at 1, and then
increases monotonically when major changes to the software are made. I
saw a picture on the internet recently that illustrates the level of
change I&rsquo;m talking about quite well. To explain what changes were made
for version 2.0.0 of some piece of software, the author said &ldquo;Rewrote
everything.&rdquo; It is usually expected that users will have to repurchase
the software in some fashion after major version increments.</p>

<p>The middle number is the minor version number. This is reserved for
significant updates to the product. Typically minor version updates
are the addition of minor new features or fixes. The final version
number, which is often omitted in software for &ldquo;end users&rdquo; - as
opposed to software that developers themselves use - is the patch
number. This is used for when very small fixes to minor flaws need to
be released.</p>

<p>The life-cycle of a piece of software starts out usually with either
no version number, or with a version of 0.1.0. The initial zero for
the major version means that this piece of software is still a work in
progress that is evolving too rapidly to justify updating the version
number every time changes are made.</p>

<p><sub>The original formatting of this paper (written in markdown,
compiled to LaTeX with pandoc and then into a pdf with pdflatex, all
orchestrated by a Makefile naturally :) had no major sections so every
section had a leading &ldquo;0.&rdquo;</sub></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Waiting]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/06/03/s-and-e-part-six:-waiting/"/>
    <updated>2014-06-03T22:00:00-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/06/03/s-and-e-part-six:-waiting</id>
    <content type="html"><![CDATA[<p>When I read, I immerse myself in the words. Reading has always been
an escape for me. I would used to sit for hours in my mother&rsquo;s house
reading - no, devouring - books, using them to escape from the world
around me. I loved the fantasy books best, with their worlds of magic
and dragons, knights and villains.</p>

<p>I learned terrible habits about reading too. I wanted so much to be a
fast reader that my brain learned to identify passages that were “just
description.” I’ve never really gotten what people mean when they say
“I saw the book in my mind.” Visualization has never come easily to
me, and I think in part it’s because I never really read the
descriptions.</p>

<!--more-->


<p>But this is a weird contradiction. I wanted to escape into these
books, but I skimmed the details, the little essences? I don’t know.
But I find myself still doing it. I have to consciously slow myself
down in order to not skip them. I notice my eyes jump, and then
recognize that I didn’t actually read that last paragraph.</p>

<p>Part of my Fairhaven graduation requirement was the advanced seminar
class. In that class, we all read the book <em>Wave</em> by Sonali
Deraniyagala. In it, she recounts her experience of being swept up in
the 2004 tsunami in Sri Lanka. She lost her whole family in an
instant. Her husband, two sons; both her parents. She also writes
about the aftermath in her life, of how she eventually is able to move
on and heal. It is a vivid book, and not one that I likely would have
sought out on my own.</p>

<p>Reading <em>Wave</em> was a different experience for me than most books. I
didn’t want to escape into it. If anything, I wanted the opposite, to
help Sonali escape from the life of torment that she relates to us. I
have lost people in my life. My grandfather, more than a decade ago.
A childhood friend who I’d fallen out of touch with who took his own
life. More recently my grandmother; not dead, but lost to us through
Alzheimers. But it feels… not right to try and compare these to
Sonali’s loss. Not just because I wasn’t as close to these people as
she was to her family, though this is true. But because my experience
of those losses was so different, so much more distant.</p>

<p>There is a one point in her story that I can relate to. Towards the
middle, when she says &ldquo;But there are those I see time and again , have
drinks with, share jokes, and even they don’t know.&rdquo; She talks about
feeling like a fraud. That not telling people she is &ldquo;cut loose,
adrift, hazy about [her] identity.&rdquo; This I feel I know something
about.</p>

<p>It started out that I would take just one quarter off. Fall of 2012,
I signed up for classes, and then I simply couldn’t face it. In
retrospect, it was amazingly fortuitous. Almost like I knew, deep
down what was going to happen. Instead of school, I decided to try and
find work as a programmer. To validate for myself whether finishing up
my degree was really necessary. This was hard. I learned many hard
lessons that fall. About managing my time, about the kinds of jobs I
did not want to do. About the kind of clients to avoid. Then, the
week after Thanksgiving, my mother was diagnosed with brain cancer.</p>

<p>It started with her having trouble walking. I noticed while strolling
through the autumnal Arboretum in Seattle near her house. Her right
foot kept dragging. I asked her about it, and she said it felt very
odd. On Monday she&rsquo;d make an appointment with her doctor to see what
was going on. But two days later she couldn&rsquo;t move her leg at all.</p>

<p>Everything after that was a blur. Frantic calls to the doctor,
eventually rushing off to the hospital. So many of her close friends
clustered around, I felt lost in the confusion and chaos. In the
midst of this, I had just started negotiating with a potential new
client. I kept talking to them, worried enough about my finances that
it didn&rsquo;t really sink how serious the situation with my mother really
was.</p>

<p>I imagine what would have happened if I had tried to take classes that
fall. I would have gone home over Thanksgiving, much as I actually
did. Then, when my mother was spending her first couple days in the
hospital, getting a biopsy of her brain, I would have been in the
midst of dead week. Before we really knew what was wrong with her, I
would have been immersed in preparing for finals. While she was trying
to reacclimatize to her own home, I might have been taking finals.</p>

<p>Or else, I would have dropped it all. An entire quarter&rsquo;s worth of
time and effort made meaningless in the space of a phone call. I&rsquo;m
honestly not sure what I would have done, how things would have gone.</p>

<p>The months that followed were also a whirl. The madness of trying to
reorganize her home so that she could live there. Starting
chemotherapy and radiation treatments. I could smell the poison in the
chemo pills. The smell of their residue in her urine permeated the
bathroom. This didn&rsquo;t seem like healing. I saw my mother, the
strongest person that I know, utterly defeated and humiliated.</p>

<p>But all of this was in Seattle. To my friends in Bellingham, I simply
disappeared. I only personally told three or four people. Many more
have heard either from my loving girlfriend or through the proverbial
grapevine. It was agonizing revealing this massive thing to a few
close friends. The thought of telling everyone was overwhelming. I
wanted people to know but not to have to tell them. That made it
awkward. Most people don&rsquo;t just bring something like that up.</p>

<p>At a time when I most needed my friends physical presence and support,
everyone seemed determined to let me have my space. But I couldn&rsquo;t
reach out to them, to tell them that wasn&rsquo;t what I needed. I didn&rsquo;t
know what I needed.</p>

<p>The first time I told someone not close to me was an old roommate of
mine. I ran into her in the grocery store in Bellingham. We chatted
for a moment, this and that. Then she asked what I was up to. I said
living in Seattle, and she asked &ldquo;Why?&rdquo; &ldquo;Because my mother has brain
cancer.&rdquo; I responded. That pretty much ended the conversation. I felt
sad. I hadn&rsquo;t meant to drop that weight on her; as Sonali says, &ldquo;it&rsquo;s
too horrifying, too huge.&rdquo; But I didn&rsquo;t know how to reveal it any
other way.</p>

<p>Gradually I learned how to be more circumspect. &ldquo;My mother is very
ill.&rdquo; My therapist suggested that. She helped me brainstorm. Helped me
navigate between the feelings of deceit for hiding it and not being
able to tell. I also grew more comfortable with the weight of it. I no
longer needed to try and lay it down so abruptly, the way one drops a
heavy stone. I grew stronger, and marveled at my own strength.</p>

<p>So one quarter turned into two, then three. Suddenly a year had
passed. Eventually, our lives calmed and settled enough that I sought
an internship at a local tech company. I stayed there for six months.
I found stability in the day-to-day routine of working nine to five.
Or more accurately, ten to six.</p>

<p>Now, more than two years later, my mother is doing quite well. It’s
strange to be back in Bellingham, and to still have friends who don’t
know what has happened. She is responding to treatment so well, it
seems like the emergency has been put on hold. But in another way, we
are all still waiting for the other shoe to drop. But we have to stop
waiting at some point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Contact]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/05/14/s-and-e-part-five:-first-contact/"/>
    <updated>2014-05-14T22:00:00-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/05/14/s-and-e-part-five:-first-contact</id>
    <content type="html"><![CDATA[<p>At the time, I was infatuated with a particular video game. This game
was called Neverwinter Nights and it was a sword-and-sorcery adventure
game. This was one of the reasons that I loved it so much; it brought
to life all of my favorite childhood stories about dragons and elves
and magic.</p>

<p>This was not the first such game I had played. It was however, the
first game I encountered that gave players the ability to use the
tools of the game to construct their own world and scenarios. The
developers of the game actually included for free all of the tools
that they had used themselves to create the game. I was enthralled by
this toolkit.</p>

<!--more-->


<p>I spent hours simply exploring it. I would browse the apparently
endless menus and dialogs, marveling at the enormity of this program
and captivated by what it promised to allow me to do. I fiddled around
with placing groups of fantastic creatures in small worlds of my own
creation. But I quickly came to realize that the real key to making
living worlds lay in something called NWScript.</p>

<p>My curiosity in exploring the toolkit exposed me to the existence of a
programming language embedded within it. This language allowed you to
do nearly anything in the context of the game. It was through
&ldquo;scripts&rdquo; - short, specific programs written in NWScript - that you
could make pulling a lever cause a door to unlock, or make it so that
a sleeping dragon would awaken with a terrible roar when a character
tripped over a stone while trying to sneak past.</p>

<p>Somehow, I found a set of tutorials for learning NWScript on the
internet. From what I recall they were excellent; very informative,
and engagingly written. I worked through them diligently, and gained a
rudimentary ability to do things with NWScript. But I was at a loss of
what to do with my new-found power. I fiddled around making little toy
things. I expanded on the idea of a switch unlocking a door by
requiring two switches to be thrown. But I had no idea how to go about
constructing a compelling story for other players to interact with,
and without a motivating context my little magic tricks meant nothing.</p>

<p>In retrospect, although I was technically capable of writing simple
scripts, I actually fundamentally missed one of the central points
that the tutorials tried to teach me. One of the most basic tools of a
programmer is the ability to abstract. Dictionary.com provides several
definitions for using &lsquo;abstract&rsquo; as a verb. The one that suits my
usage the best is</p>

<blockquote><p>&ldquo;to consider as a general quality or characteristic apart from
specific objects or instances: to abstract the notions of time,
space, and matter.&rdquo;</p></blockquote>

<p>To really talk about what abstraction in programming means though,
first we need to dive into what programming is a bit. To do that, I&rsquo;d
like to defer to one of the giants of the field, Harold (Hal) Abelson.
Abelson is responsible for an enormous amount of important work in the
world of programming and Computer Science. Among the most well known
of those contributions is his co-development, along with Gerald Jay
Sussman, of MIT&rsquo;s introductory computer science course <em>6.001
Structure and Interpretation of Computer Programs</em>. There is also a
book bearing the same name, which is colluqially referred to as &ldquo;the
wizard book&rdquo; or simply SICP (&ldquo;SICK-pee,&rdquo; pronounced like chickpea).</p>

<p>There are videos available online of the lecture series, delivered by
Abelson and Sussman. The first lecture begins with Abelson greeting
the classroom:</p>

<blockquote><p>I&rsquo;d like to welcome you to this course on &ldquo;Computer Science.&rdquo;
Actually, that&rsquo;s a terrible way to start. That is a terrible name for
this business. First of all it&rsquo;s not a science.  It might be
engineering or it might be art, but we&rsquo;ll actually see that computer
so-called science actually has a lot in common with magic and we&rsquo;ll
see that in this course. So it&rsquo;s not a science.  It&rsquo;s also not really
very much about computers. And it&rsquo;s not about computers in the same
sense that physics is not really about particle accelerators, and
biology is not really about microscopes and petri dishes.</p></blockquote>

<p>This gives a brief sense of what programming is not. But that just
raises the question of what it actually is. What follows is an excerpt
from the preface to the first edition of the SICP book.</p>

<blockquote><p>&ldquo;&hellip; we want to establish the idea that a computer language is not
just a way of getting a computer to perform operations but rather
that it is a novel formal medium for expressing ideas about
methodology.&rdquo;</p></blockquote>

<p>This was an incredibly novel concept when the book was first
published. In many ways, it is still novel to many professional
programmers. It was certainly mind-expanding to me.</p>

<p>There is so much more that I could say about programming. I&rsquo;ve been
immersed in that world for a large portion of the last six years; I
can talk almost endlessly about it. I think what&rsquo;s more interesting
though is to try to communicate why I&rsquo;ve chosen to live in that world
these several years.</p>

<p>Most of the time when people close to me ask &ldquo;Why programming?&rdquo; I say
something about how programming is like puzzles. This is true.
Especially the kind of puzzles where two pieces of metal have been
formed and twisted together and need to be teased apart in just the
right way. But it only goes so far. I like puzzles, but I love magic.</p>

<p>I talked earlier about my love for fantasy novels. Especially the kind
with magic in them. The idea of magic has always intrigued me: the
invocation of mysterious powers through the precise usage of arcane
knowledge. To me the best kind of world to live in is one where magic
abounds.</p>

<p>In many ways, the process of programming is very similar to this
conception of magic. The practitioner (programmer), learns obscure and
bizarre languages. Through long and diligent study they gain the
ability to command formless spirits that are capable of affecting the
real world.</p>

<p>This is what programming means to me. It is an immensely powerful form
of expression. It requires serious commitment, and hard work to bear
fruit. And like any superpower, with great power comes great
responsibility.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gap Year]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/05/10/s-and-e-part-four:-gap-year/"/>
    <updated>2014-05-10T22:00:00-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/05/10/s-and-e-part-four:-gap-year</id>
    <content type="html"><![CDATA[<p>So I followed through and took one year off from school. A &ldquo;Gap Year&rdquo;
as it is somewhat euphemistically referred to. I spent some time
working for a cousin in Portland doing construction. After that I
helped my dad move a boat from Puerto Vallarta to San Diego. When I
returned from that, I was hired by a family friend, David Firth, as a
shop hand for his small business.</p>

<p>That was about six months into my Vacation.  Shortly after I started
working for him, I had to start thinking about whether I was going to
return to school the following fall. It was immediately clear to me
that I was still not ready to go back, so one year turned into two.</p>

<!--more-->


<p>I ended up working for David Firth for most of the balance of my
Vacation. I learned a fantastic amount there. David is an amazing man,
both incredibly intelligent and talented, and incredibly driven.</p>

<p>I learned many things during my time working with him. He directly
trained me in many tasks and skills; through my work I got the chance
to practice and develop others. I learned how to pressure seal and
test a vacuum tank, prepare and wire complex devices, turn metal on a
lathe, use a mill, hand-form sheet metal, arc-weld sheet metal, pour a
polyethylene mold, along with many other skills.</p>

<p>David also taught me to use &ldquo;gentle but appropriate force.&rdquo; When I
first started working for him, I had a tendency to apply all of my
strength to any given task. He taught me to pay attention to what I
was applying force to - whether it was tightening a bolt, or replacing
a light bulb - and to gauge whether or not I was over-stressing the
material. This was an invaluable help to me, at a time when I was
still becoming used to the full strength of my adult body.</p>

<p>David also taught me many things implicitly. Since I was his only
employee, I got to work very closely with him. My job was essentially
to build the machines that he spent his days designing. When I
encountered unexpected difficulties in production, I would ask David
how to resolve them. This occurred often at first as I was still
learning the process of building the machines. Later, the difficulties
were fewer but often more profound.</p>

<p>Sometimes when I encountered a difficulty in some assembly step, it
wasn&rsquo;t indicative of my lack of expertise. Sometimes it was the
process itself that was flawed. As David inspected every issue he
would analyze the problem out loud. He didn&rsquo;t do this for my benefit;
it was his process. But it gave me the chance to watch him at work. As
he was analyzing the issues, he compared them to his intentions in the
design phase; he triaged which problems were design flaws, and which
were caused by imprecision in the work done by outside
contractors. And he talked about the solutions.</p>

<p>It was during one of these reactive design sessions that I decided to
go back to school. I was so inspired by my exposure to his design
process, that I wanted to pursue a discipline that would allow me to
do that kind of work. I have always loved &ldquo;inventing&rdquo; things.  When I
was little, my mother had a box of mechanical, electrical and plumbing
junk that was my &ldquo;invention box.&rdquo; Really the process that I love is
designing things. I used to spend hours drawing pictures of devices
that I wanted to build. I&rsquo;ve continued to do this throughout my life,
up to and including while I was working for David. However, I rarely,
if ever actually ended up building any of my creations. Working with
David, I got a glimpse of what it would take to bring my ideas into
the world. It made me want to be able to do that.</p>

<p>I decided to return to college to pursue an engineering degree. In
retrospect, I&rsquo;m not sure why I decided on engineering. David&rsquo;s degree
was in Industrial Design. Perhaps I felt intimidated by the art
requirements. Regardless, because of my new rationale for college, I
started looking beyond St. John&rsquo;s to different schools with good
engineering programs. During this time, my mother urged me once again
to take a look at Western Washington University.</p>

<h2>Going Back?</h2>

<p>Mostly to humor my mother, I did some browsing around on the internet
about Western. Somehow, I stumbled across the Fairhaven College
website and was intrigued enough to stick around. I ended up finding a
list of colleges that had similar goals as Fairhaven. Seeing both
St. John&rsquo;s College and Colorado College - another college I was very
intrigued by - on the list, I was immediately sold. Once again, when
it came time to apply, I knew that Western, and specifically
Fairhaven, was the only school that I was interested in attending. I
applied only to Fairhaven, and visited the campus for the first time
on the day of my Fairhaven interview.</p>

<p>As I was preparing to go to Western during the last few months that I
worked for David Firth, I started to teach myself programming. That
was actually part of how I knew I was in a better space to go back to
school. I had rediscovered my love of learning, and was pursuing it in
my own free time for my own sake. I have wanted to learn to program
for a long time. It&rsquo;s very difficult at this point to pinpoint when
that desire first manifested itself, because for a long time it didn&rsquo;t
seem feasible. I didn&rsquo;t have much access to computers when I was
younger, and certainly no mentors to help me get started on that
path. So I just sort of admired computers from arm&rsquo;s length. When I
combined this long standing semi-obsession with the sense of
empowerment and increased interest in learning I got from taking time
off, it was inevitable that I would start programming; and I loved it.</p>

<p>I spent most of my first year at Western taking mainly Fairhaven
classes. Along with those, I took the entry level programming class
during winter quarter, and did quite well. During spring quarter, I
took my first engineering class. The difference between the two was
extreme. Despite some initial frustrations with the programming
language used in Computer Science 141, I thoroughly enjoyed the
class. Engineering Technology 110 was a very different story.</p>

<p>From a certain perspective, it might just have been happenstance. I
enjoyed the engineering class, but I had no preparation for it. At the
same time, I got the feeling that a significant number of the other
students already had a greater amount of knowledge and experience. In
the programming class though, I was clearly ahead of the curve. During
the weekly labs it was obvious that there were only a few other people
that knew as much about programming as I did. For this class I was
clearly over-prepared. These seemingly minor differences resulted in
massively different reactions from me. Solely on the basis of those
two classes I decided to pursue a computer science major instead of
engineering.</p>

<p>In another lifetime I can see myself getting more hands on experience
building things when I was little. Instead of spending all of my
energy on the initial design phase, I would have learned more about
how to actually build things. This would have prepared me better for
the engineering class, and I might have had an experience more
comparable to the programming class.  What I don&rsquo;t know is whether
that would have made a difference. As I said earlier, I spent quite a
lot of time building things with David.</p>

<p>In some respects, this story about how and why I became a CS major is
another &ldquo;single story&rdquo; that I tell myself about my life. But this
story isn&rsquo;t really serving a particular purpose; it&rsquo;s mostly because I
forget the other parts. In reality, I didn&rsquo;t first teach myself to
program while I was working for David Firth right before I started at
Western in 2008. It really started six years earlier, when I was 14.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Teenage Liberation Handbook]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/05/06/s-and-e-part-three:-the-teenage-liberation-handbook/"/>
    <updated>2014-05-06T22:00:00-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/05/06/s-and-e-part-three:-the-teenage-liberation-handbook</id>
    <content type="html"><![CDATA[<p>The book that has had the greatest impact on my educational journey is
<em>The Teenage Liberation Handbook: How to Quit School and Get a Real
Life and Education</em> by Grace Llewellyn. An opinionated title to be
sure, and it is an opinionated book. I was first introduced to this
book by one of my most beloved high school teachers, Steve Miranda. He
gave the first chapter to us as a reading in a class entitled
<em>Literature and Philosophy</em>. The section we read is an allegory about
education that illustrates the author&rsquo;s view of what our educational
system does to the minds of the young. It is heartbreaking.</p>

<!--more-->


<p>Reading that story was probably the first time I was moved to tears by
a piece of writing. Just thinking about that time brings back powerful
emotions. That story spoke to me. The author Daniel Quinn defines a
story as a device that we humans use for understanding the world
around us better. This story helped me to make sense of my
relationship with school. It gave me permission to dislike school in a
way I never had felt free to before. It gave me words to articulate my
distaste, and it showed me that other people could and did feel the
same way.</p>

<p>I was touched also because the tale is legitimately a tragic one. It
tells the story of a young child, full of enthusiasm and the joy of
learning. And it shows how after exposure to the dull monotony of the
classroom environment and the &ldquo;processed gruel&rdquo; form of knowledge
found there, her enthusiasm steadily faded. And finally, it shows her
breaking free.</p>

<p>Perhaps the most important reason that this story was so powerful for
me was because it made me grieve for myself. It made me grieve for the
countless hours, mostly wasted, spent in that limiting school
environment.  It made me grieve for the massive amount of energy I
spent resisting the inertia of that system.  It made me grieve for all
of the times that I had forced myself to crush my own resistance. But
most of all it made me grieve for the lost opportunity that this story
represented.</p>

<p>How I wish I had found that book sooner. When I first read that story,
I was 18 and just three months away from graduating from high school.</p>

<p>I read the rest of book voraciously as soon as I could get my hands on
it. Through that, I gained a deeper understanding of the ideas about
school that Llewellyn hinted at in the portion of it that I read for
my class. <em>The Teenage Liberation Handbook</em> describes something called
&ldquo;unschooling.&rdquo; Llewellyn intentionally avoids using the term
&ldquo;home-schooling&rdquo; because of the baggage that it carries, and also
because of the connotations that it is just &ldquo;school, but at home.&rdquo;</p>

<p>Unschooling is emphatically different from both traditional school,
and home-schooling. It emphasizes personal interest, and
self-direction. It defines the role of the parent as facilitator not
teacher. Most importantly, it emphasizes that learning can - and
should - happen anywhere, and anytime; in fact, it should happen
everywhere, and all the time.</p>

<p>The expressiveness of her allegory gave me a hint of what unschooling
offered.  That hint was enough for me to recognize that I had missed
my opportunity. I wanted it so badly.</p>

<p>The emotional response is a huge part of why this book was so
influential for me. But I also loved her vision. The more that I read
of it, the more engaged I became and the more excited and despairing I
felt. I was excited by the possibilities that I saw in what Llewellyn
described. I despaired because it seemed so unattainable for me. And I
struggled as I read that book. I struggled with whether I wanted to
quit school and pursue unschooling. Ultimately, I took the easier path
and simply graduated from high school. But even at that late date, I
was so inspired by her ideas that I wanted to immediately quit school
and pursue an unschooled education for myself.</p>

<p>Since then I have wanted to spread the message. The single thing that
bothers me most about my own history is that I never knew that I had
any choice other than school. Unfortunately, I&rsquo;m not much of an
activist - far too introverted - and I don&rsquo;t personally know very many
teenagers.</p>

<p>So many other pieces of my educational journey since then are deeply
related to my reading of this book. The time that I took off after I
graduated high school is a prominent example. So is the two year break
I took between my junior and senior year at Western. I had been
considering taking time off after high school before I read the
handbook, but Llewellyn&rsquo;s description of what she called &ldquo;the
Vacation&rdquo; made me certain that I wanted that reset.</p>

<p>For a teen pursuing unschooling, the Vacation is the period of time
between when they stop attending traditional school, and when they
start pursuing their learning in earnest. Grace warns that if you try
and make the transition too quickly, too much baggage about learning
is carried along and your attempts at unschooling will be
disappointing at best and disastrous at worst. She devotes an entire
chapter to describing the importance of it, and she presents a very
convincing case.</p>

<p>Reading the <em>Teenage Liberation Handbook</em> made me realize how toxic my
attitude towards school had become. Her words helped me decomplect my
feelings about school from my feelings about learning. It also helped
me to start to recognize the negative cycle I was in regarding hating
school and resisting the forms that it imposed. I realized that if I
was going to go to college, I needed to do it on my own terms, and I
needed to leave behind some of the baggage that I had accumulated
about education.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gumption]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/05/01/s-and-e-part-two:-gumption/"/>
    <updated>2014-05-01T22:00:00-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/05/01/s-and-e-part-two:-gumption</id>
    <content type="html"><![CDATA[<p>My understanding of the concept of personal power - or as I now call
it &ldquo;gumption&rdquo; - comes in large part from Robert Pirsig&rsquo;s <em>Zen and the
Art of Motorcycle Maintenance</em>. In that book, there is a section where
he discusses the &ldquo;gumption traps that [he has] known.&rdquo; There, he
describes many of his thoughts about the idea of gumption. The best
way to understand gumption would be to go read Pirsig&rsquo;s book. Failing
that, let me offer a few select passages.</p>

<!--more-->


<blockquote><p>&ldquo;I like the word &#8220;gumption&rdquo; because it&rsquo;s so homely and so forlorn and
out of style it looks as if it needs a friend and isn&rsquo;t likely to
reject anyone who comes along. It&rsquo;s an old Scottish word, once used
a lot by pioneers, but which, like &ldquo;kin,&rdquo; seems to have dropped out
of use. I like it also because it describes exactly what happens to
someone who connects with Quality. He gets filled with gumption.&#8221;</p></blockquote>

<p>I can&rsquo;t take the time to delve into what Pirsig means by Quality. For
that you really will have to read the book. But I love this passage
because it gets at the heart of Pirsig&rsquo;s - and my own - usage of
gumption without trying to rigorously define it. Another passage. Keep
in mind, I&rsquo;m not trying to explain gumption, so much as give you a
feeling for it.</p>

<blockquote><p>&ldquo;The gumption-filling process occurs when one is quiet long enough
to see and hear and feel the real universe, not just one&rsquo;s own stale
opinions about it. But it&rsquo;s nothing exotic. That&rsquo;s why I like the
word.&rdquo;</p></blockquote>

<p>Gumption is a fascinating subject to me. It encompasses the idea of
motivation, but it also goes farther. When you enter into the idea of
gumption, you also enter a conversation about how to recognize and
sustain it in yourself. It provides a qualitative description for an
emotional/psychic phenomenon. Most importantly, thinking about the
concept of gumption and about gumption traps allowed me to start
thinking of how I can live in a way that avoids them. It also allowed
and encouraged me to start thinking about how I could build
gumption. As Robert Pirsig says: &ldquo;Gumption is the psychic gasoline
that keeps the whole thing going.&rdquo;</p>

<p>Gumption is, at it&rsquo;s best, a mind-hack. I&rsquo;m using hack here in the
sense that it is used by the website Lifehacker, which is in the
tradition of the great computer hacker&rsquo;s described by the programmer
and author Eric Scott Raymond. In essence, this means a clever trick;
an unexpected way of doing things that has greater Quality. By
leveraging the ideas of gumption I can hack my own mind to work in
ways that are more aligned with how I really want to be in the
world. This idea actually goes back to one of my favorite proverb&rsquo;s.</p>

<blockquote><p>&ldquo;If you begin to understand what you are without trying to change
it, then what you are undergoes a transformation.&rdquo; &ndash;Jiddu Krishnamurti</p></blockquote>

<p>I first ran across this quote when I was probably 13. Young, and
highly impressionable, but this piece of wisdom has stuck with me and
shaped my life ever since then. Because of it, when I use the idea of
gumption to try and make myself more productive, I go about it in a
very particular way.</p>

<p>One of the most powerful gumption hacks that I have found is
cleaning. This is related to a conversation I had a long time ago with
one of my mother&rsquo;s friends. I was washing the dishes, and complaining
about it. He asked me &ldquo;Why are you doing the dishes?&rdquo; I was confused,
and told him I was doing the dishes because I had to. He responded,
clarifying:</p>

<p>&ldquo;No, I mean are you doing the dishes so that the dishes will be done?
Or are you doing the dishes to do the dishes?&rdquo;</p>

<p>This started a spirited and engaging conversation that did an
admirable job of distracting me from noticing that I was still washing
dishes. I&rsquo;m not sure that I understood it at the time, but what he was
talking about was essentially mindfulness and presence.</p>

<p>By &ldquo;doing the dishes so that the dishes will be done&rdquo; I was mentally
residing in the future where the dishes were already done. This caused
me to have impatience. This produced a troubled state of mind. To put
it in the language of gumption, seeing washing dishes as a task to be
completed caused them to be a gumption sink.</p>

<p>Today though, I use dish-washing as a way to build gumption. When I&rsquo;m
facing a large homework task, or an overwhelming project I go and I
wash dishes for a time. It&rsquo;s a sort of meditation for me, engaging my
body, inhabiting it in a mindful way. It strengthens my sense of
control over my life, and helps prepare me to start working on things
that are otherwise too hard to approach. As I&rsquo;ve continued this
practice over the years I&rsquo;ve found something interesting: my base
level of gumption has increased. Because of this, the difficulty of
tasks that I can approach unaided has increased dramatically.</p>

<p>A really remarkable example of this was my final quarter at Western. I
had a 17 credit schedule, the most intense load I had ever taken. On
top of that, three of the four classes I was enrolled in had large
projects with long due dates and the fourth had a large amount of
daily work. This combination of assignments has long been one of my
weak points; I don&rsquo;t plan long term well, and I also don&rsquo;t work well
under extreme pressure. The daily work always seems to be of greater
urgency because of the nearer deadlines.  But the large projects
always demand more time than I tend to predict. My desire to do
everything well then leads me to work frantically as soon as I realize
I don&rsquo;t have as much time as I need.  Then at a certain point I simply
can&rsquo;t work at all because the tension is too great. Looking back, it
is clear to me that I simply could not have handled that kind of
workload when I was a freshman in college. It&rsquo;s not clear that I could
have dealt with it even two years previously. However, my final
quarter went much better in many ways than my first quarter.</p>

<p>It took a long time for me to get to that point. Many other things
have contributed to my mindset. Conversations with fascinating people,
many excellent teachers. And of course, so many books.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Single Story]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/04/26/s-and-e-part-one:-the-single-story/"/>
    <updated>2014-04-26T22:00:00-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/04/26/s-and-e-part-one:-the-single-story</id>
    <content type="html"><![CDATA[<h2>Beginnings</h2>

<p>I have a story about myself and education.  That story goes like this.
I hate school.  No, I mean I HATE it.  I always have.  The proof is
that one time when I was in preschool, I noticed that every morning I
put clothes on right before I was taken to school.  So, I reasoned, if
I didn&rsquo;t put clothes on, I couldn&rsquo;t go to school!  This clever plan
backfired unfortunately when my mother in frustration packed me into
the car buck naked and drove me anyways.</p>

<!--more-->


<p>This is my standard story about my relationship with school.  It
exemplifies the deep antipathy that I hold towards it, as well as
revealing a somewhat embarrassing story about myself that is quite
amusing. Most of all it is a story that I enjoy telling, both to
myself and to others.</p>

<p>But really, my relationship with school is much more complicated than
that. I love learning.  Here&rsquo;s another story about my relationship
with school.  In 7th grade I almost failed math. I went to a small
private school, so when my teacher noticed me struggling, instead of
putting me in the low track immediately, she talked to my mom and they
made a deal.  If I could complete a packet of homework over the summer
I could be placed in the &ldquo;intermediate&rdquo; track.</p>

<p>So over the summer, my mother hired a neighborhood college student to
tutor me in math and ultimate frisbee.  Under his kind and encouraging
supervision, I learned lots of little shortcuts and managed to fill in
most of the holes in my math knowledge. I also developed a wicked
Frisbee forehand.  The next year, I aced the intermediate math class.
I loved it.  My math teacher was a kooky old Irish man with eyebrows
that covered half of his forehead.  He took a special interest in me,
and managed to cement my love of math.</p>

<p>Yet a third story.  In my 11th grade pre-calculus course, we studied
proofs.  It was my first introduction to them and I immediately fell
in love.  I did reasonably well in the class, but at the end of the
year my teacher gave out some awards.  I got the award for &ldquo;highest
learning to grade ratio.&rdquo;</p>

<p>In the end, these stories are only snapshots of my experience as a
student. Broader themes have emerged though. Throughout my entire
educational career I have struggled with the disconnect between what
schools claim to be doing - helping students learn - and what I was
actually experiencing.  When the dissonance was mild, I enjoyed school
and invariably excelled.  When it was great, I struggled.  I struggled
to meet both my need to learn, and grow and the schools need to
document and have me prove that learning.</p>

<p>This documenting process - embodied in the assignment of grades, and
the giving of tests - was one of the hardest things for me to deal
with. My single-story casts me in the role of a daring protagonist
pitted against the brutal institution of school.  At least that&rsquo;s how
it plays out in my mind.  But as my other stories show, that&rsquo;s not the
whole truth of how my educational journey has gone.  My dislike for
school has varied in intensity and in expression.  When I was in
elementary and high-school it manifested most through extreme
procrastination on homework.  This had other negative consequences.
My perfectionist nature led to lots of late nights spent furiously
working on projects at the last minute. I&rsquo;m sure this caused my mother
more than a few grey hairs.</p>

<p>In addition, this pattern turned into a self-fulfilling prophecy about
why I hated schools. The things that I hate most about schools are the
bookkeeping and bureaucracy.  Turning in late work, or turning in
half-finished assignments is a good way to experience the worst of
both those aspects.  I think in some ways too, I wanted to blame my
procrastination on the school.  I knew that I could do better than
what I presented in much of my schoolwork and I was angry with myself
for not taking the steps needed to make sure that I did better.  In
the end, it was much easier for me to blame it on the school and keep
repeating the pattern. This cycle dominated my educational experience
from kindergarten all the way through until I graduated high school.</p>

<h2>Vacation</h2>

<p>By the time I was a senior in high-school, I was thoroughly sick of
educational institutions.  I had learned fairly well how to game the
system.  I was able to utilize the Running Start program to complete
my last couple of credits in half the time.  So my senior year I had a
light load the first semester and only one class the second.  As all
my classmates were furiously applying to colleges and visiting
campuses, I calmly decided that I was going to take a year off.</p>

<p>At the time I also felt strongly that there was only one school that I
had any desire to attend, St. John&rsquo;s College.  I applied to St. John&rsquo;s
during my senior year, and against my father&rsquo;s strong wishes to the
contrary, I informed them that I had no intention of actually
enrolling for the following academic year.  I requested that they
still consider my application as though I was applying for the current
year. I was accepted, and immediately exercised my option to defer
admission until 2007.</p>

<p>The adults in my life had many and varied reactions to my decision to
take a year off.  Thankfully, my mother was my staunchest supporter.
I lost a lot of respect for one of my favorite high-school teachers
when he strongly counseled me to &ldquo;just go to college&rdquo; because &ldquo;it will
open doors for you.&rdquo;  All of the advice was well meant I&rsquo;m sure, but I
didn&rsquo;t really hear the words that most people were using.</p>

<p>Instead, whenever I heard someone tell me that I should &ldquo;just get it
out of the way&rdquo; or something similar, what I heard head was &ldquo;you won&rsquo;t
go back.&rdquo;  Some people said this explicitly, or cited examples of
young hoodlums that they knew who had started out with just one year
off, and now, ten years later were still working a dead-end job and
living in their mother&rsquo;s basement.  This last may have struck home
more than I wanted to admit; at the time I <em>did</em> live in my mother&rsquo;s
basement.  This stunning lack of faith incensed me.  I know it wasn&rsquo;t
specific to me.  It seemed to simply be the prevailing wisdom about
college at the time.  But I knew from the inside that if I later
decided that I wanted to go back to school, I could and would do so.</p>

<p>This personal faith in myself is deeply rooted in my family
culture. My mother recently picked up a saying that exemplifies her
faith in my sister and I quite well: &ldquo;You can do hard things.&rdquo; My own
email signature for a long time has been &ldquo;Nothing is ever easy.&rdquo;  This
comes from a book where the expanded phrase is &ldquo;Nothing <em>worth doing</em>
is ever easy.&rdquo;  I think there is something powerful for me in the
union of these two aphorisms.  My phrase is a reminder that things in
life will be difficult; this is a critical reminder for someone with a
tendency towards perfectionism.  My mother&rsquo;s phrase completes this by
heading off the <em>reductio ad absurdum</em> that since everything is so
difficult, you might as well give up now.  In my journey towards
becoming a better student and a better learner, the personal power
that comes from accomplishment has been key.</p>
]]></content>
  </entry>
  
</feed>
