<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Zephyrizing]]></title>
  <link href="http://www.zephyrizing.net/atom.xml" rel="self"/>
  <link href="http://www.zephyrizing.net/"/>
  <updated>2015-09-06T13:40:39-05:00</updated>
  <id>http://www.zephyrizing.net/</id>
  <author>
    <name><![CDATA[Geoff Shannon]]></name>
    <email><![CDATA[geoffpshannon@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Datomic Pro With Boot]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/08/01/using-datomic-pro-with-boot/"/>
    <updated>2015-08-01T20:14:20-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/08/01/using-datomic-pro-with-boot</id>
    <content type="html"><![CDATA[<p>I first heard about <a href="http://www.datomic.com/">Datomic</a> shortly after it was initially
released. I think I almost immediately went and read all of the
documents that <del><a href="http://thinkrelevance.com/">Relevance</a></del> <a href="http://cognitect.com/">Cognitect</a> released about
it&rsquo;s architecture. I was duly impressed, and really interested in
using it. In particular, the potential for
<a href="http://www.datomic.com/benefits.html">time-travelling</a> was really interesting and
exciting to me.</p>

<p>At the time I had been tasked with writing some code to determine
usage metrics for our system. One of my boss&rsquo;s hopes was that we could
generate usage data from some time ago as well to compare with our
current levels. Because we were using traditional relational databases
and hadn&rsquo;t planned for this use case, that turned out to be
impossible. However, if we had been using Datomic, that back-dated
query would have been absolutely trivial.</p>

<!--more-->


<p>When I attempted to actually learn to use Datomic however, I was
overwhelmed by the intensity and relative scarcity of the
documentation. My general inexperience meant that I wasn&rsquo;t prepared to
be an early adopter of this technology.</p>

<blockquote><p>My problem with the vast majority [of Datomic tutorials] is that
they seem to be written for people who don&rsquo;t need a tutorial, and by
and large all have the stench of &ldquo;read the code and you&rsquo;ll
understand,&rdquo; quickly coupled with &ldquo;and if you don&rsquo;t, you&rsquo;re not smart
enough to use this technology anyway.&rdquo;</p></blockquote>

<p>I read this in a <a href="http://ben.vandgrift.com/2014/04/24/a-clojure-datomic-web-app-tutorial.html">tutorial blog about Datomic</a> that I
recently ran across. It neatly sums up how I felt about Datomic at
that time. So nothing much came of my first attempt to learn Datomic.</p>

<p>Recently though, my interest was piqued again by a talk given by one
of my current co-workers. At the same time, I&rsquo;ve been inspired
recently to pick up again a project I started around the time I was
first interested in Datomic, <a href="https://github.com/RadicalZephyr/rotateam">Rotateam</a>. Given my recent
love affair/obsession with Clojure, and in particular the
<a href="https://github.com/boot-clj/boot">Boot</a> project for creating Clojure <a href="http://boot-clj.com/">build tooling</a>, I
obviously wanted to rebuild the project using a
Boot/Clojure/Clojurescript stack. And what better database technology
to use than Datomic!</p>

<p>I chose to tackle the part I was least familiar with first: Datomic. I
followed the links and instructions from the Datomic home page until I
found out about the new (to me at least) free license for
<a href="http://www.datomic.com/get-datomic.html">Datomic Pro Starter Edition</a>. From there I just followed
the getting started instructions and the tutorial.</p>

<p>Since Datomic is very proprietary software, the jar&rsquo;s for it aren&rsquo;t
available from public repositories. Instead, when you register with My
Datomic you get a generated password that gives you access to their
private, password-protected Maven repository. Conveniently, when you
sign up for the Starter Edition you are presented with a page that
tells you how to setup Maven and Leiningen projects to pull from these
repositories. They show you an excellent setup too, that doesn&rsquo;t
require the security-sin of committing secrets to a Git repository.</p>

<p>Unfortunately, since Boot is still a relative newcomer to the Clojure
ecosystem, there are no official Coginitect-supported instructions for
securely using the My Datomic Maven repository with Boot.</p>

<p>Sounds like the perfect opportunity for a blog post :D</p>

<p><a id="top-down"></a></p>

<h2>Top Down</h2>

<p>Let&rsquo;s start from what we want to be able to do. In an ideal world, I
would be able to simply include Datomic Pro as a dependency in my
<code>:dependencies</code> list. In a typical <code>build.boot</code> file that would look
like this:</p>

<figure class='code'><figcaption><span>build.boot</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">set-env!</span>
</span><span class='line'> <span class="ss">:dependencies</span> <span class="o">&#39;</span><span class="p">[[</span><span class="nv">com.datomic/datomic-pro</span> <span class="s">&quot;0.9.5206&quot;</span><span class="p">]])</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we try this out it pretty clearly fails. On my machine Boot spat
out a huge amount of junk that boiled down to &ldquo;Sorry chap, I couldn&rsquo;t
find version <code>0.9.5206</code> of <code>com.datomic/datomic-pro</code> for you.&rdquo; Of
course, this is because we haven&rsquo;t told boot how to look in the Maven
repository where it exists: <code>https://my.datomic.com/repo</code>.</p>

<p>Let&rsquo;s try the simplest thing that could possibly work. If we look at
the Boot
<a href="https://github.com/boot-clj/boot/wiki/Boot-Environment#env-keys">documentation on the keys in the Boot environment</a>, we can
see that there is a handy <code>:repositories</code> key that we should probably
be setting with the details of our My Datomic credentials. If we check
out the <a href="https://github.com/cemerick/pomegranate/blob/pomegranate-0.3.0/src/main/clojure/cemerick/pomegranate/aether.clj#L639-L650">documentation in Pomegranate</a> for what the values of
the <code>:repositories</code> vector should look like, we can see that to
include authentication credentials, we need to specify it as a
map. Concretely our <code>build.boot</code> should look more like this:</p>

<p><a id="first-working"></a></p>

<figure class='code'><figcaption><span>build.boot</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">set-env!</span>
</span><span class='line'> <span class="ss">:dependencies</span> <span class="o">&#39;</span><span class="p">[[</span><span class="nv">com.datomic/datomic-pro</span> <span class="s">&quot;0.9.5206&quot;</span><span class="p">]]</span>
</span><span class='line'> <span class="ss">:repositories</span> <span class="o">#</span><span class="p">(</span><span class="nb">conj </span><span class="nv">%</span>
</span><span class='line'>                      <span class="p">[</span><span class="s">&quot;my-datomic&quot;</span> <span class="p">{</span><span class="ss">:url</span> <span class="s">&quot;https://my.datomic.com/repo&quot;</span>
</span><span class='line'>                                     <span class="ss">:username</span> <span class="s">&quot;notmyemail@example.com&quot;</span>
</span><span class='line'>                                     <span class="ss">:password</span> <span class="s">&quot;obviously-not-my-password&quot;</span><span class="p">}]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reason for the funny syntax of specifying a lambda function as the
repositories value is because we want to update the value
<code>:repositories</code> by adding (<code>conj</code>ing) the <code>my-datomic</code> repository. We
can&rsquo;t just blindly override the repositories, because by default Boot
adds entries for pulling from <a href="http://search.maven.org/">Maven Central</a> and
<a href="https://clojars.org/">Clojars</a> which we probably don&rsquo;t want to blow away.</p>

<p><a id="side-note"></a></p>

<h3>Side Note</h3>

<p>Rather than bothering to go and read the Pomegranate documentation, we
also could have inspect Boot&rsquo;s default environment. Boot ships with a
handy task called <code>show</code> which is useful for this sort of inspection.
For Leiningen users, it&rsquo;s sort of equivalent to <code>lein pprint</code>. In this
case, since we&rsquo;re interested in what&rsquo;s in the environment we want to
run <code>boot show -e</code> or <code>boot show --env</code>.  And of course, as with all
Boot tasks we could find out this information by running <code>boot show
-h</code>. Okay, <code>&lt;/side note&gt;</code>.</p>

<p><a id="back-to-it"></a></p>

<h2>Back to It</h2>

<p>Obviously you&rsquo;d need to put your real My Datomic credentials in
there. Just as obviously, this can&rsquo;t be the final form our solution
takes. The <code>build.boot</code> file pretty much <em>needs</em> to be under source
control, and those secrets need to <strong><em>not</em></strong> be present in source
control.</p>

<p>So <a href="#first-working">that</a> works. But to develop a more elegant and
secure solution, we&rsquo;re probably going to need a better understanding
of just how Boot goes about loading dependencies. Now, we could go and
read the source. Or we could treat Boot as a black box and play with
it until we have a better understanding of how it works. I vote the
latter.</p>

<p>Let&rsquo;s start with the simplest thing that probably <strong>won&rsquo;t</strong> work. What if
we move the <code>:repositories</code> update into a separate <code>set-env!</code> like this:</p>

<figure class='code'><figcaption><span>build.boot</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">set-env!</span>
</span><span class='line'> <span class="ss">:dependencies</span> <span class="o">&#39;</span><span class="p">[[</span><span class="nv">com.datomic/datomic-pro</span> <span class="s">&quot;0.9.5206&quot;</span><span class="p">]])</span>
</span><span class='line'><span class="p">(</span><span class="nf">set-env!</span>
</span><span class='line'> <span class="ss">:repositories</span> <span class="o">#</span><span class="p">(</span><span class="nb">conj </span><span class="nv">%</span>
</span><span class='line'>                      <span class="p">[</span><span class="s">&quot;my-datomic&quot;</span> <span class="p">{</span><span class="ss">:url</span> <span class="s">&quot;https://my.datomic.com/repo&quot;</span>
</span><span class='line'>                                     <span class="ss">:username</span> <span class="s">&quot;notmyemail@example.com&quot;</span>
</span><span class='line'>                                     <span class="ss">:password</span> <span class="s">&quot;obviously-not-my-password&quot;</span><span class="p">}]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This again fails spectacularly for the same reason of not being able
to resolve the Datomic dependency. But this test has told us something
important. It tells us that the dependency resolution happened <em>during
the first call to <code>set-env!</code></em>. This is important, because it implies
that if we get the <code>my-datomic</code> repository configuration into the boot
environment before that call, then everything should work just
fine. Let&rsquo;s try it out:</p>

<figure class='code'><figcaption><span>build.boot</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">set-env!</span>
</span><span class='line'> <span class="ss">:repositories</span> <span class="o">#</span><span class="p">(</span><span class="nb">conj </span><span class="nv">%</span>
</span><span class='line'>                      <span class="p">[</span><span class="s">&quot;my-datomic&quot;</span> <span class="p">{</span><span class="ss">:url</span> <span class="s">&quot;https://my.datomic.com/repo&quot;</span>
</span><span class='line'>                                     <span class="ss">:username</span> <span class="s">&quot;notmyemail@example.com&quot;</span>
</span><span class='line'>                                     <span class="ss">:password</span> <span class="s">&quot;obviously-not-my-password&quot;</span><span class="p">}]))</span>
</span><span class='line'><span class="p">(</span><span class="nf">set-env!</span>
</span><span class='line'> <span class="ss">:dependencies</span> <span class="o">&#39;</span><span class="p">[[</span><span class="nv">com.datomic/datomic-pro</span> <span class="s">&quot;0.9.5206&quot;</span><span class="p">]])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hey, presto! It works. Let&rsquo;s think about why this works for a moment
and what the implications are. Obviously, at some point during the
`set-env! function, some code gets called that notices that a new
dependency was added, and attempts to resolve it. As long as the
repository required to resolve that dependency is present in the list
of repositories at that moment, then everything works fine. This is an
excellent example of what the Boot authors are talking about when they
say that Boot builds are programs.</p>

<p>If you&rsquo;re like me then long familiarity with declarative build systems
has lulled you into thinking of build description files as
fundamentally not code. Even though a Leiningen project map is
entirely made of Clojure data structures, my experiences have taught
me that it isn&rsquo;t really code. But a Boot build file is. It&rsquo;s executing
Clojure code on an epicly simple level.</p>

<p>When I was first discovering how this worked for myself, I was working
on an actual project, and the <code>build.boot</code> was significantly more
complex. As such, I broke out the Datomic specific portions into the
snippets that I&rsquo;ve included in this blog post. But because of my
build&rsquo;s-as-specification indoctrination, I had fallen into a rhythm of
always having my <code>build.boot</code> files have a certain structure to them.</p>

<figure class='code'><figcaption><span>My proto-typical build.boot</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;; Start with source paths and dependencies</span>
</span><span class='line'><span class="p">(</span><span class="nf">set-env!</span>
</span><span class='line'> <span class="ss">:source-paths</span> <span class="o">#</span><span class="p">{</span><span class="s">&quot;src&quot;</span> <span class="s">&quot;test&quot;</span><span class="p">}</span>
</span><span class='line'> <span class="ss">:dependencies</span> <span class="o">&#39;</span><span class="p">[[</span><span class="nv">org.clojure/clojure</span>      <span class="s">&quot;1.6.0&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">midje</span>                    <span class="s">&quot;1.7.0&quot;</span>          <span class="ss">:scope</span> <span class="s">&quot;test&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">zilti/boot-midje</span>         <span class="s">&quot;0.2.1-SNAPSHOT&quot;</span> <span class="ss">:scope</span> <span class="s">&quot;test&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">radicalzephyr/bootlaces</span>  <span class="s">&quot;0.1.15-SNAPSHOT&quot;</span><span class="p">]])</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;; Require bootlaces and other boot tasks</span>
</span><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">radicalzephyr.bootlaces</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span><span class='line'>         <span class="o">&#39;</span><span class="p">[</span><span class="nv">zilti.boot-midje</span>        <span class="ss">:refer</span> <span class="p">[</span><span class="nv">midje</span><span class="p">]])</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;; Define the project version</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">+version+</span> <span class="s">&quot;0.1.1-SNAPSHOT&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;; And use the bootlaces configuration</span>
</span><span class='line'><span class="p">(</span><span class="nf">bootlaces!</span> <span class="nv">+version+</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;; Finally, configure any default task-options</span>
</span><span class='line'><span class="p">(</span><span class="nf">task-options!</span>
</span><span class='line'> <span class="nv">pom</span>  <span class="p">{</span><span class="ss">:project</span>     <span class="ss">&#39;radicalzephyr/rotateam</span>
</span><span class='line'>       <span class="ss">:version</span>     <span class="nv">+version+</span>
</span><span class='line'>       <span class="ss">:description</span> <span class="s">&quot;A web-app for scheduling team role rotations.&quot;</span>
</span><span class='line'>       <span class="ss">:url</span>         <span class="s">&quot;https://github.com/radicalzephyr/clj-rotateam&quot;</span>
</span><span class='line'>       <span class="ss">:scm</span>         <span class="p">{</span><span class="ss">:url</span> <span class="s">&quot;https://github.com/radicalzephyr/clj-rotateam&quot;</span><span class="p">}</span>
</span><span class='line'>       <span class="ss">:license</span>     <span class="p">{</span><span class="s">&quot;Eclipse Public License&quot;</span>
</span><span class='line'>                     <span class="s">&quot;http://www.eclipse.org/legal/epl-v10.html&quot;</span><span class="p">}})</span>
</span></code></pre></td></tr></table></div></figure>


<p>This structure is <em>very</em> reminiscent of a <code>project.clj</code> file. It&rsquo;s
format is slightly different, but there&rsquo;s really nothing that takes
advantage of the fact that this is actually a regular Clojure
program. This is true for a reason though, and again it&rsquo;s mentioned in
Boot&rsquo;s rationale. Simple projects don&rsquo;t need the flexibility of having
their build be a real program. But here&rsquo;s the thing, simple projects
tend to become complex projects over time.</p>

<p><a id="back-to-datomic"></a></p>

<h2>Back to Datomic</h2>

<p>Okay, enough philosophizing. What does this build as program mean for
storing and accessing our My Datomic credentials securely? Well for
starters, it means we can do something really simple like following
the Heroku paradigm of putting secrets into environment
variables. Pulling them out is easy with a little bit of Java-interop.</p>

<figure class='code'><figcaption><span>build.boot</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">set-env!</span>
</span><span class='line'> <span class="ss">:dependencies</span> <span class="o">&#39;</span><span class="p">[[</span><span class="nv">com.datomic/datomic-pro</span> <span class="s">&quot;0.9.5206&quot;</span><span class="p">]]</span>
</span><span class='line'> <span class="ss">:repositories</span> <span class="o">#</span><span class="p">(</span><span class="nb">conj </span><span class="nv">%</span>
</span><span class='line'>                      <span class="p">[</span><span class="s">&quot;my-datomic&quot;</span> <span class="p">{</span><span class="ss">:url</span> <span class="s">&quot;https://my.datomic.com/repo&quot;</span>
</span><span class='line'>                                     <span class="ss">:username</span> <span class="p">(</span><span class="nf">System/getenv</span> <span class="s">&quot;DATOMIC_USERNAME&quot;</span><span class="p">)</span>
</span><span class='line'>                                     <span class="ss">:password</span> <span class="p">(</span><span class="nf">System/getenv</span> <span class="s">&quot;DATOMIC_PASSWORD&quot;</span><span class="p">)}]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This again works perfectly. But why stop there? This solution only
works when you have your Datomic username and password set as
environment variables. Instead, we could fallback to prompting the
user for the credentials. Borrowing and adapting some code from
<a href="https://github.com/adzerk-oss/bootlaces">Adzerk&rsquo;s bootlaces</a>, we can provide a reasonable
fallback experience.</p>

<figure class='code'><figcaption><span>build.boot</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[[</span><span class="nv">user</span> <span class="nv">pass</span><span class="p">]</span> <span class="p">(</span><span class="nf">mapv</span> <span class="o">#</span><span class="p">(</span><span class="nf">System/getenv</span> <span class="nv">%</span><span class="p">)</span> <span class="p">[</span><span class="s">&quot;DATOMIC_USERNAME&quot;</span> <span class="s">&quot;DATOMIC_PASS&quot;</span><span class="p">])</span>
</span><span class='line'>      <span class="nv">datomic-creds</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">{})]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">and </span><span class="nv">user</span> <span class="nv">pass</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">swap!</span> <span class="nv">datomic-creds</span> <span class="nb">assoc </span><span class="ss">:username</span> <span class="nv">user</span> <span class="ss">:password</span> <span class="nv">pass</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">do </span><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;DATOMIC_USERNAME and DATOMIC_PASS were not set;&quot;</span>
</span><span class='line'>                      <span class="s">&quot; please enter your Datomic credentials.&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">print </span><span class="s">&quot;Username: &quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="o">#</span><span class="p">(</span><span class="nf">swap!</span> <span class="nv">datomic-creds</span> <span class="nb">assoc </span><span class="ss">:username</span> <span class="nv">%</span><span class="p">)</span> <span class="p">(</span><span class="nf">read-line</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">print </span><span class="s">&quot;Password: &quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="o">#</span><span class="p">(</span><span class="nf">swap!</span> <span class="nv">datomic-creds</span> <span class="nb">assoc </span><span class="ss">:password</span> <span class="nv">%</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">apply str </span><span class="p">(</span><span class="nf">.readPassword</span> <span class="p">(</span><span class="nf">System/console</span><span class="p">))))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">set-env!</span> <span class="ss">:repositories</span>
</span><span class='line'>            <span class="o">#</span><span class="p">(</span><span class="nb">conj </span><span class="nv">%</span> <span class="p">[</span><span class="s">&quot;my-datomic&quot;</span> <span class="p">(</span><span class="nb">merge </span><span class="o">@</span><span class="nv">datomic-creds</span>
</span><span class='line'>                                          <span class="p">{</span><span class="ss">:url</span> <span class="s">&quot;https://my.datomic.com/repo&quot;</span><span class="p">})])))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code may look a bit intimidating, but it&rsquo;s mostly managing the
details of user friendly input and output. But again, why stop here?
This is <em>just Clojure code</em> here, so all of Clojure&rsquo;s ability to
define and use abstractions is right there.</p>

<figure class='code'><figcaption><span>build.boot</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">get-cleartext</span> <span class="p">[</span><span class="nv">prompt</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">print </span><span class="nv">prompt</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">read-line</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">get-password</span> <span class="p">[</span><span class="nv">prompt</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">print </span><span class="nv">prompt</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">apply str </span><span class="p">(</span><span class="nf">.readPassword</span> <span class="p">(</span><span class="nf">System/console</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">user</span> <span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nf">System/getenv</span> <span class="s">&quot;DATOMIC_USERNAME&quot;</span><span class="p">)</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">get-cleartext</span> <span class="s">&quot;DATOMIC_USERNAME was not defined.\nUsername: &quot;</span><span class="p">))</span>
</span><span class='line'>      <span class="nv">pass</span> <span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nf">System/getenv</span> <span class="s">&quot;DATOMIC_PASSORD&quot;</span><span class="p">)</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">get-password</span>  <span class="s">&quot;DATOMIC_PASSWORD was not defined.\nPassword: &quot;</span><span class="p">))]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">set-env!</span> <span class="ss">:repositories</span>
</span><span class='line'>            <span class="o">#</span><span class="p">(</span><span class="nb">conj </span><span class="nv">%</span> <span class="p">[</span><span class="s">&quot;my-datomic&quot;</span> <span class="p">{</span><span class="ss">:url</span> <span class="s">&quot;https://my.datomic.com/repo&quot;</span>
</span><span class='line'>                                    <span class="ss">:username</span> <span class="nv">user</span>
</span><span class='line'>                                    <span class="ss">:password</span> <span class="nv">pass</span><span class="p">}])))</span>
</span><span class='line'><span class="p">(</span><span class="nf">set-env!</span>
</span><span class='line'> <span class="ss">:dependencies</span> <span class="o">&#39;</span><span class="p">[[</span><span class="nv">com.datomic/datomic-pro</span> <span class="s">&quot;0.9.5206&quot;</span><span class="p">]])</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s still some obvious duplication in there. Let&rsquo;s see if we can
get rid of that too.</p>

<figure class='code'><figcaption><span>build.boot</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">get-cleartext</span> <span class="p">[</span><span class="nv">prompt</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">print </span><span class="nv">prompt</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">read-line</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">get-password</span> <span class="p">[</span><span class="nv">prompt</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">print </span><span class="nv">prompt</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">apply str </span><span class="p">(</span><span class="nf">.readPassword</span> <span class="p">(</span><span class="nf">System/console</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">clojure.string</span> <span class="ss">:as</span> <span class="nv">str</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">get-env-or-prompt</span> <span class="p">[</span><span class="nv">prefix</span> <span class="nv">prompt-fmt</span> <span class="nv">word</span> <span class="nv">get-fn</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">env-name</span> <span class="p">(</span><span class="nb">str </span><span class="nv">prefix</span> <span class="nv">word</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nf">System/getenv</span> <span class="nv">env-name</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">get-fn</span> <span class="p">(</span><span class="nf">format</span> <span class="nv">prompt-fmt</span> <span class="nv">env-name</span> <span class="p">(</span><span class="nf">str/capitalize</span> <span class="nv">word</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[[</span><span class="nv">user</span> <span class="nv">pass</span><span class="p">]</span> <span class="p">(</span><span class="nf">mapv</span> <span class="o">#</span><span class="p">(</span><span class="nf">get-env-or-prompt</span> <span class="s">&quot;DATOMIC_&quot;</span>
</span><span class='line'>                                            <span class="s">&quot;%s was not defined.\n%s&quot;</span>
</span><span class='line'>                                            <span class="nv">%1</span> <span class="nv">%2</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">[</span><span class="s">&quot;USERNAME&quot;</span>    <span class="s">&quot;PASSWORD&quot;</span><span class="p">]</span>
</span><span class='line'>                        <span class="p">[</span><span class="nv">get-cleartext</span> <span class="nv">get-password</span><span class="p">])]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">set-env!</span> <span class="ss">:repositories</span>
</span><span class='line'>            <span class="o">#</span><span class="p">(</span><span class="nb">conj </span><span class="nv">%</span> <span class="p">[</span><span class="s">&quot;my-datomic&quot;</span> <span class="p">{</span><span class="ss">:url</span> <span class="s">&quot;https://my.datomic.com/repo&quot;</span>
</span><span class='line'>                                    <span class="ss">:username</span> <span class="nv">user</span>
</span><span class='line'>                                    <span class="ss">:password</span> <span class="nv">pass</span><span class="p">}])))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">set-env!</span>
</span><span class='line'> <span class="ss">:dependencies</span> <span class="o">&#39;</span><span class="p">[[</span><span class="nv">com.datomic/datomic-pro</span> <span class="s">&quot;0.9.5206&quot;</span><span class="p">]])</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code is longer now, but it&rsquo;s been decomposed and de-duplicated
significantly. It also gained the ability to prompt for values only if
the corresponding environment variable isn&rsquo;t set. We could keep going
with this, and define that <code>let</code> block as a function. We could move
all this code into a Clojure source file in the <code>src</code> folder of the
current project, and then <code>require</code> it in. Or we could put it into a
separate library like <a href="https://github.com/radicalzephyr/rotateam">my bootlaces</a> and add that as a
dependency. Once we extract this functionality into a libryr we could
add tests for it, and then continue to expand it&rsquo;s functionality. We
could add another method for retrieving the credentials. Perhaps
storing them in an encrypted edn file, which we read in if it exists.</p>

<p>All of these various permutations are possible, and more. And we
always have the full power of Clojure at our disposal. Notice what we
didn&rsquo;t have to do at any point along this process. We didn&rsquo;t have to
write a plugin for our build tool, or try to get a patch merged into
the source code and wait for it&rsquo;s release. It&rsquo;s all just been regular
Clojure code, following a very natural and easy code growth
path. Start out with an inline-definition and usage, then slowly
abstract and tease apart into a separate package.</p>

<p>This is the philosophy of Lisp writ large in the paradigm of building
programs. There is no difference between what is built into Boot, and
what we define personally. There is nothing done in the Boot built-in
tasks that could not have been done by a Boot user. Based on a few
carefully chosen &ldquo;primitives&rdquo; an elegant and powerful structure can be
built. This is what happens when your code is just data, or your build
is just a program.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Importance of Focusing Small With TDD]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/07/23/the-importance-of-focusing-small-with-tdd/"/>
    <updated>2015-07-23T09:12:30-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/07/23/the-importance-of-focusing-small-with-tdd</id>
    <content type="html"><![CDATA[<p>Since I&rsquo;ve been an apprentice at 8th Light, I&rsquo;ve been focusing on
really trying to <em>get</em> TDD as a practice and a discipline. As part of
that I&rsquo;ve done a lot of reading and reflecting on past reading&rsquo;s about
TDD. One thing that jumped out at me about the way that Martin Fowler,
Kent Beck and Bob Martin all talk about TDD: the all tend to say
minorly self-deprecating things like: &ldquo;I&rsquo;m just not smart enough to
hold all that complexity in my head.  TDD helps me get away with not
seeing the big picture.&rdquo; But I think this statement is fundamentally
misleading.</p>

<!--more-->


<p>I was always a little confused when I read statements like that,
because to me the clarity of their writing and thoughts indicate to me
that they are in fact pretty smart. Another way they say it is that
&ldquo;you don&rsquo;t have to be super smart to do TDD.&rdquo; This is I think a more
genuine statement, but it&rsquo;s much more about marketing than about TDD.</p>

<p>When I was writing Tic-Tac-Toe in Ruby during the first month of my
apprenticeship though, I was trying to rigorously test-drive all of
the development in a very intentional way for the first time in my
coding career. As I got into the swing of things, I started noticing
that I was focusing on smaller portions of the code.</p>

<p>Normally when I&rsquo;m programming, I have something close to
<a href="http://heeris.id.au/2013/this-is-why-you-shouldnt-interrupt-a-programmer/">this experience</a>. I try and build up an understanding
and mental structure of as much of the program as I can hold in my
head at once. I do this largely because if I have the structure of the
whole program in my head then I know that when I make changes, they&rsquo;re
going to be good ones, and remain consistent with the rest of the
program.</p>

<p>One of the side-benefits of TDD is that you end up with a
comprehensive test suite for your program as you build it. So instead
of having to build a huge mental model of the software as you are
programming, you can simply make a change and then run the test
suite. This will tell you, with far greater accuracy, whether the
change is consistent with the state of the actual program. There&rsquo;s no
layer of indirection through a potentially inconsistent mental model.</p>

<p>So, having tests allows you not to have a large mental model of the
program you&rsquo;re building. Another (desirable!) consequence of rigorous
test-driving is a well-factored design. If the objects in your system
have small, well-defined responsibilities and interact with other
objects in reasonable and well-defined ways the system is simpler.
When the system is simpler, you can get away with having only a local
view of the code when making changes.</p>

<p>But here&rsquo;s the thing, these are reasons why you can still program
without a comprehensive understanding of the codebase when practicing
TDD. But the revelation that I had, what caused me to say that Uncle
Bob and company are being misleading, is that I think TDD is actually
easier to do when you let go of trying to build a comprehensive mental
model of the code. This is more true the &ldquo;smarter&rdquo; you are.</p>

<p>I had a friend in college who was arguably a genius. Assignments that
the rest of our class would take a week to do, he would churn out in a
12-hour Mountain Dew-fueled frenzy of coding. He would intentionally
seek to make assignments more challenging - for example doing a simple
assembly language project, he developed an Object Oriented style of
assembly programming.</p>

<p>I ended up working with him on a number of projects though, and I
discovered something. If I had thought that I had a tendency to
overengineer solutions, my tendency was nothing compared to this
friend.</p>

<p>One summer we decided to create an AI to play the video game StarCraft
and enter it in a contest at the end of the summer.  When we were
planning the architecture of the AI , he immediately started
describing this incredibly elaborate structure, with pluggable modules
that would allow swapping out of different components of the AI, and a
tiered architecture of decision making that would separate the low
level movements of units from the tactical and strategic
decision-making required to win the game.</p>

<p>This structure was impressive and compelling in a certain way, and we
spent weeks talking about it and sketching diagrams and class
hierarchies on the whiteboard. But after a month or so, interest in
the project sort of fizzled out and most people drifted away. Nothing
was ever built of that grand architecture.</p>

<p>From what I&rsquo;ve seen, most of the best programmers that I know have
this tendency to over-engineer solutions. From what I&rsquo;ve read, this is
not an isolated phenomenon in my social circle.</p>

<p>This type of pure thought design work is actually very similar to
building a mental model of how a piece of software works. It&rsquo;s really
just a change in tense: over-engineering is just building a mental
model of how a piece of software <em>will</em> work, in the future. There is
probably some fascinating psychology of why this is such a common
tendency, and an easy trap to fall into. My contention is that the
smaller your mental model of a piece of software is, the more
restricted your focus, the easier it is to refrain from attempting to
over-engineer it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD and the Art of Picking Tests]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/07/19/tdd-and-the-art-of-picking-tests/"/>
    <updated>2015-07-19T21:57:19-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/07/19/tdd-and-the-art-of-picking-tests</id>
    <content type="html"><![CDATA[<blockquote><p>The first [problem] is stuckness, a mental stuckness that
accompanies the physical stuckness of whatever it is you&rsquo;re working
on. A screw sticks, for example, on a side cover assembly. You check
the manual to see if there might be any special cause for this screw
to come off so hard, but all it says is &ldquo;Remove side cover plate&rdquo; in
that wonderful terse technical style that never tells you what you
want to know. There&rsquo;s no earlier procedure left undone that might
cause the cover screws to stick.</p>

<p>If you&rsquo;re experienced you&rsquo;d probably apply a penetrating liquid and
an impact driver at this point. But suppose you&rsquo;re inexperienced and
you attach a self-locking plier wrench to the shank of your
screwdriver and really twist it hard, a procedure you&rsquo;ve had success
with in the past, but which this time succeeds only in tearing the
slot of the screw.</p>

<p>Your mind was already thinking ahead to what you would do when the
cover plate was off, and so it takes a little time to realize that
this irritating minor annoyance of a torn screw slot isn&rsquo;t just
irritating and minor. You&rsquo;re stuck. Stopped. Terminated. It&rsquo;s
absolutely stopped you from fixing the motorcycle.</p>

<p>-Robert Pirsig, <em>Zen and the Art of Motorcycle Maintenance</em></p></blockquote>

<p>There is so much interesting material here it could take a while to
dig into all of it.</p>

<!--more-->


<h2>Mental Stuckness</h2>

<p>Despite it&rsquo;s total lack of physical tangibility software can get stuck
too, and as software developers when our software gets stuck, so do
we. The canonical example of stuck software is when we need to add a
new feature to our application, but it can&rsquo;t be done without breaking
everything else. Usually we arrive in this situation because we don&rsquo;t
have tests, and so we can&rsquo;t refactor our code. We can only make
changes and then hope that everything still works.</p>

<p>There is another kind of stuckness though that is less specific to
software. The stuckness of a blank page. This is what Pirsig is
talking about in the above quote. Even when you&rsquo;re rigorously
practicing TDD, this kind of stuckness can still affect you. It&rsquo;s most
obvious when starting a new project from scratch. Then it really is
&ldquo;blank page.&rdquo; But I&rsquo;ve noticed a similar feeling when I&rsquo;m adding a new
<em>type</em> of functionality to an application.</p>

<h3>Cuttings</h3>

<p>Pirsig spends the remainder of the chapter examining in detail what
stuckness means, and how to deal with it. Many of the</p>

<p>He describes it as the point at which what you think you know about
something has boxed you into a place where you can&rsquo;t conceive of a way
to move forward.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Secure Password Storage]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/07/13/secure-password-storage/"/>
    <updated>2015-07-13T14:34:31-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/07/13/secure-password-storage</id>
    <content type="html"><![CDATA[<p>At a high-level, when storing secrets like passwords, the standard
best practice is to never store the plain-text version of the password
in the system.  Instead, you store some information that is uniquely
and repeatably derived from the password in an irreversible fashion.
This is often called a &ldquo;digest.&rdquo;</p>

<p>This preserves the ability to check whether someone has entered the
correct password for an account in order to authenticate them (you
simply recalculate the derived value and check those for equality),
but it prevents an attacker who somehow obtains the password digest
from immediately having access to the plain-text version of a user&rsquo;s
password. That&rsquo;s the process at a very high-level.</p>

<!--more-->


<p>Now there are a number of different types of attacks that can be
executed against a web application and a legitimate user to attempt to
intercept the plain text version of a single user&rsquo;s password.  The
defenses for these are well known, and all of the countermeasures that
are part of the source code of the app are being used.  There are some
further countermeasures (such as usage of https) that are a concern
of how the app is deployed, but we will certainly be implementing
those when we get to the point of production deployment.</p>

<p>This leaves the main attack vector for obtaining user passwords as
somehow obtaining access to the password digests that we store in our
database.  In our meeting on Thursday, Paul outlined some of the
deployment choices we can make to help prevent this from ever
occurring, but for illustrative purposes let&rsquo;s assume that an attacker
has compromised our database in some manner and now has access to our
user password digests offline.</p>

<p>It is at this point that a detail I have glossed over becomes very
important: the method that we use to generate the password
digests. The industry standard is to use a key derivation function
(KDF). There are three current industry standard KDF&rsquo;s: PBKDF2,
bcrypt, and scrypt.</p>

<p>All three of these KDF&rsquo;s produce values that cannot be used to derive
the original key (i.e. the plain-text of the user password).  This
leaves two avenues of attack: a brute-force search for the original
password plain-text (a &ldquo;preimage attack&rdquo;), or a brute-force search for
another password plain-text that produces the same digest (a &ldquo;collision
attack&rdquo;).</p>

<p>It&rsquo;s important to realize that defending against a brute-force
password search is not a question of making it &ldquo;impossible.&rdquo;  It&rsquo;s
really a question of how expensive it would be, and how long it would
take. The goal in this case is to make it so that the attacker can&rsquo;t
try enough passwords in a &ldquo;reasonable amount of time&rdquo; that they will
get a sufficient return on the hardware they need to throw at the
problem, without making password authentication take so long that it
makes users upset.</p>

<p>At a high-level, all three of the industry standard KDF&rsquo;s are tunable
as to how much time they take, so they effectively have equivalent
resistance to a brute-force attack.  However, PBKDF2 is a relatively
simple algorithm that can be very efficiently computed in specialized
hardware, or on commercial graphics cards.  This makes it
substantially weaker than the other two because graphics cards and
specialized hardware can increase the number of passwords that an
attacker can test per unit of time.</p>

<p>To quote an piece of writing I found about bcrypt:</p>

<blockquote><p>Bcrypt has the best kind of repute that can be achieved for a
cryptographic algorithm: it has been around for quite some time,
used quite widely, &ldquo;attracted attention&rdquo;, and yet remains unbroken
to date.</p></blockquote>

<p>Recently, advances in hardware have made bcrypt somewhat vulnerable in
a similar manner to PBKDF2.  Scrypt was designed to be tunable in both
speed and memory usage.  This tunable memory usage makes scrypt far
less susceptible to these specialized hardware attacks.</p>

<p>In general though these types of hardware attacks come at significant
cost, so for many applications tuned usage of PBKDF2 or bcrypt is more
than adequate.  Using scrypt also carries another form of risk. Since
it is a much newer algorithm it hasn&rsquo;t had time to be subjected to the
same analysis and attack attempts as PBKDF2 and bcrypt.  This means
that it is possible for a security vulnerability to be discovered in
scrypt at some point in the future that makes it significantly less
secure than the other two.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Domain Driven Writing]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/07/03/domain-driven-writing/"/>
    <updated>2015-07-03T23:28:51-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/07/03/domain-driven-writing</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been reading <em>Domain Driven Design</em> by Eric Evans for the past
month or so, and thinking about the ideas and concepts in it has been
consuming a lot of my mental space and time. One thing in particular
that I&rsquo;ve found to be really interesting is his concept of developing
a <strong>Ubiquitous Language</strong> for the project.</p>

<p>At a very high level, the idea of having a Ubiquitous Language for a
project just means that there is specific vocabulary and jargon that
is used to describe certain key concepts about the domain of the
project and the particular implementation that the team is
developing. Or to put it even more simply, that when someone on the
team uses a word or a phrase, everyone else knows what they are
talking about.</p>

<!--more-->


<p>This is actually something that people do constantly. You build up a
common language with the people you are closest to: your family,
friends, teammates at work. I know that my group of close friends has
a very particular way of speaking with one another, that probably
sounds somewhat odd to &ldquo;outsiders.&rdquo;</p>

<p>Sometimes it happens organically over a long period of time, and
sometimes we do it intentionally. My favorite example of this second
category are the talks that Rich Hickey gives. Some of them at least
have followed a particular format. He starts with the definition of a
word, possibly two. He defines them precisely, and he defines the
context that he is talking within. He then builds on this definition
to talk about some fundamental idea in programming, or some insight
that this rigorous definition gave him.</p>

<p>The key part though, is that a good portion of his talk is given to
building up a sort of basic common language so that he is confident
that when he uses a word, we understand as well as we possibly can
what he intended by saying it.</p>

<p>A good friend of mine often has a very hard time with this. I have had
many conversations with him about interesting and deep topics that
have turned into arguments, largely about what a particular word
means. The problem is often that he has a deeper context and specific
meaning that he intends when he says something. But because I haven&rsquo;t
studied the same things or shared the same experiences, I don&rsquo;t
realize he means something different than usual.</p>

<p>I wish I had a concrete example that I could talk about, because this
sounds very wish-washy.</p>

<h3>A Slight Digression</h3>

<p>I&rsquo;m strangely reminded of the final program from Mark Pilgrim&rsquo;s
excellent - though sorely out-dated - <em>Dive Into Greasemonkey</em>. He
spends the first several tens of lines of code writing some facilities
that will make programming Javascript more reminiscent of programming
in Python because he&rsquo;s so familiar with Python.</p>

<p>One thing that Eric Evans returns to throughout <em>DDD</em> is leaning on
the <em>Ubiquitous Language</em> of the project to suss out design issues
early. He emphasizes that we should try and engage all of our ways of
communicating and understanding the ideas of the project: with
language, with diagrams, and with code.</p>

<p>Uncle Bob has written at length about how (good) tests are really
specifications for how a program works. They should clearly
communicate the intent of the system.</p>

<p>Gerald Sussman and Hal Abelson write in the preface to their classic
<em>Structure and Interpretation of Computer Programs</em> that they believe
that programming is not just an activity concerned with causing
computers to enact computations. It is much more importantly &ldquo;a novel
formal medium for expressing ideas about process.&rdquo;</p>

<p>These two ideas, tests as specifications, and computer languages as
formal language describing processes have started to seem intimately
connected to me.</p>

<h3>Automation and Communication</h3>

<p>Several years ago I was working on a project to build a video game AI
with several other students at my university. Another student and I
were pioneering the project, and in particular I took on the task of
figuring out how to get the development environment working on the
Computer Science lab machines.</p>

<p>This setup was non-trivial. It involved setting environment variables,
setting compatibility flags on the game executable, and installing
plugins into the game&rsquo;s binary directory. On top of that, but because
of the way the lab machines were setup, there was additional setup
that needed to be done at the start of <em>every development session</em>.</p>

<p>Once I had gotten everything working through a long process of trial
and error, I then set about attempting to duplicate my success from a
clean profile. As I figured out the minimal set of setup steps, I
wrote them down. I then proceeded to test the quality of these
instructions by handing them off to another student to replicate with
me watching over his shoulder.</p>

<p>You will of course be shocked to learn that he had almost no success
in following the steps I had written down. This is because I had
written them in enough detail for me to understand and remember
what needed to be done, but there was still a huge amount of context
for those instructions that resided only in my own head. Context that
I head gained by the laborious trial, error and troubleshooting
process of setting the environment up initially.</p>

<p>I iterated on the instructions several more times, each time finding
some new guinea pig to test them on. Until eventually, I came to the
conclusion that I would actually need pictures of the GUI dialogs and
full nearly click-by-click instructions in order to get a set of
instructions that other students could follow without making mistakes.</p>

<p>At that moment, I realized that I would be far less work, both
up-front and continuing to simply figure out how to write code to
automate the development environment setup.</p>

<p>This seems like a no-brainer. Write two scripts one time, spend a few
hours figuring out the nuances of scripting Windows and then tell
people &ldquo;Download those two scripts. Run this one once, then run that
one every time you want to work on the project.&rdquo; Done.</p>

<p>The problem for me is the same problem that a math tutor has with
simply telling the student the formula they need to use to calculate
the answer. There is a <em>lot</em> of important context that is missing.</p>

<p>My setup script was incredibly effective. Not only did it flawlessly
setup up the dev environment, but it was at least an order of
magnitude faster than for a human to accomplish the same tasks.</p>

<p>That small script I wrote, expressed the idea of how to setup that
development environment incredibly precisely. But there was now
something missing. There was no context for that process to fit in
to. The why of it was lost, and all that was left was for people to
run it.</p>

<p>Even reading the contents of the script, it was possible to determine
what it did, but the <em>why</em> was completely missing.</p>

<p>I think testing, at it&rsquo;s very best, can start to supplement this
deficiency in code. It can help to answer the question &ldquo;Yes, it
works. But why does it do it <em>that</em> way?&rdquo;</p>

<h4>p.s.</h4>

<p>Some interesting papers that are somewhat related to this post:</p>

<ul>
<li><a href="https://www.recurse.com/blog/58-paper-of-the-week-notation-as-a-tool-of-thought">Notation as a Tool of Thought</a></li>
<li><a href="https://www.recurse.com/blog/41-introducing-paper-of-the-week">Growing A Language</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Many Faces of the Repository Pattern]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/06/29/the-many-faces-of-the-repository-pattern/"/>
    <updated>2015-06-29T00:43:06-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/06/29/the-many-faces-of-the-repository-pattern</id>
    <content type="html"><![CDATA[<p>Last week I spent quite a lot of time working closely with my a fellow
apprentice on refactoring a Rails application away from direct usage
of ActiveRecord for data persistence, and towards some incarnation of
the Repository Pattern. Now that we&rsquo;ve finished, I thought some
reflection on the different possible implementations that we
considered, and what we ended up implementing might be in order.</p>

<!--more-->


<h2>What is a &ldquo;Repository&rdquo;?</h2>

<p>First of all, let&rsquo;s talk briefly about the Repository Pattern
itself. My first exposure to the idea was through the discussion of it
in &ldquo;Domain Driven Design&rdquo; by Eric Evans. Martin Fowler has
<a href="http://martinfowler.com/eaaCatalog/repository.html">a page on Repositories</a> where he summarizes the pattern
with this description:</p>

<blockquote><p>Mediates between the domain and data mapping layers using a
collection-like interface for accessing domain objects.</p></blockquote>

<p>This is a good high-level summary of what Eric Evans describes as
well. Broadly speaking, the idea is that you use the Repository
Pattern to thoroughly isolate your domain layer from whatever
strategies are used to persist the domain data. Evans offers this
description of the problem that Repositories help to solve:</p>

<blockquote><p>A subset of persistent objects must be globally accessible through a
search based on object attributes. &hellip; Providing access to other
objects muddies important distinctions. Free database queries can
actually breach the encapsulation of domain objects and
AGGREGATES. Exposure of technical infrastructure and database access
mechanisms complicates the client and obscures the MODEL-DRIVEN
DESIGN.</p></blockquote>

<p>He further explains that:</p>

<blockquote><p>A repository lifts a huge burden from the client, which can now talk
to a simple, intention-revealing interface, and ask for what it
needs in terms of the model. To support all this requires a lot of
complex technical infrastructure, but the interface is simple and
conceptually connected to the domain model.</p></blockquote>

<p>Finally, he lists the advantages that using Repositories confers:</p>

<ul>
<li>They present clients with a simple model for obtaining persistent
objects and managing their life cycle.</li>
<li>They decouple application and domain design from persistence
technology, multiple database strategies, or even multiple data
sources.</li>
<li>They communicate design decisions about object access.</li>
<li>They allow easy substitution of a dummy implementation, for use in
testing (typically using an in-memory collection).</li>
</ul>


<p>For someone seeking to implement the Repository Pattern in their own
project, this list serves as an excellent barometer of the quality of
their implementation.</p>

<h2>My Repository</h2>

<p>A few weeks ago I started working on a new client project. It was a
greenfield application, and we started building it in Ruby on Rails,
using the basic Rails application structure, and all of the built-in
Rails Magic &trade;. This meant a standard MVC architecture,
ActiveRecord models, the whole nine yards.</p>

<p>We embraced the &ldquo;Rails Way&rdquo; largely to give the project a
jump-start. We were pretty confident that eventually we&rsquo;d start
feeling the pain of using Rails and want to head towards some sort of
hybrid Rails architecture.</p>

<p>A few weeks ago, we got to that point and started looking at
implementing a repository for the new domain object we were about to
introduce. Unfortunately, I didn&rsquo;t return to the discussion from the
DDD book referenced earlier, and we basically started to feel our way
into implementing the Repository pattern based on my teammates prior
experience, what we generally knew about the pattern and some
interesting examples we found on blog posts regarding using the
Repository pattern with Rails&#8217; ActiveRecord technology.</p>

<p>We ended up with something that looked basically like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Notes</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Repository</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">dao</span> <span class="o">=</span> <span class="no">Note</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@dao</span> <span class="o">=</span> <span class="n">dao</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">new</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Notes</span><span class="o">::</span><span class="no">Note</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">find_by_id</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">record</span> <span class="o">=</span> <span class="vi">@dao</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Notes</span><span class="o">::</span><span class="no">Note</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">record</span><span class="o">.</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">save</span><span class="p">(</span><span class="n">note</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">note</span><span class="o">.</span><span class="n">valid?</span>
</span><span class='line'>        <span class="n">record</span> <span class="o">=</span> <span class="vi">@dao</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">note</span><span class="o">.</span><span class="n">attributes</span><span class="p">)</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>        <span class="n">note</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">record</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>        <span class="kp">true</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="kp">false</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This looks pretty similar to the interface that ActiveRecord gives
us. If we go back to that list of benefits that repositories are
supposed to confer, it&rsquo;s not immediately obvious that this
implementation is really going to give us any of those, except
possibly the ability to swap database implementations.</p>

<p>But what are we to do instead? Well, as it turns out waiting a few
days provided an answer. Over the weekend one of the Craftsmen at 8th
Light took the initiative to toss our codebase headfirst into a
slightly different repository implementation. This was a tricky
prospect for a codebase that was fairly coupled to the use of
ActiveRecord, but once we got everything figured out we ended up with
something that looked sort of like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Repository</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">RepositoryBase</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">db</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@db</span> <span class="o">=</span> <span class="n">db</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>      <span class="n">convert</span><span class="p">(</span><span class="n">repository</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">attributes</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">find_by_id</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">convert</span><span class="p">(</span><span class="n">repository</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="nb">id</span><span class="o">.</span><span class="n">to_i</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">all</span>
</span><span class='line'>      <span class="n">repository</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="n">convert</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">count</span>
</span><span class='line'>      <span class="n">repository</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">convert</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@db</span><span class="o">.</span><span class="n">adapter</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="n">model_class</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">model_class</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">NotImplementedError</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">repository</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">NotImplementedError</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Notes</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Repository</span> <span class="o">&lt;</span> <span class="no">Repository</span><span class="o">::</span><span class="no">RepositoryBase</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">find_all_by_user_id</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">repository</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">user_id</span><span class="p">:</span> <span class="n">user_id</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">note</span><span class="o">|</span>
</span><span class='line'>        <span class="n">convert</span><span class="p">(</span><span class="n">note</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">model_class</span>
</span><span class='line'>      <span class="no">Notes</span><span class="o">::</span><span class="no">Note</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">repository</span>
</span><span class='line'>      <span class="vi">@db</span><span class="o">.</span><span class="n">notes</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This actually looks substantially similar, and in some ways bears even
more resemblance to an ActiveRecord API.</p>

<p>Since it&rsquo;s come up a few times, let&rsquo;s consider the differences between
ActiveRecord and the Repository pattern. From the Rails Guide on
ActiveRecord:</p>

<blockquote><p> In Active Record, objects carry both persistent data and behavior
 which operates on that data. Active Record takes the opinion that
 ensuring data access logic as part of the object will educate users
 of that object on how to write to and read from the database.</p></blockquote>

<p>So the essential feature of ActiveRecord is that the Model class
represents both the domain model, and the data model. Contrast this
with one of the primary features of the Repository Pattern as
described by Eric Evans:</p>

<blockquote><p>[The repository] Mediates between the domain and data mapping layers
using a collection-like interface for accessing domain objects.</p></blockquote>

<p>Instead of combining domain and data access into the same object, the
Repository gives us an explicit boundary to partition our system
on. On one side, we can hide the often significant technical
complexity of storing and retrieving data. On the other side we can be
concerned solely with domain objects and their behaviour.</p>

<p>So it&rsquo;s not really the difference in API that we&rsquo;re looking for, it&rsquo;s
the architecture surrounding that API. In particular, simply by having
a separate Repository object we&rsquo;ve started to achieve that separation
between data and domain. So despite the fact that our Repositories
don&rsquo;t try to fully emulate a collection of domain objects we&rsquo;ve
actually managed to achieve one of the primary goals of the Repository
Pattern.</p>

<h2>Taking it Further</h2>

<p>I think the most important question to ask when talking about
technical infrastructure is &ldquo;What does it buy me?&rdquo; In this case, what
might we be able to do now that we use repositories everywhere that
would have been difficult or impossible before? It just so happens
that one of the next features on our list was implementing users in
the system having a balance of some kind.</p>

<p>We decided that in the domain, this could naturally be represented by
each user having an Account. This <a href="https://en.wikipedia.org/wiki/Indirection">indirection</a> conveniently
gives us the ability to potentially model transfers to non-User
entities. But how would we actually store the data associated with an
Account? The most obvious (and somewhat naive) way would be to store a
simple integer balance for each Account. As an ActiveRecord migration
it would probably look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">create_table</span> <span class="s2">&quot;accounts&quot;</span><span class="p">,</span> <span class="ss">force</span><span class="p">:</span> <span class="ss">:cascade</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">integer</span>  <span class="s2">&quot;balance&quot;</span><span class="p">,</span>    <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">integer</span>  <span class="s2">&quot;user_id&quot;</span><span class="p">,</span>    <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>But a common model for recording balances in the domain of accounting
is typified by double entry book-keeping. In this model the sum of all
debits and credits must always be equal, and the balance for a
particular account can be calculated by the sum of debits and credits
associated with that account. Again, in ActiveRecord that might look
something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">create_table</span> <span class="s2">&quot;accounts&quot;</span><span class="p">,</span> <span class="ss">force</span><span class="p">:</span> <span class="ss">:cascade</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">integer</span>  <span class="s2">&quot;user_id&quot;</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">create_table</span> <span class="s2">&quot;transactions&quot;</span><span class="p">,</span> <span class="ss">force</span><span class="p">:</span> <span class="ss">:cascade</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="s2">&quot;account_id&quot;</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="s2">&quot;amount&quot;</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we&rsquo;ve implemented a successful Repository, it should be possible
for us to write the Repository using the naive strategy, develop
client code that utilizes the Repository, and then transition the
Repository to use the more sophisticated transaction scheme without
making any changes to the clients.</p>

<p>The first key element for implementing the accounts repository is
going to be an Account domain object. Ignoring how it gets created for
the moment, here&rsquo;s a basic implementation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Accounts</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Account</span>
</span><span class='line'>    <span class="kp">attr_reader</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:balance</span><span class="p">,</span> <span class="ss">:user_id</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">deposit</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@balance</span> <span class="o">+=</span> <span class="n">amount</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">transfer_to</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">amount</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">!</span><span class="n">has_funds?</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
</span><span class='line'>        <span class="k">raise</span> <span class="s2">&quot;Balance too low&quot;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="vi">@balance</span> <span class="o">-=</span> <span class="n">amount</span>
</span><span class='line'>        <span class="n">account</span><span class="o">.</span><span class="n">deposit</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">has_funds?</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@balance</span> <span class="o">&gt;=</span> <span class="n">amount</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Repository</span> <span class="o">&lt;</span> <span class="no">Repository</span><span class="o">::</span><span class="no">RepoBase</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create_for</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>      <span class="n">account</span> <span class="o">=</span> <span class="n">create</span><span class="p">({</span><span class="ss">user_id</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">})</span>
</span><span class='line'>      <span class="n">account</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">find_by_user</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>      <span class="n">convert</span><span class="p">(</span><span class="vi">@db</span><span class="o">.</span><span class="n">accounts</span><span class="o">.</span><span class="n">find_by_user_id</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">model_class</span>
</span><span class='line'>      <span class="no">Accounts</span><span class="o">::</span><span class="no">Account</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that this version of the account uses the same naive model of
storing a simple balance. We could rewrite this domain level code to
store a list of transactions as an array of hashes, and then collapse
the list of transactions to the new effective balance when saving the
object. So already, we can see that separating the concerns of data
storage and domain behaviour has achieved some level of isolation.</p>

<p>Now let&rsquo;s imagine we change the database implementation so there is no
longer any <code>db.accounts</code> object. Instead, we have <code>db.transactions</code>
which has methods like <code>find_all_transactions_for_account_id</code>.</p>

<p>Again ignoring details of how the transactions are created or saved:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Accounts</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Repository</span> <span class="o">&lt;</span> <span class="no">Repository</span><span class="o">::</span><span class="no">RepoBase</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create_for</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>      <span class="n">account</span> <span class="o">=</span> <span class="n">create</span><span class="p">({</span><span class="ss">user_id</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">})</span>
</span><span class='line'>      <span class="n">account</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">find_by_user</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>      <span class="n">transactions</span> <span class="o">=</span> <span class="vi">@db</span><span class="o">.</span><span class="n">transactions</span><span class="o">.</span><span class="n">find_by_user_id</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">balance</span> <span class="o">=</span> <span class="n">transactions</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">r</span><span class="p">,</span><span class="n">t</span><span class="o">|</span> <span class="n">r</span> <span class="o">+</span> <span class="n">t</span><span class="o">.</span><span class="n">amount</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">convert</span><span class="p">({</span><span class="ss">user_id</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">balance</span><span class="p">:</span> <span class="n">balance</span><span class="p">})</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">model_class</span>
</span><span class='line'>      <span class="no">Accounts</span><span class="o">::</span><span class="no">Account</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This was a very minor change, given that under the covers data is
being stored in an entirely different manner. Even better, the change
is totally isolated to the repository. Because of the original naive
implementation of the Account domain object, some changes will need to
be made to the way it handles transfers. This may look like the
details of the data storage are leaking into the domain, but in fact
this is a data requirement bubbling up. We can&rsquo;t store transactions if
we don&rsquo;t record them in the first place. And realistically, we&rsquo;re
probably going to need the concept of a Transaction to be added to the
domain model.</p>

<p>You may then find yourself wondering, &ldquo;What value do we really get
from this separation if both sides of the boundary are going to need
to change anyhow?&rdquo; The answer I think is two things: separation of
concerns and incremental changes. The details of how we handle
transactions in the domain layer are going to be different from the
details needed to handle storing data in the database. This separation
of concerns allows us to focus on the technical complexity of data
storage when writing that code, and to focus on the business
complexity when dealing with the domain code instead of mixing the two
together.</p>

<p>Second, this separation layer provides us an abstraction layer that we
can use to isolate changes to our code. Earlier I demonstrated how the
domain layer could stay the same even though storage had moved to a
transaction model. It&rsquo;s not too hard to imagine changing the domain
model to track transactions using pure Ruby data structures and having
the repository still store accounts with an explicit balance.</p>

<p>This separation layer then gives us a nice stepping stone to move from
one implementation to the other. This stepping stone is important
because it&rsquo;s a place where we should be able to stop making code
changes and have all of our tests pass. To me, being able to make real
changes in this stepwise manner is one of the hallmarks of
well-factored and decoupled code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Estimating Is Hard]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/05/26/estimating-is-hard/"/>
    <updated>2015-05-26T19:53:08-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/05/26/estimating-is-hard</id>
    <content type="html"><![CDATA[<p>I&rsquo;m coming up on the end of my first iteration at 8th Light where I
was asked to estimate how long each of my stories was going to
take. For the three stories that make up the majority of converting my
rack Tic-Tac-Toe from a multi-page vanilla HTML/CSS app, to a SPA
(Single Page App) that uses AJAX to communicate with the server I came
up with a total of about 11 points. Given that at 8th Light we want to
be nominally doing about 9 points per week that meant that I estimated
it would take me just a touch over one iteration to complete that
transformation. But looking at it right now, I don&rsquo;t think I&rsquo;m on
track to meet that goal.</p>

<!--more-->


<p>Estimating is acknowledged to be hard.  The advice from <em>The Pragmatic
Programmer</em> acknowledges that and says that basically the only way to
get better at it is to try and estimate things and then track how
(in)accurate your estimates are. Beyond that general acknowledgement
though, I think I have some personal habits/quirks that make my
estimates less than good.</p>

<p>First, I have a tendency to want to seem like I know what I&rsquo;m doing,
even when I don&rsquo;t. This is obviously problematic for estimation since
in it&rsquo;s simplest form it might make me underestimate how long I think
something will take so I look more proficient. There&rsquo;s a more
insidious way that this attitude causes me problems though. It means I
have a tendency not to ask questions, and I probably tend to bang my
head against things that aren&rsquo;t working for too long before I ask for
help.</p>

<p>The second problem I have is reading things and ensuring I actually am
comprehending them. This is sort of related to the first problem since
I think it comes from a similar place. But at this point it&rsquo;s more of
a mental habit than an explicit choice. For instance, even though I
didn&rsquo;t have a short time limit to figure out my estimates, I still did
them fairly quickly and without really having a clear picture of what
work I would have to do for each story. As soon as I started
trying to implement the stories, I realized this.</p>

<h3>The Takeaway</h3>

<p>I need a more systematic approach to the way I come up with
estimates. First off, I&rsquo;m going to go re-read the article on it from
<em>The Pragmatic Programmer</em>. As I recall it has some excellent advice
that I don&rsquo;t remember half well enough. Second, I think I&rsquo;m going to
try to partially adopt a strategy that my co-mentor Zach suggested
when I was reviewing a code-base&rsquo;s &ldquo;viability for extension.&rdquo; His
advice was to walk through the code while considering what it would
take to make some sort of reasonable change.</p>

<p>This is quite nebulous for a large code-base, since I first have to
decide what &ldquo;a reasonable change&rdquo; might be. But as a tool for reifying
the goals that I&rsquo;m trying to estimate it should work very
nicely. Basically, all that this means is that I will actually
seriously try to think through what I would do to implement the story
I&rsquo;m trying to estimate instead of just throwing a number out from my
gut feeling.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Domain Driven Design and Clojure]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/05/21/domain-driven-design-and-clojure/"/>
    <updated>2015-05-21T10:41:29-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/05/21/domain-driven-design-and-clojure</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been reading an excellent book recently: <a href="https://en.wikipedia.org/wiki/Domain-driven_design"><em>Domain Driven Design</em></a>
by Eric Evans. I just finished the section on Entities and Value
Objects, and it&rsquo;s caused me to start thinking about Clojure and the
&ldquo;sane state management model&rdquo; that language advocates/enforces.</p>

<!--more-->


<p>The Clojure state model bears some strong similarities to what Evans
talks about when discussing the needs and uses for Entities and Value
Objects. Entities he says should be used to represent things where
their continuity of identity is more important than their current
value. Value Objects are the opposite, the important part of a Value
Object is the data it holds or represents, to the extent that Value
Objects with the same value are totally interchangeable.</p>

<p>He goes on to talk about the benefits that immutability and safe
arbitrary sharing that this interchangeability can give you.
Specifically, the relative looseness of the constraints on Value
Objects gives a system designer more freedom to implement Value
Objects in a way that has extra benefits, such as increased
performance or memory efficiency.</p>

<p>I&rsquo;m just going to pull some quotes directly from
<a href="http://clojure.org/state">the page on clojure.org about state</a>.</p>

<p>First, some words about identity:</p>

<blockquote><p>While some programs are merely large functions, e.g. compilers or
theorem provers, many others are not - they are more like working
models, and as such need to support what I&rsquo;ll refer to in this
discussion as identity. By identity I mean a stable logical entity
associated with a series of different values over time. Models need
identity for the same reasons humans need identity - to represent
the world. How could it work if identities like &lsquo;today&rsquo; or &lsquo;America&rsquo;
had to represent a single constant value for all time?</p></blockquote>

<p>And now, values:</p>

<blockquote><p>So, for this discussion, an identity is an entity that has a state,
which is its value at a point in time. And a value is something that
doesn&rsquo;t change. 42 doesn&rsquo;t change. June 29th 2008 doesn&rsquo;t
change. Points don&rsquo;t move, dates don&rsquo;t change, no matter what some
bad class libraries may cause you to believe. Even aggregates are
values. The set of my favorite foods doesn&rsquo;t change, i.e. if I
prefer different foods in the future, that will be a different set.</p></blockquote>

<p>Clearly Rich Hickey was thinking along the same lines as Eric
Evans. In fact, I would say that Clojure is a programming language
that is built on a firm conceptual model of the domain of
programming. I think this is one of the things that makes Clojure such
a joy to program in. Especially once you&rsquo;re familiar with the
language, the standard idioms and the general layout of it&rsquo;s
libraries. Everything is highly conceptually consistent. There have
been very few points where I learned something new about Clojure and
thought &ldquo;Well that doesn&rsquo;t really make sense&hellip;&rdquo; More often when I
learn something new it fits smoothly into the mental model that I
already have about how the language works.</p>

<p>I guess this Domain Driven Design stuff might really work&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Rack]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/05/19/learning-rack/"/>
    <updated>2015-05-19T23:18:14-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/05/19/learning-rack</id>
    <content type="html"><![CDATA[<p>For the past two weeks or so I&rsquo;ve been grappling with trying to build
a simple HTTP front-end for my ruby Tic-Tac-Toe program. There have
been some non-technical hurdles with scheduling and other projects
demanding my time, but I&rsquo;ve also spent a fair amount of time simply
struggling to put the pieces together with how the Rack libraries
work.</p>

<!--more-->


<p>Rack as a concept is exceptionally simple. Inspired by <a href="https://www.python.org/dev/peps/pep-0333/">PEP 333</a>
which specified the Python Web Server Gateway Interface or WSGI, Rack
has come to be the de-facto way that Ruby applications interface with
web servers. Beyond the <a href="http://rack.github.io/">basic concept</a>, Rack provides a set of
helper libraries. These include many useful middleware and convenience
classes for things like static file serving, sessions, and request
parsing and response generation. However, the documentation for the
classes included in Rack is pretty dismal.</p>

<p>For the most part it is all auto-generated documentation, but many of
the classes have only a vague description of what they do, with no
indication of how they&rsquo;re meant to be used. Conspicuously absent or
good examples of configuration of middleware, especially in the
special DSL that is made available in <a href="https://github.com/rack/rack/wiki/%28tutorial%29-rackup-howto">rackup</a> files.</p>

<p>Given the number of different web frameworks that are built on top of
Rack, it&rsquo;s sort of shocking to me that the documentation is in this
sort of state. Though I guess it&rsquo;s consistent with my general
experience of Ruby libraries as a whole.</p>

<p>I&rsquo;ve really worked in Ruby since I started my apprenticeship at 8th
Light, but from what I&rsquo;ve seen, many Ruby libraries have awkward gaps
in their documentation. For instance, Guard is an amazing and vital
piece of a smooth Ruby TDD toolchain. But it&rsquo;s documentation is
incredibly cryptic about how to properly setup a Guardfile. There are
more paragraphs about how to debug problems in your Guardfile than
what the format is!</p>

<p>Now documentation is hard. But over the last several years, it&rsquo;s been
increasingly clear to me that <a href="https://jacobian.org/writing/great-documentation/">good documentation</a> is one of
the most valuable assets that a software product can have, especially
an open-source one.</p>

<p>So then why is writing good documentation still so elusively
difficult? I know I struggle with it immensely. The majority of
<a href="https://github.com/RadicalZephyr?tab=repositories">my projects</a> have little to no documentation, with the notable
exception of <a href="https://github.com/RadicalZephyr/hermit">Hermit</a>.</p>

<p>I think there are a few reasons. First off, writing in general is
hard. It takes effort, and the will to keep re-writing and trying new
things to end up with a nicely polished piece of writing that reads
well, and communicates the author&rsquo;s intent clearly and succinctly.</p>

<p>Another reason is that it&rsquo;s much easier to polish a piece of writing
with good critical feedback from someone else. The complicating factor
for code documentation is that you need to find the right audience to
give you feedback. Often this means someone who is totally unfamiliar
with your exact software, but if it&rsquo;s code documentation it probably
also can&rsquo;t be your friend who only uses their computer for writing
Word documents and checking their social media.</p>

<p>But I think the final reason is that we don&rsquo;t do it enough. Again,
like all other writing, the best way to get better at it, is simply by
writing lots and lots of documentation. Also, critically reading the
documentation that you read, and reflecting on what is helpful, and
what isn&rsquo;t.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chestnut - Annotated]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/05/10/chestnut-annotated/"/>
    <updated>2015-05-10T13:34:16-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/05/10/chestnut-annotated</id>
    <content type="html"><![CDATA[<h4>A Note about version numbers</h4>

<p>At the time of this writing, there were several newer versions of many
of the dependencies used in Chestnut. In particular, the ClojureScript
core team had fairly recently released a new version with
<a href="https://github.com/clojure/clojurescript/wiki/Running-REPLs">vastly simplified REPL setup requirements</a> which
triggered changes to many of the related ClojureScript tooling
libraries (Piggieback, and Weasel especially). So PLEASE! Use the
latest version of Chestnut, or if you&rsquo;re setting up your own project
then look up the latest versions on <a href="http://clojars.org/">Clojars</a></p>

<h2>On to the Annotating!</h2>

<p>As I wrote <a href="http://www.zephyrizing.net/blog/2015/04/04/shaving-the-clojurescript-yaks/">recently</a>, I recently dove head first into doing web
development with Clojure and Clojurescript. Along the way I learned a
whole heck of a lot about how to actually set up a <a href="http://leiningen.org/">Leiningen</a>
project to support a nice workflow for such a project. However, most
of my new-found knowledge has already been put together into a very
nice package called <a href="https://github.com/plexus/chestnut">Chestnut</a>. However, at first glance
(and second and third glance really) Chestnut projects are complex and
intimidating.</p>

<p>This post is an annotated walkthrough of the configuration that a new
Chestnut comes with. The best way to follow along would be to start
off by running <code>lein new chestnut tour</code> in shell and then exploring
the files as I talk about them.</p>

<!--more-->


<p>Let&rsquo;s start by looking at the base directory.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Directories
</span><span class='line'>- resources
</span><span class='line'>- src
</span><span class='line'>- env
</span><span class='line'>
</span><span class='line'># Files
</span><span class='line'>- LICENSE
</span><span class='line'>- README.md
</span><span class='line'>- code_of_conduct.md
</span><span class='line'>- project.clj
</span><span class='line'>- Procfile
</span><span class='line'>- system.properties</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re familiar with Clojure development at all, this should look
very familiar to you. But there a few unusual things: the <code>Procfile</code>
and <code>system.properties</code> files, and the <code>env</code> folder.  The <code>Procfile</code>
is a file for letting <a href="https://www.heroku.com/">Heroku</a> know how to run your app, and the
contents of it are explained well in the
<a href="">Heroku guide to getting started with Clojure</a>.</p>

<p><a href="https://devcenter.heroku.com/articles/getting-started-with-clojure#define-a-procfile">https://devcenter.heroku.com/articles/getting-started-with-clojure#define-a-procfile</a></p>

<p>If we use the awesome [tree][tree] program to visualize some of these
directories we can see some interesting stuff. First, <code>src</code> looks
pretty standard for Clojure, with the addition of a second tree for
cljs files.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>src
</span><span class='line'>├── clj
</span><span class='line'>│   └── tour
</span><span class='line'>│       └── server.clj
</span><span class='line'>└── cljs
</span><span class='line'>    └── tour
</span><span class='line'>        └── core.cljs</span></code></pre></td></tr></table></div></figure>


<p>The same is true of the <code>test</code> folder. But what&rsquo;s really interesting
is what is in that new <code>env</code> folder.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>env
</span><span class='line'>├── dev
</span><span class='line'>│   ├── clj
</span><span class='line'>│   │   └── tour
</span><span class='line'>│   │       └── dev.clj
</span><span class='line'>│   └── cljs
</span><span class='line'>│       └── tour
</span><span class='line'>│           └── main.cljs
</span><span class='line'>├── prod
</span><span class='line'>│   ├── clj
</span><span class='line'>│   │   └── tour
</span><span class='line'>│   │       └── dev.clj
</span><span class='line'>│   └── cljs
</span><span class='line'>│       └── tour
</span><span class='line'>│           └── main.cljs
</span><span class='line'>└── test
</span><span class='line'>    ├── js
</span><span class='line'>    │   ├── polyfill.js
</span><span class='line'>    │   └── unit-test.js
</span><span class='line'>    └── unit-test.html</span></code></pre></td></tr></table></div></figure>


<p>What we see is that there are three top-level directories underneath
<code>env</code>, and below each of these we see what looks like normal Clojure
and Clojurescript source trees. Veeery, interesting.</p>

<p>Now let&rsquo;s jump and take a look at the <code>project.clj</code>. This is where the
heart of the action is. The first is boring normal project meta-data,
and we&rsquo;re going to skip it. The next section is interesting though.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="ss">:source-paths</span> <span class="p">[</span><span class="s">&quot;src/clj&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="ss">:repl-options</span> <span class="p">{</span><span class="ss">:timeout</span> <span class="mi">200000</span><span class="p">}</span> <span class="c1">;; Defaults to 30000 (30 seconds)</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">:test-paths</span> <span class="p">[</span><span class="s">&quot;spec/clj&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>:repl-options</code> is straightforward. It just increases the timeout
when launching a REPL. Presumably this is because Chestnut REPL&rsquo;s are
so filled with awesome that they take longer to load ;) The <code>*-paths</code>
options are simple too.  They just override the default place that
Leiningen looks for Clojure source and test files by default.</p>

<blockquote><p>N.B. The version of Chestnut I generated this with actually has a
bug, since it generated &ldquo;spec/clj&rdquo; as the test path, but no &ldquo;spec&rdquo;
folder.</p></blockquote>

<p>Next come the dependencies and plugins needed by this project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">org.clojure/clojure</span> <span class="s">&quot;1.6.0&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">org.clojure/clojurescript</span> <span class="s">&quot;0.0-2511&quot;</span> <span class="ss">:scope</span> <span class="s">&quot;provided&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">ring</span> <span class="s">&quot;1.3.2&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">ring/ring-defaults</span> <span class="s">&quot;0.1.3&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">compojure</span> <span class="s">&quot;1.3.1&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">enlive</span> <span class="s">&quot;1.1.5&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">om</span> <span class="s">&quot;0.8.0-rc1&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">environ</span> <span class="s">&quot;1.0.0&quot;</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">:plugins</span> <span class="p">[[</span><span class="nv">lein-cljsbuild</span> <span class="s">&quot;1.0.3&quot;</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">lein-environ</span> <span class="s">&quot;1.0.0&quot;</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Clojure and Clojurescript are obviously necessary, and when you&rsquo;re
using Clojurescript with Leiningen, you probably want the
[lein-cljsbuild][cljsbuild] plugin for compiling your
Clojurescript. <a href="https://github.com/ring-clojure/ring#ring">Ring</a> is the standard Clojure web application&rsquo;s
library. <a href="https://github.com/ring-clojure/ring-defaults#ring-defaults">Ring-defaults</a> is a library for providing standard
configurations of <a href="https://github.com/ring-clojure/ring/wiki/Concepts#middleware">Ring middleware</a>.  <a href="https://github.com/weavejester/compojure#compojure">Compojure</a>
is a routing library built on top of Ring.</p>

<p><sub>
I&rsquo;m not quite sure why the Clojurescript dependency is marked as
<code>provided</code>&hellip;
</sub></p>

<p><a href="https://github.com/cgrand/enlive#enlive-">Enlive</a> is a &ldquo;a selector-based (à la CSS) templating library
for Clojure.&rdquo; Very cool stuff, and wildly useful for many other HTML
processing/producing/consuming tasks than just templating.
Unfortunately very under-documented. <a href="https://github.com/omcljs/om#om">Om</a> is the only
Clojurescript specific dependency in the list, but it&rsquo;s a pretty cool
one. It&rsquo;s a Clojurescript interface to Facebook&rsquo;s React.js library.</p>

<p>Finally we have the <a href="https://github.com/weavejester/environ#environ">Environ</a> library, and it&rsquo;s associated
<code>lein-environ</code> plugin. As their README says:</p>

<blockquote><p>Environ is a Clojure library for managing environment settings from
a number of different sources.</p></blockquote>

<p>However, it is also the basis for a lot of the really neat things that
Chestnut does.</p>

<p>Next up, we have some more basic configuration stuff.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="ss">:min-lein-version</span> <span class="s">&quot;2.5.0&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">:uberjar-name</span> <span class="s">&quot;tour.jar&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>These two settings are specifically to help with deployment to Heroku
which looks for the <code>:min-lein-version</code> key to determine what version
of lein to build your app with. Chestnut also changes the uberjar name
so that the Procfile can specify a specific filename. Normally, the
uberjar name is derived from the project name and the current
version. However, this makes it a moving target.  Every time you bump
your version number you would have to update the Procfile to stay in
sync. This way, the uberjar always has one name and the Procfile never
needs to change.</p>

<p>Finally, we have the basic cljs build configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="ss">:cljsbuild</span> <span class="p">{</span><span class="ss">:builds</span> <span class="p">{</span><span class="ss">:app</span> <span class="p">{</span><span class="ss">:source-paths</span> <span class="p">[</span><span class="s">&quot;src/cljs&quot;</span><span class="p">]</span>
</span><span class='line'>                             <span class="ss">:compiler</span> <span class="p">{</span><span class="ss">:output-to</span>     <span class="s">&quot;resources/public/js/app.js&quot;</span>
</span><span class='line'>                                        <span class="ss">:output-dir</span>    <span class="s">&quot;resources/public/js/out&quot;</span>
</span><span class='line'>                                        <span class="ss">:source-map</span>    <span class="s">&quot;resources/public/js/out.js.map&quot;</span>
</span><span class='line'>                                        <span class="ss">:preamble</span>      <span class="p">[</span><span class="s">&quot;react/react.min.js&quot;</span><span class="p">]</span>
</span><span class='line'>                                        <span class="ss">:optimizations</span> <span class="ss">:none</span>
</span><span class='line'>                                        <span class="ss">:pretty-print</span>  <span class="nv">true</span><span class="p">}}}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is remarkably similar to the configuration from the
<a href="https://github.com/emezeske/lein-cljsbuild/blob/1.0.5/example-projects/none/project.clj">lein-cljsbuild none example project</a>, and a standard
setup to enable source-maps.</p>

<h3>Profiles</h3>

<p>So far, most of what we&rsquo;ve seen is fairly standard
clojure/clojurescript configuration stuff. But one of the things that
makes Chestnut awesome is that it makes really good use of the
Leiningen profiles feature. In particular, it uses profiles to
concisely specify different clojurescript compilation settings and add
dependencies that are only needed for development. If this is the
first time you&rsquo;ve heard about Leiningen profiles, you should probably
go <a href="https://github.com/technomancy/leiningen/blob/master/doc/PROFILES.md#profiles">read about it</a>. The basic summary is this though:</p>

<blockquote><p>You can place any arbitrary key/value pairs supported by defproject
into a given profile and they will be merged into the project map
when that profile is activated.</p></blockquote>

<p>Let&rsquo;s start with the extra <code>:dev</code> setups. It starts off nice and easy
just adding more clojure source and test paths and some extra
development-only dependencies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="ss">:profiles</span> <span class="p">{</span><span class="ss">:dev</span> <span class="p">{</span><span class="ss">:source-paths</span> <span class="p">[</span><span class="s">&quot;env/dev/clj&quot;</span><span class="p">]</span>
</span><span class='line'>                   <span class="ss">:test-paths</span> <span class="p">[</span><span class="s">&quot;test/clj&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>                   <span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">figwheel</span> <span class="s">&quot;0.2.1-SNAPSHOT&quot;</span><span class="p">]</span>
</span><span class='line'>                                  <span class="p">[</span><span class="nv">figwheel-sidecar</span> <span class="s">&quot;0.2.1-SNAPSHOT&quot;</span><span class="p">]</span>
</span><span class='line'>                                  <span class="p">[</span><span class="nv">com.cemerick/piggieback</span> <span class="s">&quot;0.1.3&quot;</span><span class="p">]</span>
</span><span class='line'>                                  <span class="p">[</span><span class="nv">weasel</span> <span class="s">&quot;0.4.2&quot;</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that there is a similar entry under the <code>:uberjar</code> profile for
<code>:source-paths</code> but that the <code>:test-paths</code> are omitted (since the
uberjar is typically for distributing production code).</p>

<p><a href="https://github.com/bhauman/lein-figwheel#lein-figwheel">Figwheel</a> is a very cool project that &ldquo;pushes ClojureScript code
changes to the client.&rdquo; This enables a very smooth Clojurescript
workflow. It&rsquo;s so seamless in fact that in some ways it makes
Clojurescript programming <em>more enjoyable</em> than working with Clojure!</p>

<p><a href="https://github.com/cemerick/piggieback#piggieback-">Piggieback</a> provides support for running a ClojureScript REPL
on top of an nREPL session. Chas goes into the reasons of why this is
a desirable thing in the README, so go check it out if you&rsquo;re interested.</p>

<p>Finally, <a href="https://github.com/tomjakubowski/weasel#weasel">Weasel</a> allows your ClojureScript REPL to use
WebSockets to communicate with your chosen execution environment.
Again, their README has good information about why this might be a
thing you want.</p>

<p>The next two sections are pretty much just setup for Piggieback and
Figwheel:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>               <span class="ss">:repl-options</span> <span class="p">{</span><span class="ss">:init-ns</span> <span class="nv">tour.server</span>
</span><span class='line'>                              <span class="ss">:nrepl-middleware</span> <span class="p">[</span><span class="nv">cemerick.piggieback/wrap-cljs-repl</span><span class="p">]}</span>
</span><span class='line'>
</span><span class='line'>               <span class="ss">:plugins</span> <span class="p">[[</span><span class="nv">lein-figwheel</span> <span class="s">&quot;0.2.1-SNAPSHOT&quot;</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'>               <span class="ss">:figwheel</span> <span class="p">{</span><span class="ss">:http-server-root</span> <span class="s">&quot;public&quot;</span>
</span><span class='line'>                          <span class="ss">:server-port</span> <span class="mi">3449</span>
</span><span class='line'>                          <span class="ss">:css-dirs</span> <span class="p">[</span><span class="s">&quot;resources/public/css&quot;</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then both the dev and uberjar profiles contain an <code>:env</code> map
specifying either that <code>:is-dev</code> is <code>true</code> or <code>false</code>. These
configurations hook into the Environ library and allow you to specify
the value of environment variables directly in the project.clj
file. This particular usage should be pretty straightforward; it&rsquo;s
basically a simple switch that allows us to tell in our code whether
or not this is a dev build/run or not.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>               <span class="ss">:env</span> <span class="p">{</span><span class="ss">:is-dev</span> <span class="nv">true</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only thing remaining in the dev profile now is the cljsbuild test
configuration. Though once again, notice that there is the small
addition of the <code>env/dev/cljs</code> path as a source for our previosly
configured <code>app</code> ClojureScript build.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>               <span class="ss">:cljsbuild</span> <span class="p">{</span><span class="ss">:test-commands</span> <span class="p">{</span> <span class="s">&quot;test&quot;</span> <span class="p">[</span><span class="s">&quot;phantomjs&quot;</span> <span class="s">&quot;env/test/js/unit-test.js&quot;</span> <span class="s">&quot;env/test/unit-test.html&quot;</span><span class="p">]</span> <span class="p">}</span>
</span><span class='line'>                           <span class="ss">:builds</span> <span class="p">{</span><span class="ss">:app</span> <span class="p">{</span><span class="ss">:source-paths</span> <span class="p">[</span><span class="s">&quot;env/dev/cljs&quot;</span><span class="p">]}</span>
</span><span class='line'>                                    <span class="ss">:test</span> <span class="p">{</span><span class="ss">:source-paths</span> <span class="p">[</span><span class="s">&quot;src/cljs&quot;</span> <span class="s">&quot;test/cljs&quot;</span><span class="p">]</span>
</span><span class='line'>                                           <span class="ss">:compiler</span> <span class="p">{</span><span class="ss">:output-to</span>     <span class="s">&quot;resources/public/js/app_test.js&quot;</span>
</span><span class='line'>                                                      <span class="ss">:output-dir</span>    <span class="s">&quot;resources/public/js/test&quot;</span>
</span><span class='line'>                                                      <span class="ss">:source-map</span>    <span class="s">&quot;resources/public/js/test.js.map&quot;</span>
</span><span class='line'>                                                      <span class="ss">:preamble</span>      <span class="p">[</span><span class="s">&quot;react/react.min.js&quot;</span><span class="p">]</span>
</span><span class='line'>                                                      <span class="ss">:optimizations</span> <span class="ss">:whitespace</span>
</span><span class='line'>                                                      <span class="ss">:pretty-print</span>  <span class="nv">false</span><span class="p">}}}}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compared to the <code>:dev</code> profile, the <code>:uberjar</code> is quite simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>         <span class="ss">:uberjar</span> <span class="p">{</span><span class="ss">:source-paths</span> <span class="p">[</span><span class="s">&quot;env/prod/clj&quot;</span><span class="p">]</span>
</span><span class='line'>                   <span class="ss">:hooks</span> <span class="p">[</span><span class="nv">leiningen.cljsbuild</span><span class="p">]</span>
</span><span class='line'>                   <span class="ss">:env</span> <span class="p">{</span><span class="ss">:production</span> <span class="nv">true</span><span class="p">}</span>
</span><span class='line'>                   <span class="ss">:omit-source</span> <span class="nv">true</span>
</span><span class='line'>                   <span class="ss">:aot</span> <span class="ss">:all</span>
</span><span class='line'>                   <span class="ss">:cljsbuild</span> <span class="p">{</span><span class="ss">:builds</span> <span class="p">{</span><span class="ss">:app</span>
</span><span class='line'>                                        <span class="p">{</span><span class="ss">:source-paths</span> <span class="p">[</span><span class="s">&quot;env/prod/cljs&quot;</span><span class="p">]</span>
</span><span class='line'>                                         <span class="ss">:compiler</span>
</span><span class='line'>                                         <span class="p">{</span><span class="ss">:optimizations</span> <span class="ss">:advanced</span>
</span><span class='line'>                                          <span class="ss">:pretty-print</span> <span class="nv">false</span><span class="p">}}}}}})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The main difference is the addition of three pieces of configuration
that make this a true production build. The <code>:hooks</code> option causes
leiningen to run the <code>leiningen.cljsbuild/activate</code> function to let it
<a href="https://github.com/technomancy/leiningen/blob/master/doc/PLUGINS.md#hooks">hook into the defualt Leiningen tasks</a>.</p>

<p>Then <code>:omit-source</code> simply directs leiningen not to include the
clojure source files in the resulting uberjar, and <code>:aot :all</code> causes
the Clojure compiler to <a href="http://clojure.org/compilation">Ahead-of-time compile</a> all your clojure
code. The idea behind both these configs is to make your final uberjar
as lean and performant as possible, at the expense of some (probably
not needed) flexibility.</p>

<p>So that&rsquo;s it for Chestnut&rsquo;s <code>project.clj</code>. It looks intimidating at
first, but in the end it is quite approachable when you break it down
into it&rsquo;s component pieces.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing and the Structures of Learning Environments]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/05/06/testing-and-the-structures-of-learning-environments/"/>
    <updated>2015-05-06T09:22:53-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/05/06/testing-and-the-structures-of-learning-environments</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been fortunate this last year in getting to spend time in several
radically different learning environments in a relatively short span
of time. These experiences have gotten me thinking about the relative
pros and cons, also about how I respond to the amount of structure the
environment offers.</p>

<!--more-->


<h3>The University</h3>

<p>Okay, let&rsquo;s start off with the most structured of all, the
university. &ldquo;formal education&rdquo; is certainly the most structured of all
the environments I&rsquo;ve been in recently. Apart from the lower-levels of
the same system, I&rsquo;m having a hard time of thinking of a more
structured type of learning. I&rsquo;ve written before quite extensively
about specific problems I have with the established school system, so
I&rsquo;ll just leave it at that. However, university courses are highly
structured. They are actually required to by the nature of the
system. Even Fairhaven College, a place which essentially strives for
less structure only achieves that, less structure.</p>

<p>An excellent symbol (and indeed, a representation) of that structure
is the course syllabus. Contained in that one document are supposed to
be all the expectations and requirements for &ldquo;doing well&rdquo; in the
class. I noticed something towards the end of my college career. These
documents started getting more formulaic. In fact, they seem to be
approaching the type of jargon-ified meanings as &ldquo;lawyer-ese.&rdquo; For
instance, my university had a policy that no assignments could be
given to students during &ldquo;dead week&rdquo; - the week before finals -
<em>unless</em> the teacher had mentioned that it was possible in the
syllabus.</p>

<p>Because of this, many professors simply had a clause in their &ldquo;stock&rdquo;
syllabus that mentioned that there might be assignments due during
dead week, just to reserve the option. First of all, I have a problem
with a document that requires so much boilerplate that there can be a
&ldquo;stock&rdquo; version of it. Second, the system of rules and requirements
that caused teachers to always include a certain statement in the
syllabus regardless of their plans for the class, made the whole
system into a game, pitting students against each other, and often
also into opposition with their professors.</p>

<p>I resisted playing this game for a long time (most of my life
actually). After taking two years off from school when my mother fell
ill, I came back with a conviction that this game was a necessary evil
that I needed to play, and play well. So I did. I got excellent grades
in my last several quarters at Western in all of my classes, despite
taking heavy credit loads of all difficult classes. But I didn&rsquo;t learn
as much.</p>

<p>My normal method of doing school appears somewhat lackadaisical
compared to the studious diligence of many &ldquo;good&rdquo; students. But part
of the reason for this is that I tend to follow my interests, and go
well beyond what is being asked of me by the teacher. A classic
example was a paper I needed to write for a history class in high
school. I needed to do research on some historical topic, but on the
way I stumbled upon some fascinating information about dolphins. I
spent most of my evening reading and learning much about dolphins, and
not researching for the paper. My high school pre-Calculus teacher
summarized my attitude towards school by bestowing an award on me at
the end of the year: &ldquo;Highest Learning to Grade ratio.&rdquo;</p>

<h3>The Recurse Center</h3>

<p>At the opposite end of the structure spectrum we have the Recurse
Center. It is often difficult to explain to people exactly why I chose
to go to the Recurse Center last fall. I usually fall back on
paraphrasing the tag line from their website:</p>

<blockquote><p>The Recurse Center is a free, self-directed, educational retreat for
people who want to get better at programming, whether they&rsquo;ve been
coding for three decades or three months.</p></blockquote>

<p>The key part of that statement for me is the &ldquo;self-directed&rdquo;
portion. The vast majority of what I learned during my CS degree came
from entirely self-directed exploration so it seemed like a natural
fit.</p>

<p>But they are serious when they say self-directed. The structure of
their environment is at a very bare minimum. About as bare as you can
get I think and still build a sense of community around a shared
experience. The structure and workings of the Recurse Center have been
written about by many of the students as well as the people who run
it. But for comparison&rsquo;s sake, I want to mention the few structural
elements that make up the Recurse Center.</p>

<p>First, they spend a half day at the beginning of the batch with a
welcome meet-and-greet breakfast. This is followed by talks by the
founders and facilitators to &ldquo;set the tone&rdquo; and people&rsquo;s expectations
for the batch. These mostly consist of talking about what they want
the Recurse Center to be, and the lightweight social rules that they
follow to help achieve that. After that, there are a few logistical
matters like keycards and access to the chat client, but then you are
thrown head-first into being at the Recurse Center: i.e. sitting in
room with about 60 other people, and learning about programming.</p>

<p>There are a few more things, like the Monday night talks by the
current resident or other interesting person, or the daily checkins
with other RC&#8217;ers. But other than that pretty much everything is up to
the participants of the batch. If people want to organize a daily
reading group you can do that. Or you can find someone interested in
pairing on a project with you. Or you can go to a short
presentation/talk someone has decided to give.</p>

<p>If this sounds vague and confusing it&rsquo;s because of the lack of
structure. It sounds like a platitude, but spending three months at
the Recurse Center really can be whatever you want it to be. A lot of
people take some time to adjust to this looseness, and there are
facilitators whose job is precisely that, to facilitate people in
their self-directed learning. Whether that means brain-storming about
projects to work on, or giving code review, or pairing on a
particularly difficult problem their whole job is to be available to
help RC&#8217;ers make the most of their time their. As a bonus they get to
spend their days doing their own self-directed learning.</p>

<p>The structure - or lack thereof - of the Recurse Center was inspired
at least in part by the unschooling movement as talked about by Grace
Llewellyn. I&rsquo;ve <a href="http://www.zephyrizing.net/blog/2014/05/06/s-and-e-part-three:-the-teenage-liberation-handbook/">written before</a> about how I fell in love
with the idea of unschooling. But my time at the Recurse Center was
the first time I actually got to fully and intentionally practice
it. Three months was not long enough.</p>

<p>Despite the brevity of the experience, it did me a world of good. My
last year at college playing their game to the hilt sort of killed
something in me. I stopped enjoying programming, and I stopped seeking
out learning on my own as much. Killed is a rather strong word but
that&rsquo;s how it felt. Maybe it would be more appropriate to say that it
simply wore me out. I had no energy, no <a href="http://www.zephyrizing.net/blog/2014/05/01/s-and-e-part-two:-gumption/">gumption</a> left to put into
anything. At the Recurse Center though, I built massive amounts of
gumption. So much so that I haven&rsquo;t seriously found myself lacking it
since. If for only that reason, the Recurse Center was the perfect
antidote to my time at university. And I rediscovered my joy in
programming.</p>

<h3>8th Light</h3>

<p>Now I&rsquo;m an apprentice at 8th Light. I sought out 8th Light primarily
because of their apprenticeship program, and the remarkable similarity
it bore to <a href="http://www.zephyrizing.net/blog/2014/06/07/s-and-e-part-seven:-onward/">my own idealized conception</a> of how to teach
someone how to program.</p>

<p>It is sort of a fascinating and fortuitous coincidence that the amount
of structure here is in between that found at the Recurse Center and
in universities. Whether it is actually &ldquo;just right&rdquo; remains to be
seen. So far the balance between guidance and self-directed
exploration has been fairly ideal. Having weekly check-in&rsquo;s with my
mentors puts a firm bound on how long I might drift without
purpose. Though I haven&rsquo;t found that to be a problem here, it was
definitely something I needed to be mindful of during my time at the
Recurse Center. I also find it helpful to have a direction set for me,
with concrete and achievable tasks to mark the route.</p>

<p>One interesting thought I&rsquo;ve had recently is an analogy between the
structure of these various learning environments and software testing.
I think that the Recurse Center is much like the undisciplined hacking
on a pet project. There may be tests, but they are impromptu and
somewhat haphazard. More projected onto the structure of the code
after completion than designed into it from the beginning. You can get
a lot done in this fashion, but it&rsquo;s also easy to get lost in the
weeds (though this is largely the point as far as many RC&#8217;ers are
concerned).</p>

<p>A university degree program is then more like poorly executed TDD. The
tests are written first - mostly. But they are written with a mind to
<em>how</em> the task will be accomplished and are tightly, almost
inextricably, coupled to the implementation. They define a rigid but
currently stable and verified system. But woe betide the person who
tries to change anything, because much of the code and all of the
tests will break.</p>

<p>8th Light then is TDD done well. The tests are written first and they
specify the behavior of the system, not the implementation. The
desired goal is achieved through (rapid) iteration and feedback.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iteration Two: Refactoring and Minimax]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/04/29/iteration-two-refactoring-and-minimax/"/>
    <updated>2015-04-29T09:50:55-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/04/29/iteration-two-refactoring-and-minimax</id>
    <content type="html"><![CDATA[<p>I&rsquo;m just about finished with my second iteration as an apprentice at
8th Light. Where my first iteration centered a lot around reading and
learning how TDD and Ruby work, this week I focused more on coding. I
spent most of my time just implementing the several stories of my
iteration: some minor (but important!) output tweaks, implementing a
play again loop, and adding two AI&rsquo;s to the game. I also did quite a
bit of refactoring and general code cleanup.</p>

<!--more-->


<p>I spent several hours figuring out the mechanics of doing an extract
class refactoring, and then realizing that I had extracted the class
the wrong way and so the &ldquo;container&rdquo; class was the one being held by
it&rsquo;s containee.  It turned out to be very awkward to try to invert
this relationship so I backed out the change and extracted the other
class so that the container/containee relationship was correct. I
consulted Martin Fowler&rsquo;s <em>Refactoring</em> book heavily here. It&rsquo;s really
neat how the mechanical steps he describes are actually an incredibly
useful guide.</p>

<p>I noticed an interesting thing while I was refactoring. I was changing
the code so much that I started losing track of what was actually
going on. At some point, my brain just sort of gave up on trying to
hold the whole application in my head. This was an interesting
experience because usually I can hold more complexity in my head than
this Tic Tac Toe game currently has. I think this is part of the trend
I noticed that in general, when doing TDD I feel less need to hold a
lot of the complexity in my mind at once.</p>

<p>The slightly scary flip-side of that was that because I was doing
extract class refactorings and moving methods and such, I also ended
up moving tests around and modifying the tests a lot to keep them
working. Mucking around with them seriously decreased my confidence in
them, and thus in my confidence in the system as a whole. Clearly I
need to think more about how the test modification process goes along
with refactoring.</p>

<p>Another piece of functionality that took me surprisingly long to
implement was the play again functionality. The interesting part of
that process was that I wrote tests, and then wrote an implementation
that I thought was correct. The tests failed in a confusing manner and
so I assumed that the tests were incorrect. After poking around for
quite a while, firing up the debugger (<a href="http://pryrepl.org/">Pry</a> and <a href="https://github.com/deivid-rodriguez/pry-byebug">byebug</a> are
awesome!) I eventually discovered that the test was correct, and it
was even failing exactly correctly. I had simply forgotten to take
into account that once a game has been completed, one can&rsquo;t just start
playing it again from the beginning. So I had to write a reset method.</p>

<p>On Tuesday I spent most of the day test driving my way to a perfect
AI. This was an interesting experience since it was the first time
I&rsquo;ve had a really clear idea of where I wanted to go with the code
while doing TDD. For the most part I&rsquo;ve been trying to stick to the
letter of the acronym and let the tests lead me to the code
organization they want.</p>

<p>But the <a href="https://en.wikipedia.org/wiki/Minimax">minimax</a> algorithm is well known and an established way to do
the game state-space search that is required for a perfect Tic-Tac-Toe
AI. So how does one test drive that? Apparently I am most definitely
not alone in asking this question as both my mentors were expecting
it, and my fellow apprentice working on Tic-Tac-Toe (Ari) also spent
time last week puzzling over it.</p>

<p>I worried about it briefly at the start of the day, but then I quickly
adopted the outlook that I&rsquo;ve found to be most successful with TDD;
don&rsquo;t think too much about the future. Instead, I focused on the
fundamentals. What&rsquo;s the simplest case an AI needs to deal with. I
turned to the Wikipedia page on Tic-Tac-Toe and it&rsquo;s bullet list of
how to be a perfect player. The most important rule is that an AI
should win immediately when it can. If that&rsquo;s not possible it should
block an opponent from winning.</p>

<p>These two situations are very easy to detect. It only takes a slight
modification to the code pattern used for detecting if someone has
already won, and no future board states need to be taken into
account. This approach got me moving forwards, which is often the
hardest part.</p>

<p>Once I had some momentum I kept going by then considering simple fork
creation, the next most important move type. After pondering how this
might work, I hit upon a simple solution. A fork is just a move that
results in a board where you have two possible ways to win! This was
attractive to me for several reasons. First, it was a (relatively
small) step towards searching the state-space of the game. By looking
one move ahead I felt I was moving in the direction of minimax. And it
was simple enough that it felt doable in a single TDD step.</p>

<p>This worked shockingly well. Not only did my very simple fork
look-ahead detect most forks that it could create, somehow it actually
was able to produce the correct fork-blocking behavior in the first
four cases that I came up with.</p>

<p>I was suspicious though, and so I crafted some devious fork tests that
were designed to expose the flaw in my simple algorithm. Eventually I
did that and it became clear that something more powerful was
needed. At this point, thinking about the simplest way to do things
produced no clear results. I was already doing a minimal look-ahead
and the analysis was insufficient. It seemed that the next step would
have to be going to a minimax algorithm. Here&rsquo;s basically what my
simple algorithm was at this point:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>    <span class="n">get_wins</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">indexed_attack_sets</span><span class="p">)</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">find_forks</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'>    <span class="n">scores</span> <span class="o">=</span> <span class="n">board</span><span class="o">.</span><span class="n">empty_spaces</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="n">node</span> <span class="o">=</span> <span class="n">board</span><span class="o">.</span><span class="n">speculative_move</span><span class="p">(</span><span class="s2">&quot;X&quot;</span><span class="p">,</span> <span class="n">index</span><span class="p">)</span>
</span><span class='line'>      <span class="o">[</span><span class="n">index</span><span class="p">,</span> <span class="n">score</span><span class="p">(</span><span class="n">node</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">scores</span><span class="o">.</span><span class="n">max_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="p">,</span> <span class="n">s</span><span class="o">|</span> <span class="n">s</span> <span class="p">}</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_move</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'>    <span class="n">attacks</span> <span class="o">=</span> <span class="n">board</span><span class="o">.</span><span class="n">indexed_attack_sets</span>
</span><span class='line'>    <span class="n">win</span>   <span class="o">=</span> <span class="n">get_wins</span><span class="p">(</span><span class="n">attacks</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>    <span class="n">block</span> <span class="o">=</span> <span class="n">get_blocks</span><span class="p">(</span><span class="n">attacks</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">win</span> <span class="ow">or</span> <span class="n">block</span> <span class="ow">or</span> <span class="n">find_forks</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I tried to do get to minimax in several ways. First off, I actually
ended up using the <a href="https://en.wikipedia.org/wiki/Negamax">negamax</a> algorithm because it&rsquo;s simpler to code
because it takes advantage of the zero-sum property of
Tic-Tac-Toe. Initially, I tried to replace my whole algorithm with
negamax right off the bat. This did not work out well. Things got
complicated and many tests were failing. So I backed out and treated
negamax as a small refactoring. Specifically I treated it as a
refactoring of the <code>find_forks</code> function. This worked quite well, and
suddenly all of the forks tests were passing. I then incrementally
expanded it until negamax was the only thing being used for deciding
which moves to make.</p>

<h2>Clojure TDD</h2>

<p>I also spent some time pairing with both Emmanuel and Kristen on some
Clojure katas, the bowling game and coin changer respectively. This
was really fascinating for a couple of reasons. I consider myself
reasonably competent with Clojure. But I am almost totally unfamiliar
with trying to do TDD in Clojure.</p>

<p>The pairing that I did with both my fellow apprentices was in the
Ping-Pong style (mostly), where one of us wrote a test and the other
tried to make it pass. What was fascinating to me was that the
incremental development approach that this enforces pushed me towards
writing very non-idiomatic, highly stateful Clojure code.</p>

<p>After attempting the coin changer with Kristen, I was starting to
doubt my Clojure-chops and so I tried to TDD it out on my own. I ended
up arriving at a more satisfactory solution that used a stream model
of discrete state transformations. So a cleaner stateful solution.</p>

<p>I ended up talking about this with Emmanuel after our pairing session,
and he showed me a blog post and a screencast about doing the bowling
kata in Clojure. Both people ended up with similar solutions, which
basically involved the insight that a frame in bowling is only two
rolls when no strikes or spares are involved. In retrospect, this
seems sort of obvious, since a frame can&rsquo;t be scored until all of it&rsquo;s
rolls have occurred. But combining this with actually duplicating some
of the numbers from the stream of pin-counts is what leads to an
elegant Clojure solution.</p>

<p>Besides this key realization, I think I was also missing a critical
tool in my Clojure toolbox: custom lazy sequences. Both solutions
Emmanuel had found on the web ended up constructing a function that
produced a custom lazy sequence. This was necessary because of the
need to repeat certain elements from the stream.</p>

<p>But what I&rsquo;m realizing now is that I think it&rsquo;s difficult to test
drive recursive solutions. But maybe I&rsquo;m just doing it wrong. Often
when I write recursive functions I don&rsquo;t bother to write just the base
case first. I typically will just jump straight in and write both
parts at once. But now that I think about it, testing the base case of
a recursive algorithm would be really natural in TDD. You just have to
start at the simplest case.</p>

<p>Another thought that occurred to me about why TDD in Clojure is
harder. In Ruby or Java I have read about different design patterns
and there are established refactorings for manipulating class-based OO
code. So when I&rsquo;m doing TDD in those languages I know the patterns of
it. Not patterns in the design patterns sense, but the flows of code
configurations you might say. Specifically, I&rsquo;m familiar with the
intermediate stages and I can imagine them.</p>

<p>But the way I write functional code is somewhat different. Most of the
time, I experiment with a small piece of code in the REPL, until I&rsquo;ve
produced the result I want, then I wrap it up into a function. This
process can proceed top-down where I conceive of the top-level
function first and then create the necessary pieces to make that
happen; or it can go bottom-up where I think about little pieces of
functionality in the domain I&rsquo;m considering, and then start composing
those pieces to make more complex things.</p>

<p>In both of these styles of development, there isn&rsquo;t always working
code at all times though. In particular, the interesting sort of
high level behaviors often don&rsquo;t work until the whole thing comes
together at the end.</p>

<p>So I think I need at least two things before I can do TDD in Clojure
more effectively. I need to learn the patterns of Clojure code better,
and get more familiar with how it can be molded and changed from
simple and ill-factored to cleaner and well-factored. And second, I
need to adjust to the paradigm shift of thinking about code tests
first in a functional context.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Editors and Their Benefits]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/04/16/on-editors-and-their-benefits/"/>
    <updated>2015-04-16T00:58:26-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/04/16/on-editors-and-their-benefits</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using Emacs for about as long as I&rsquo;ve been programming. So
that makes it nearly eight years now. I like to think that I&rsquo;ve gotten
reasonably competent with it, and somewhat more importantly, I have
customized my emacs to fit my mind like a glove.</p>

<p>I also touch type, but I use the Dvorak keyboard layout. These two
things combine to make it so that I can write programs at a speed
close to how fast I can conceive them. This is important, not because
it means I can code faster than other people, but because it means I
can get the thoughts out of my head fast enough that they don&rsquo;t slip
away.</p>

<p>This was brought into sharp relief for me a few days ago when I did
some pairing with my mentor Zach using his computer. You see, Zach
uses the standard QWERTY layout, and he also uses Vim.</p>

<!--more-->


<p>It seems that the accepted wisdom about pair programming is that it
works best when two people share the same computer, and swap control
of the keyboard back and forth. Some sources even recommend having two
sets of keyboard/mouse to lower the barrier to switching even further.
In the spirit of being open to trying new things I acquiesced to
Zach&rsquo;s implicit expectation that I would use his computer with QWERTY
and Vim.</p>

<p>It&rsquo;s been a long time since I&rsquo;ve seriously attempted to use
QWERTY. When I first taught myself to touch-type in Dvorak I tried to
maintain some proficiency with QWERTY since it is ubiquitous. But I
soon discovered that it was hard to keep both locations for keys in
muscle memory at the same time. And that&rsquo;s really where efficient
touch typing requires that knowledge to reside. When you have to
consult your memory for the location of key, you&rsquo;ve already lost a lot
of your speed.</p>

<p>Luckily for me, I could keep on typing QWERTY as I always had; that
is, by looking at the keyboard constantly and lifting my fingers high
enough off the keyboard that I could see the letters.</p>

<p>Muscle memory is important to my usage of Emacs too, and it builds
heavily on my Dvorak muscle memory. Emacs has a (deserved) reputation
for having a somewhat absurd number of key bindings. Trying to
remember them directly would be a monumental task. Instead, the most
commonly used key bindings migrate quickly from the realm of conscious
thought to muscle memory. I didn&rsquo;t even notice this happening until I
started trying to teach a friend of mine to use Emacs. Some of the
commands that I use, I know only by their location on the keyboard.
Given that I type in Dvorak and the keys are labeled in QWERTY this
means that the actual character I&rsquo;m pressing is pretty opaque.</p>

<hr />

<p>When is proficiency or familiarity with a tool more important than
other considerations?</p>

<p>First let&rsquo;s look a bit at what those other considerations might
be. The first one that comes to mind is that using the same tools as
the team you&rsquo;re working on can be pretty important. Or maybe there is
another tool that has much more powerful or focused facilities for the
task/language/domain. Or to reverse that, possibly your tool of choice
simply lacks something that a lot of other tools support. Finally, I
think a really important consideration is whether you are holding on
to your tool(s) of choice out of habit and the comfort they provide.
Let&rsquo;s look at some examples of each of these.</p>

<p>A few years ago I was hired as an intern at Sage Bionetworks, a small
bio-tech start-up in Seattle. They happen to be an all Java shop,
and the standard editing environment there is Eclipse. At the time, I
was much less familiar with Emacs, I had never even opened Eclipse and
I didn&rsquo;t know any Java.</p>

<p>I spent my first few days getting through the administrative details
of starting a new job. But pretty quickly I got to the point where I
needed to setup my new computer for doing development on the Sage web
platform. They had a wiki, with several different pages on the
bootstrapping process for the various different aspects of the
process. A significant portion of it was focused on getting your
Eclipse installation setup correctly, with all the right plugins and
such.</p>

<p>Being totally in love with Emacs at that time, I determined that I was
going to figure out how to setup Emacs as a kick-ass Java editing
environment. My mentor was grudgingly amenable to this plan of
action. I struggled with that problem for a few days, until my mentor
came back and strongly suggested that I use Eclipse. His rationale was
essentially that this was the tool that the whole team had
standardized on. Since no one else really used the command line tools
to build or test the product I would be largely on my own in getting
things to work.</p>

<p>I gave in, and learned to use Eclipse. I made it bearable by
installing a plugin that simulated Emacs key bindings. I learned there
were some nice things about Eclipse - the automatic versioning, the
Java refactoring tools. But I also found it to generally be a vastly
inferior tool. While Eclipse has an extensive ecosystem of plugins and
add-ons, installing them is a nightmare of clicking through GUI menus
and needing to restart possibly several times. It is also highly
customizable, with good support for key maps and visual
modifications. However, neither your personally installed add-ins nor
your configurations can be saved in a reasonable way, and there is (as
far as I know) no way to automate the setup process. So every time you
move to a new development machine, you need to go through the same
process. Or, more likely, go through a very <em>similar</em> process, and
end up with a subtly different dev environment.</p>

<p>But I did get the benefit of being able to get the advice of the other
devs on the team when something wasn&rsquo;t working with my build. This
turned out to be critical since the process of getting a working (and
repeatable) build of their software was a highly non-trivial one.</p>

<p>When I was working with Zach last week and ended up using Vim with
QWERTY, he said something to me that reminded of my mentor&rsquo;s words at
Sage. He said that a lot of people at 8th Light use Vim, and that if I
want to do a lot of pairing with people it will probably be to my
benefit to learn how to use Vim at least a little bit.</p>

<p>This makes more sense in an environment where pairing is actively
practiced, but the general idea behind it is basically the prospect of
being able to sit down at someone else&rsquo;s computer and use it for
development at a reasonable level. I&rsquo;m not sure that I agree with this
philosophy though.</p>

<p>One place where being able to use any given computer is key is as a
sysadmin. My college&rsquo;s CS department started participating in a
national competition during my second year, the Collegiate Cyber
Defense Competition or CCDC. The competition itself basically places
several teams of students in the role of a new system administration
team for some large corporation. The system is potentially in disarray
after a poorly documented transition from a previous team and the
students task is to secure the systems while maintaining a given level
of availability for one or more different services (such as email,
databases, servers, etc.).</p>

<p>I was very interested in participating in the club that was preparing
for the competition because they were learning both defensive and
offensive computer security skills. But I found it difficult to work
in the context of system&rsquo;s administration because I couldn&rsquo;t have my
environment setup just how I wanted it. Particularly during the
competition itself, there would be no time to try and install Emacs
(which is both large in footprint and memory usage and requires a ton
of dependencies), or switch the terminal at the computer I was using
to Dvorak. Thus I found that two choices I had made years before had
effectively precluded my participation in the CCDC.</p>

<p>Interestingly, my choice to learn the Dvorak layout is actually what
pushed me into learning Emacs. I had just gotten to the point of
actual touch-typing with Dvorak when I decided it was time to switch
from using PythonWin to a &ldquo;real programmer&rsquo;s editor.&rdquo; Based on what I
had been reading on the internet, that choice seemed clear: it had to
be Vim.</p>

<p>But I was stalled almost immediately. Vim uses the letters &lsquo;h&rsquo;, &lsquo;j&rsquo;,
&lsquo;k&rsquo;, and &lsquo;l&rsquo; for text navigation, so you don&rsquo;t need to move your hand
to the arrow keys.  This is convenient for usage under QWERTY, all
four keys are on the home row and are easily accessible - without
stretching - to your right hand. But on Dvorak they are all over the
keyboard, and there is no mnemonic for telling which key does
what.</p>

<p>I struggled with Vim for a few days, trying to learn how I could remap
the movement keys to the same location under Dvorak as they are in
QWERTY. But I was unable to find a solution and the prospect of the
cascading key remappings was enough to drive me to look at Emacs.  By
contrast with Vim, most of the keys in Emacs have some kind of
mnemonic association. Moving forward a character is <code>ctrl f</code> and back
is <code>ctrl b</code>. Down one line is <code>ctrl n</code> and up is <code>ctrl p</code> for next and
previous. Not only that, but part of the very philosophy of Emacs is
easy customization, up to and including remapping every key on your
keyboard to do something different. More importantly, that philosophy
of customization is embedded in the Emacs community.</p>

<p>The seemingly simple choice of learning to type in Dvorak turned out
to be a key decision in my life as a programmer. It cut off certain
possibilities like learning to use Vim, and presents certain
challenges for pair programming, particularly in the quick
back-and-forth style where two people use the same computer. I have
also found that using Emacs appears to be the less common of the two,
and this is also limiting and isolating to some degree.</p>

<p>Here&rsquo;s the thing though, I <em>like</em> using Emacs; and typing in Dvorak
feels good to my fingers. So I&rsquo;m a little bit stuck. I want to be
agreeable and able to collaborate and pair program with others
easily. But I also really like the tools that I use. They fit me. So
what do I do?</p>

<p>One possibility is to use more tools to overcome some of my
difficulties with pairing. Specifically, using a lightweight version
control system (like git) and a free code hosting site (like, say,
Github) you can arrange a style of pairing where two people work on
the same code, but each using their own device and tools and
setup. Pairing is the same during the actual coding process with
whatever Driver/Navigator or other dynamic you want to use. The
difference comes when you swap. Instead of simply sliding the keyboard
across to your partner, you commit, and push to your central
repository. Your partner then pulls down the latest code and starts
working on their machine. This is certainly a bit more work than just
handing off the keyboard, so it may not be suitable to very rapid
hand-offs. But I haven&rsquo;t found it to be overly onerous so far.</p>

<p>Another solution would be for me to maintain some skill at QWERTY and
Vim specifically for facilitating pairing. While more work for me
personally, it has the benefit of not requiring a new pairing
workflow. But this idea worries me a bit.</p>

<p>The human brain is <a href="https://en.wikipedia.org/wiki/Neuroplasticity">amazingly flexible</a>. My favorite
personal example of this is related to video games and how we control
them. Every first-person style game has at least one key setting in
the control options: whether the way you look upwards is by moving the
mouse or tilting the control stick upwards (usually known as &ldquo;default&rdquo;
or &ldquo;normal&rdquo;), or whether this mapping is &ldquo;inverted&rdquo; i.e. tilting up
looks down and tilting down looks up. My best friend and I have played
a lot of Halo together in our day. For a long time one of our favorite
pastimes was playing through Halo 2 levels on Legendary difficulty,
often with skulls active. Here&rsquo;s the thing though: he plays default,
and I play inverted.</p>

<p>Under most circumstances this doesn&rsquo;t matter. If we&rsquo;re playing
cooperatively it doesn&rsquo;t matter because we both have our own
controller and thus our own setting. It only becomes an issue when we
are handing a controller back and forth. But boy is it a problem
then. Invariably we both forget to switch back at the hand-off and
there ensues a brief period of confusion and panic when the game
character doesn&rsquo;t respond as our brain is wired to think it
should. What&rsquo;s really fascinating though is how quickly my brain
starts to retrain itself.</p>

<p>I&rsquo;ve been playing games on inverted for years, possibly decades at
this point. As such you would think that my brain is very much
hardwired to expect that when I tilt the stick up, the view will move
down. And this is true. But sometimes, for one reason or another I&rsquo;ll
end up playing for a short time on the default setting. What happens
is remarkable and incredibly frustrating. If I focus on trying to
remember that up means up and down means down, I can usually get to a
level that is usable - at least when I pay full attention. But as soon
as something intense happens like a bad guy jumping out from behind a
bush, my reflexes revert to inverted settings. Even more interestingly
though, when I inevitably switch my control scheme back to inverted I
am unable to fully shed the tendency towards trying to play with
default look controls.</p>

<p>Back to keyboard layouts and editors. In short, I&rsquo;m concerned that an
attempt to learn how to use QWERTY again and to memorize Vim keyboard
shortcuts will seriously undermine my ability to use Emacs effectively.</p>

<p>On the other hand, maybe this is just what I need. I&rsquo;m also currently
trying to learn how to do Test Driven Development (TDD) and I&rsquo;m
finding that a lot of the thought-habits I have around programming are
actually detrimental to doing TDD. Maybe breaking out of my
comfortable Emacs environment and using a new keyboard layout will
help me get into a totally new frame of mind and let me TDD more
effectively.</p>

<p>I think there is another reason to embrace the idea of learning a new
set of tools at this time though. A large part of the reason that I
wanted to do this apprenticeship with 8th Light was to learn. Learning
from others always requires some humility; at the very least you have
to be able to admit that there are things that you do not know. This
is difficult for me. But possibly, intentionally cultivating
<a href="https://en.wikipedia.org/wiki/Shoshin">Shoshin</a> or &ldquo;beginner&rsquo;s mind&rdquo; regarding my most basic level
of programming - how I edit my source code - will help me do it at all
levels.</p>

<blockquote><p>In the beginner&rsquo;s mind there are many possibilities, in the expert&rsquo;s
mind there are few. - Shunryu Suzuki</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning TDD]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/04/14/learning-tdd/"/>
    <updated>2015-04-14T14:37:34-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/04/14/learning-tdd</id>
    <content type="html"><![CDATA[<p>This is my first week at 8th Light and I&rsquo;ve been working on writing an
object-oriented Tic Tac Toe program.  This would be no big deal for
typically, even though I&rsquo;m doing it in a language I&rsquo;m unfamiliar with.</p>

<p>Except! I&rsquo;m trying to very rigorously drive the development with
tests.</p>

<!--more-->


<p>This is a fairly new experience for me. I mean, sure, when I first
read about TDD a while ago, I got really interested and excited about
it. I played with it a little bit, and tried to do some small stuff in
it. But I quickly got overwhelmed with the difficulty of &ldquo;How do you
even get started?&rdquo;</p>

<p>Monday, I made very minimal progress. I felt stuck not really sure
where to begin, and what to do. I ended up by basically writing tests
for a simple Board data class where I could make marks, and then see
that the marks were actually set. This felt highly unimpressive as the
output of my first day.</p>

<p>Tuesday and Wednesday I made some more progress. The thing that helped
for most was certainly reaching out for guidance from my mentors. I
had a good conversation with Brian. Despite it&rsquo;s somewhat brief and
vague nature it actually was very helpful. And I did some pairing with
Zach that really helped on the Ruby comfortability front. Just seeing
how someone who knows how to use Ruby approaches things made me feel
more confident and grounded in the language.</p>

<p>I also did quite a bit of Googling and reading about Ruby concepts and
paradigms. There wasn&rsquo;t anything really specific that I was looking
for, I was just trying to absorb some of the context of the community
by seeing what is talked about and the sorts of code snippets that are
out there. To an outside observer this probably seemed mostly like
procrastinating. To be fair, I sort of judged it that way myself.</p>

<p>The thing is though, in all my professional software development work,
I&rsquo;ve noticed that whenever I end up procrastinating and sort of
&ldquo;working around&rdquo; a difficulty I&rsquo;m having a peculiar thing happens. If
I try to force myself to face it head on and work at it, nothing
really good comes out of it. Often I just end up feeling stuck and
then I&rsquo;m really unproductive, just staring at the keyboard.</p>

<p>But I find if I just relax into the procrastination, and try to stay
working on related things, that eventually everything sort of gels in
my mind, and then when I come back to the &ldquo;hard&rdquo; thing I&rsquo;m usually
able to make some useful headway.</p>

<p>Today was that day for TDD in Ruby; I felt like everything sort of
came together. I came into work determined not to &ldquo;procrastinate&rdquo; like
I did for much of yesterday. I started off by starting to test drive a
Console or display class. But I quickly realized that this would just
be a thin wrapper on top of the IO class that already exists in Ruby!
So I went back to implementing my game class, and used mocks to
replace an instance of an IO class.</p>

<p>From there I got into a very nice flow. Even the tricky nature of
testing the main game loop didn&rsquo;t seem overly difficult in my mind. By
the end of the day I had gotten to the point where I couldn&rsquo;t really
think of any more functionality that would be needed to play an actual
game at the command line.</p>

<p>When I wired up the class to finally actually test it from end to end
and try to play a game, there were some unexpected problems. But the
basic logical structure of the game was pretty much entirely
correct. And I knew it would be, because of the tests that I wrote.</p>

<p>Very cool.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shaving the Clojurescript Yak(s)]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/04/04/shaving-the-clojurescript-yaks/"/>
    <updated>2015-04-04T13:08:18-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/04/04/shaving-the-clojurescript-yaks</id>
    <content type="html"><![CDATA[<p>About a week ago I got fed up with a <a href="http://mangafox.me/">terrible website</a> that
had comics on it I wanted to read.  So I decided to write a little web
app to make the reading experience more pleasant. Since I&rsquo;m an avid
<a href="http://clojure.org/">Clojurian</a>, I&rsquo;ve been interested in checking out
<a href="http://clojure.org/clojurescript">Clojurescript</a> for doing web development, and in particular
exploring the wonderful new world of React.js wrappers available in
Clojurescript. This is the story of how I learned to setup a
Clojurescript project.</p>

<!--more-->


<p>Since I&rsquo;ve been interested in Clojurescript for a while, and even
toyed with it a few times, I came into this project with at least a
fair idea of what was out there. I knew about Om, and new basically
how the Clojurescript compilation process worked. I also am vaguely
comfortable with setting up a basic Clojure web app using <a href="https://github.com/ring-clojure/ring">Ring</a>
and <a href="https://github.com/weavejester/compojure">Compojure</a>.</p>

<p>I was also aware that there had been significant advances in the
Clojurescript workflow in the past few years. Most importantly I knew
about an apparently awesome Leiningen project template for
Clojure/Clojurescript web apps called <a href="https://github.com/plexus/chestnut">Chestnut</a>. However,
the times that I had tried to get up and running with Chestnut
previously I was totally overwhelmed by the amount of unfamiliar
code/configuration that it produced. Quite frankly, it seemed
excessive, and quickly led to me giving up on whatever
project-of-the-moment had inspired me.</p>

<p>So! This time, I determined to not start with Chestnut, and instead
build up slowly from the basic Lein app template that I was already
familiar with. And so commenced roughly five full days of mostly
yak-shaving. I&rsquo;m not going to try and recount it all here; just the
highlights will be more than enough.</p>

<h2>How I Shaved My Yak</h2>

<p>I started with off with a very vanilla <code>lein new app
comic-reader</code>. From there, I copied the basic dependencies for a
jetty/ring/compojure web app from my <a href="https://github.com/RadicalZephyr/url-shortener">url-shortener</a>
project. I made some basic routes to make sure everything was working
correctly.</p>

<p>Next came adding Clojurescript into the project. This meant setuping
the <code>project.clj</code> to point to where the <code>*.cljs</code> files would live, and
then configuring the Clojurescript compiler.  Basic Clojurescript
compilation with <a href="https://github.com/emezeske/lein-cljsbuild">lein-cljsbuild</a> is not totally trivial to
configure, especially since there are now many different options to
the Clojurescript compiler and many resources on the web have
older/outdated configuration examples, and typically no explanation
whatsoever of why they have it configured they way they do. But
overall it wasn&rsquo;t too tough. It helped significantly that I could
again copy setups I had previously found to work.</p>

<p>At this point, I was sick of shaving Yaks for a moment so I went and
learned how to use <a href="https://github.com/cgrand/enlive">Enlive</a> for doing
<a href="https://github.com/swannodette/enlive-tutorial#an-introduction-to-enlive">web scraping</a>! Then, feeling refreshed, I went back to the
Yak.</p>

<p>I knew that I wanted the awesome <a href="https://github.com/bhauman/lein-figwheel">Figwheel</a> plugin for an awesome
(mostly) reload-less Clojurescript experience. Again, Figwheel comes
with a Lein template that I didn&rsquo;t use directly. Instead, I made an
extra copy and then used it as a reference for when my configuration
based on reading the documentation didn&rsquo;t work.</p>

<p>Next step was adding in Om, and making a basic page setup
there. Again, nothing incredibly hard. I mostly just followed the
tutorial and everything came together fairly quickly. Only maybe an
hour of struggling and cursing at my computer. Then, I decided that I
wanted to build a single-page application (SPA). So I started looking
at libraries like <a href="https://github.com/gf3/secretary">Secretary</a> and
<a href="https://github.com/r0man/sablono">Sablono</a>. Eventually, after reading several blog posts and
pages of documentation, I decided that I actually wanted to use
<a href="https://github.com/reagent-project/reagent">Reagent</a> instead of Om. Luckily I hadn&rsquo;t written much actual
code before I came to that decision.</p>

<p>After playing with Reagent for a while, I started having difficulty
with thinking about how to use it as the basis for a SPA, especially
with in-browser routing happening, and changing the history token so
that different app states would be bookmark-able. (N.B. I&rsquo;ve minimized
the explanation of this considerably. I spent a good chunk of time
wrestling with getting history integration working with Reagent before
realizing that Reagent&rsquo;s flow didn&rsquo;t make any damn sense to me.)</p>

<p>Back to the Google! After quite a lot of searching, sleeping, reading,
and searching again I found <a href="https://github.com/Day8/re-frame">re-frame</a> and it&rsquo;s epic
manifesto. After reading the whole damn thing (and all of the
&ldquo;read-this-first&rdquo; links), I decided that I would switch from vanilla
Reagent to re-frame. Again, thank goodness I hadn&rsquo;t really written any
significant code that was tightly coupled to reagent.</p>

<p>At this point, most everything worked pretty nicely, but there was
some significant ugliness about. I had my Figwheel configuration
inline in the same file as my main site code, and the clojurescript
configurations for production and dev were getting quite messy. After
incrementally gaining experience with most of the gaggle of
technologies that Chestnut uses, I felt prepared to tackle their
template again. So I started using it as a reference to enhance my own
configuration.</p>

<p>In particular, I started doing this when I wanted to deploy my app to
Heroku. It turns out that there are a whole raft of things that where
wrong with my configuration from Heroku&rsquo;s point of view. But after
about two hours of compare/edit/deploy cycles, I finally managed to
deploy my app to Heroku.</p>

<h2>Wrapping Up</h2>

<p>To sum it all up, while this was in some ways a very frustrating
exercise (especially at times during the process!), overall it was
also a really excellent learning experience. Too often I try and
approach too many new things all at once. This often leads quickly to
getting overwhelmed by all the new-ness, and then often giving
up. It&rsquo;s not a great pattern.</p>

<p>The longer that I practice programming, the more firmly I come to
believe that incremental, evolutions of projects and knowledge are
fundamentally more approachable, sustainable and, quite simply, more
fun!</p>

<p>Now I&rsquo;m feeling sort of pumped to do an &ldquo;Annotated Chestnut&rdquo;
walkthrough of what all the various configurations in Chestnut are
doing, and why they are useful and cool.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two Days In]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/04/02/two-days-in/"/>
    <updated>2015-04-02T23:34:05-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/04/02/two-days-in</id>
    <content type="html"><![CDATA[<p>It&rsquo;s only been two days and already a lot has happened, so it seemed
like time for an update.  Oh, BTW since I haven&rsquo;t mentioned it on my
blog before, I just moved to Chicago to work at <a href="http://8thlight.com/">8th Light</a>.</p>

<p>I arrived in Chicago on Tuesday afternoon/evening and had an
uneventful time finding my Airbnb in Edgewater on the north side of
Chicago.  I spent the evening searching house listings on Craigslist
and Zillow, and sending emails trying to schedule viewings for the
next few days.</p>

<!--more-->


<p>Wednesday, and today I spent looking at different units.  Wednesday
was mostly sort of disappointing, especially in the kitchen
department.  But there was one unit that had a good location, and very
nice amenities and layout; except for the kitchen was long and narrow
and sort of awkward looking.</p>

<p>Today started out looking like more of the same, until my 3rd and 4th
viewings.  The 3rd place I looked at was right across the street from
the best one from Wednesday, except it was two bedrooms, and a much
more reasonable kitchen for only slightly more money.  This seemed
like a clear win, and I very excitedly applied for it immediately
after I left.</p>

<p>I kept my final appointment of the day mostly out of politeness and
curiosity.  I really had no expectations for it, since the pictures in
the Craigslist ad had been sort of iffy.  But walking into the space I
was pretty blown away.</p>

<p>This is what I wrote about it after seeing it (admittedly, several
hours after seeing it). The TL;DR is that it&rsquo;s really quite awesome.</p>

<blockquote><p>Beautiful high ceilings with gorgeous detail work.  Several built-in
pieces of furniture including a floor to ceiling hutch in the dining
room/kitchen with a glass paneled portion and a lower area with
several full-width drawers.  There is also a built-in dresser in the
bedroom closet (which is large and walk-in, and has shelves REALLY
high).</p>

<p>The living room area is large and has great windows and light, with an
alcove-ish area perfect for a desk/work area.  It’s on the third floor
of a house where each level is a unit (called a “three-flat”).</p>

<p>The owner lives in the ground floor, another couple in the middle.
there is an attic above me with some possibility of storing some stuff
there.  Two entrances, front and back.  Front has an interior
staircase with a landing at the top, perfect for shoe/coat storage.</p>

<p>The bedroom is a very nice size (not too big, not too small) and it
has fewer windows so it’s not incredibly bright.  Yet still has a
reasonable amount of light so it’s not cave-like.</p>

<p>The biggest downside is the kitchen which has some awkwardness to the
layout (counter space is separated from the range by the fridge, and
the sink is on a different wall altogether.  But the sink is awesome
old pewter with a built-in dish drying area (slanted and grooved and
with a lip).  No dishwasher.  But plenty of room for a dining room
table, and there is room next to the range to put an extra
tall-cutting board or general end-table.  And the cabinets in the
kitchen have interior shelves (not on top of the cabinet!) that go to
the limit of what I can reach.</p>

<p>The bathroom is also quite small, with a claw foot tub/shower (which
probably needs a special/double shower curtain setup.  But it is
gorgeous with some really amazing Turkish tiles in the walls.</p></blockquote>

<p>So that&rsquo;s pretty exciting. I guess I&rsquo;ve found my new place to live.
Now what do I do until I start at 8th Light in two weeks?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sane Static Site Setups]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/12/30/sane-static-site-setups/"/>
    <updated>2014-12-30T14:44:37-06:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/12/30/sane-static-site-setups</id>
    <content type="html"><![CDATA[<p>During the last week of Hacker School I helped <a href="http://lmontopo.github.io/">Leta</a> sort out
some issues she had with her blog setup and restore everything to
sanity. It was a lot of fun and the setup is pretty straightforward so
I thought I&rsquo;d do a short write-up on what we did and why.</p>

<p>To be clear, this blog post is about solving the particular problem of
how to organize a statically generated site/blog. The particulars I&rsquo;m
going to discuss are for when you host the site on <a href="https://pages.github.com/">Github Pages</a>
but you need to generate the site locally because you&rsquo;re not using
vanilla <a href="http://jekyllrb.com/">Jekyll</a> or not using Jekyll at all.</p>

<!--more-->


<p>This isn&rsquo;t a tutorial about how to set up and use any particular
static site generator.  There are <a href="http://jekyllrb.com/">quite</a> <a href="http://docs.getpelican.com/en/3.5.0/">a</a> <a href="http://wintersmith.io/">few</a> <a href="https://github.com/greghendershott/frog">out</a>
<a href="https://github.com/taylorchu/baker">there</a>, and <a href="https://github.com/hugoduncan/cl-blog-generator">they</a> <a href="https://staticsitegenerators.net/">all</a> seem to be quite good. So pick one and
get your site setup.  You should be comfortable generating the content
of your site before worrying about what I&rsquo;m describing in this post.</p>

<p>One of the best and worst things about using a static site generator (SSG)
is that the source for the site is fundamentally a separate thing from
the actual files that compose the site itself. The good news is that
the generated files are, well, generated. Given the source for a
site you can always regenerate the presentation files.</p>

<p>So clearly we want to keep the source for our site under version
control. If you&rsquo;re using Github Pages then git is a natural
choice. But Github Pages also requires that the generated content of
your site be in a git repository. This leads to an un-intuitive setup.
Because the source and published files don&rsquo;t actually share a common
history, it seems like they need to be stored in separate git
repositories.  However, there is a fundamental relationship between
the files that dictates that organizationally they should always be
found together.</p>

<p>Luckily for us, git is flexible enough to allow us to achieve both
these seemingly conflicting goals. Since the usual workflow for a git
repository simply involves <code>git init</code> and then edit, <code>add</code>,
<code>commit</code> cycles, it&rsquo;s less well known that a git repository can
actually contain multiple independent &ldquo;head&rdquo; commits. Don&rsquo;t worry if
that doesn&rsquo;t totally make sense. The important thing is that we can
store two separate revision histories in the same git repository.</p>

<p>So, you have the source for a static site, and you&rsquo;ve maybe written
some dummy (or real!) content for it and generated the site at least
once. Now, we want to make sure that we have a setup that will help us
preserve all of your hard work on making an awesome website.</p>

<p>The first thing we need to do is to make sure we have git repositories
in both the source and output directories by running <code>git init</code> in
both of them separately. Since most SSG&rsquo;s by default use a structure
where the output folder is a subdirectory of the source folder, make
sure that you have an entry in your gitignore file so that the output
isn&rsquo;t committed into the source repository. At this point we should
have two git repo&rsquo;s, one that <em>only</em> has the site source content
(including any files need by your SSG) and one that <em>only</em> has the
generated version of your site.</p>

<p>Now for the magic trick of combining the repositories. Let&rsquo;s say we
have this folder structure:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- website/
</span><span class='line'> - .git/  # Git folder for source files
</span><span class='line'> - ...    # Lots of awesome content files
</span><span class='line'> - output/
</span><span class='line'>  - .git/ # Git folder for output files
</span><span class='line'>  - ...   # The actual generated content files</span></code></pre></td></tr></table></div></figure>


<p>At a shell prompt in the directory <code>website</code>, you can run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote add output output/
</span><span class='line'>git push output master:source</span></code></pre></td></tr></table></div></figure>


<p>Basically, what we&rsquo;re doing is setting one repository as a remote of
the other, and then pushing the content to new branch there.  Now the
<code>output</code> repository contains both the source and output files in
separate git branches. Pushing all the branches of this to a hosting
site means you have a complete backup of your site.</p>

<p>Now, the process of updating your site is a little more complicated
than the general Github Pages workflow of edit, commit and push since
you need to generate the site yourself.</p>

<p>First, edit your site&rsquo;s content files.  Commit as necessary for your
peace of mind. Once you&rsquo;re satisfied with how the content looks
(you&rsquo;ve been previewing and generating the site right?), it&rsquo;s time to
commit the new content to the output branch, and then push it to your
hosting location.</p>

<p>That&rsquo;s basically it. It&rsquo;s a simple structure, but it&rsquo;s not totally
straightforward of how to get it set up, and it&rsquo;s also a bit more work
to maintain. Of course there are some interesting tools out there to
help with this process. <a href="http://octopress.org/">Octopress 2.0</a> tries to setup this
structure automatically for you, and provides a Rakefile for helping
to automate a lot of the normal tasks like site generation, previewing
and even deployment. <a href="http://docs.getpelican.com/en/3.5.0/">Pelican</a> offers to generate a Makefile and/or
a fabfile for doing the same sorts of things. Pelican also makes use
of the really neat <a href="https://github.com/davisp/ghp-import">GHP-Import</a> project to simplify the deploying
process.</p>

<p>Now go forth and blog!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With LLVM and OCaml on OS&nbsp;X]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/12/14/getting-started-with-llvm-and-ocaml-on-os-x/"/>
    <updated>2014-12-14T00:15:16-06:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/12/14/getting-started-with-llvm-and-ocaml-on-os-x</id>
    <content type="html"><![CDATA[<p>I <a href="http://www.zephyrizing.net/blog/2014/11/19/getting-started-with-llvm-on-os-x/">wrote recently</a> about my (second) experience trying to
get started using LLVM on my Macbook. Shortly after that, I became
interested in combining my interest in LLVM with my interest OCaml. As
it turns out, this was a much easier task than I anticipated.</p>

<!--more-->


<p>Since my whole experiment with Vagrant was so successful for using
the C++ LLVM libraries, I immediately started doing the same thing for
my OCaml experiments. I created a <code>Vagrantfile</code> and started trying to
write a bash script to correctly provision an Ubuntu instance with the
requirements for the OCaml LLVM bindings.</p>

<p>I was stalled fairly quickly by the fact that the version of
[OPAM][opam] in the Ubuntu apt repositories is somewhat old.  Old
enough that it doesn&rsquo;t want to talk to the official OPAM servers for
package updates. So I futzed and fiddled a bit, and looked around for
alternate ways to install OCaml.</p>

<p>Eventually I got it figured out, and started trying to install the
OCaml bindings for LLVM. It didn&rsquo;t go well. The compilation of the
llvm opam package errored almost immediately. But while I was looking
through the error messages, I noticed something interesting. The
errors were related to nonexistent paths, and the paths that the
package was expecting all started with <code>/usr/local/Cellar</code>. For the
non brew-savvy, this is the default location that <a href="http://brew.sh/">Homebrew</a>
uses for all it&rsquo;s installations.</p>

<p>I knew that homebrew had an LLVM package because of my C++
meanderings. The error messages from OPAM on Ubuntu made me think that
the OCaml LLVM package was actually expecting to be run on a Mac, or
at least to work with a <code>brew install</code>ed LLVM.</p>

<p>So I gave it a shot. I cleaned out and re-installed my LLVM installation
with <code>brew rm llvm &amp;&amp; brew install llvm</code>. And then I simply ran <code>opam
install llvm</code>. As far as I remember (it was a couple weeks ago now ;),
everything went off without a hitch.</p>

<p><How was I able to validate the installation? Looked at Kaleidoscope
tutorial?></p>

<p>Finally, I wanted to be able to use the top-level to explore the LLVM
API, but that didn&rsquo;t appear to work right away. After some googling, I
found an answer on Stack Overflow (of course!) that said I had to
compile a custom version of utop with the LLVM libraries linked in.</p>

<p>I did that <describe it!! got to refigure out how I did that though>,
and then was able to get the wonderful utop completion stuff to work
with the totally unfamiliar LLVM bindings in OCaml.</p>

<p>Of course, then I needed to implement a <a href="https://github.com/RadicalZephyr/postfix-ocaml">language to actually compile
with LLVM</a>. And of course I still haven&rsquo;t actually done
anything with LLVM&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With LLVM on OS&nbsp;X]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/11/19/getting-started-with-llvm-on-os-x/"/>
    <updated>2014-11-19T02:31:00-06:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/11/19/getting-started-with-llvm-on-os-x</id>
    <content type="html"><![CDATA[<p>A few weeks ago, I decided that one of the things I wanted to tackle
during my time at Hacker School was getting familiar with the LLVM
project. To that end, myself and several other Hacker Schoolers formed
an informal group to work through the official
<a href="http://llvm.org/releases/3.5.0/docs/tutorial/index.html">LLVM Kaleidoscope</a> tutorial. We made reasonable progress at
first, but as soon as we actually had to start dealing with the LLVM
tools, I started encountering problems.</p>

<p>Long story short, I ended up getting frustrated with the state of the
documentation surrounding LLVM and moving on to working on other less
upsetting projects. This last weekend though I ended up getting back
into it. I tried two different approaches.</p>

<!--more-->


<p>First, I decided to use a Vagrant supported VM to do my LLVM
setups. This was for two reasons: the fact that I do my development on
a Mac running OS X seems to be problematic when trying to install LLVM
in a global manner. This is because <em>some</em> of the LLVM tools (like
Clang) make up the default build environment on OS X. But the toolset is
insufficient if you actually want to build languages with LLVM, and
the presence of these libraries makes it&hellip; complicated to try and
install a more complete version. As Homebrew says when you try to
install LLVM via <code>brew install llvm</code>:</p>

<blockquote><p>Mac OS X already provides this software and installing another
version in parallel can cause all kinds of trouble.</p></blockquote>

<p>This is essentially the problem that I ran into a couple weeks ago
that caused me to give up on working with LLVM. This time however, I
had the insight that I wasn&rsquo;t solely limited to the physical machine
that I had an the one operating system I have the space to install on
it. By using <a href="https://www.vagrantup.com/">Vagrant</a> I could pretty trivially have a working Ubuntu
environment to use as my development platform for working with LLVM.</p>

<p>So that&rsquo;s what <a href="https://github.com/RadicalZephyr/postfix-llvm">I did</a>. The most interesting thing about
that repository is how I ended up provisioning my Vagrant
VM. To quote briefly from the <a href="https://en.wikipedia.org/wiki/Provisioning#Server_provisioning">Wikipedia Article</a>:</p>

<blockquote><p>&hellip; provisioning is a set of actions to prepare a server with
appropriate systems, data and software, and make it ready&hellip;</p></blockquote>

<p>The provisioning is done via shell scripts (that&rsquo;s not the interesting
part!), but instead of using <code>apt-get</code> to install all the software
that I required I mostly had to build them from scratch. But let&rsquo;s go
through the story end to end.</p>

<p>First off, I did try to install all the software via <code>apt-get</code>. There
was some confusion for me about which version of LLVM to install. From
the reading I&rsquo;d done on the [LLVM site] previously I thought that
since 3.5 has been officially released it would be considered the
stable version. However, when you install LLVM 3.5 via <code>apt</code> (with
<code>sudo apt-get install llvm-3.5</code>) the binaries don&rsquo;t seem to end up
getting installed on a path location. Or rather, they are on path, but
the names are all suffixed with <code>-3.5</code>.</p>

<p>This wasn&rsquo;t really what I wanted, so I also tried installing the 3.4
packages which it turns out are also the default set of packages
installed if you <code>apt-get install llvm</code>. This got the right names for
the tools onto my path, so step one check. So much easier to install
than with Homebrew! Well, to install and make sure that it was available
to me anyhow.</p>

<p>Then, since I was going to be doing <code>C++</code> development, I wanted to use
<a href="http://www.cmake.org/">CMake</a> as my build generator. If you&rsquo;ve never used CMake but you do
<code>C/C++</code> development I&rsquo;d highly recommend checking it out. It allows
you to specify your build process at a very high level.  As a bonus,
it can then generate the files to process that build with <a href="http://www.gnu.org/software/make/">several</a>
<a href="https://eclipse.org/">different</a> <a href="http://msdn.microsoft.com/en-us/vstudio/aa718325.aspx">kinds</a> of actual <a href="http://www.cmake.org/cmake/help/v3.0/manual/cmake-generators.7.html#id4">build systems</a>. It&rsquo;s way more
convenient than writing your own <code>Makefiles</code> and much more modern than
the whole <a href="https://www.gnu.org/software/autoconf/">autoconf</a> system (which I can&rsquo;t say much about, I&rsquo;ve never
learned it).</p>

<p>Anyhow, CMake has another handy benefit. It has a system for
<a href="http://www.cmake.org/Wiki/CMake:How_To_Find_Libraries">finding your dependencies</a>. Not like over the internet like
<a href="http://stackoverflow.com/questions/1541771/using-maven-for-c-c-projects">some build systems</a>, but still it&rsquo;s better than the basic
situation in C. Since CMake has actually been around for a while there
are many standard open source projects that provide the mechanics for
finding their libraries with CMake, including - handily enough - the
LLVM project.</p>

<p>One requirement of this system is that a &ldquo;module file&rdquo; be somewhere on
the CMake <code>modules-path</code>. For packages that support it, this should
happen when the package is installed and the locations of the critical
library and header files are actually known. Only problem is that the
CMake packages available in the Ubuntu repositories don&rsquo;t actually do
this. Turns out there was a <a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=735592">bug report</a> early in 2014 describing the
issue. Then a long back and forth with the package maintainer (I
think) and many cases of &ldquo;Hey, it should be fixed now!&rdquo;, followed by a
response of &ldquo;No, it actually still doesn&rsquo;t work&hellip;&rdquo;</p>

<p>Then I found the LLVM <code>apt</code> <a href="http://llvm.org/apt/">nightly builds page</a> which
possibly answers why LLVM 3.4 is still the default package on Ubuntu,
since the LLVM project considers 3.4 to be &ldquo;stable&rdquo; and 3.5 is the
&ldquo;qualification branch.&rdquo; This <code>apt</code> repository seemed like a good bet
for finding an LLVM package that would properly install the necessary
CMake files, but alas, I had no such luck.</p>

<p>So instead I built LLVM from scratch. This is both easier and harder
than it sounds. Building LLVM from source is a very automated process,
and the parts that aren&rsquo;t automatic by default (like downloading,
checking file signatures and unpacking archives) are highly
automatable. The painful part is that VM&rsquo;s are always slower than a
natively installed OS. And my poor Macbook Air takes about 45 minutes
to do a full LLVM build under the native OS X. So basically once I got
everything setup I let the LLVM build run and stopped thinking about
it except to check on it every few hours.</p>

<p>I had quite a few build failures mostly related to what seem
like out of memory errors in GCC. Sometimes just restarting the
compilation helped, but I also restarted Vagrant VM and gave it a full
2GB of memory which helped a lot.</p>

<p>Once the install finished though CMake was able to find it
immediately. As pointed out earlier, the code is up on Github. I was
surprised to discover that there is no Vagrant VM that exists for
doing LLVM development, so that&rsquo;s going to go on my list of
projects. Ideally, that <strong>won&rsquo;t</strong> involve building LLVM from source in
the provisioning stage, because of the computational issues with
VM&rsquo;s. It might be an interesting excuse to learn how to build .deb
packages and make a PPA with a CMake that properly installs the
<code>FindLLVM.cmake</code> files&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Demonstrating demonstrate.sh]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/10/30/demonstrating-demonstrate-dot-sh/"/>
    <updated>2014-10-30T15:33:34-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/10/30/demonstrating-demonstrate-dot-sh</id>
    <content type="html"><![CDATA[<p><em>Edit 2014/12/30: I ended up rewriting demonstrate in <a href="https://github.com/RadicalZephyr/demonstrate.sh">several</a>
<a href="https://github.com/RadicalZephyr/demonstrate">different</a> languages, but the implementation that I like the
best is in <a href="https://github.com/RadicalZephyr/demonstrate.py">python</a>.</em></p>

<p>So, in the course of trying to prepare a presentation for this
Thursday (today!), I ended up creating a program called
<code>demonstrate.sh</code>. Basically, it lets you write a script, meant for an
interpreter (like bash, python, irb, coffee etc.) and then execute it
on demand.</p>

<!--more-->


<p>What do I mean by &ldquo;on demand&rdquo;? Well, basically it invokes the
interpreter and then reads the script file one line at a time. Then it
prints out a fake prompt based on the interpreter you specified, and
then it prints out the line of input it&rsquo;s processing.  When you hit
enter, the script sends that line of input to the interpreter and it
then prints its output to the screen. Oh, there&rsquo;s one little
caveat. When <code>demonstrate.sh</code> prints the line of output, it prints it
character by character with a small randomized delay. So it looks a
bit like you&rsquo;re actually typing out the command.</p>

<p>That&rsquo;s it! It&rsquo;s a simple script, but it allows you to create and then
run in a repeatable way a sequence of commands that you want to
<em>demonstrate</em>.</p>

<p>There are some improvements I&rsquo;d like to add. The ability to
recursively run demonstrate scripts inside of a demonstrate script
would be awesome. Currently because I&rsquo;m doing everything in the
simplest possible way, and the script is run in the background running
demonstrate inside of a demonstrate script doesn&rsquo;t work very well. I&rsquo;m
actually not entirely sure why it doesn&rsquo;t work, but the results are
demonstrably not what I want.</p>

<p>It would also be nice to make it so that you can insert arbitrary
commands to the interpreter, instead of only being able to run the
commands in the script. This is a particularly key feature since if
you just start another interpreter to run ad-hoc commands, you don&rsquo;t
have the same environment. This isn&rsquo;t important if your script doesn&rsquo;t
contain any side-effectful things, but I think that a lot of scripts
will tend to.</p>

<p>Finally, it would be really nice if the <code>demonstrate.sh</code> didn&rsquo;t need
to fake the prompts for the interpreters. In an ideal world, those
prompts would be transparently printed directly to the screen. I&rsquo;m
sure there&rsquo;s a way to do it, but it probably isn&rsquo;t possible/easy in
<code>bash</code>.</p>

<p>When I talked to <a href="https://github.com/doy">Jesse</a> about this, he asked the critical question.
Why not just record the output? My answer was essentially because I
wanted to eventually be able to run arbitrary commands in addition to
the script commands. This is sort of a weak answer, since it depends
on a feature I haven&rsquo;t yet implemented!</p>

<p>But there&rsquo;s another answer, that I discovered today when I was playing
with the classic Unix utility <code>script</code> that does exactly what Jesse
was talking about. The difference between recording an interaction
with <code>script</code> and writing a demonstrate script is this. Recording with
<code>script</code> is <em>still live coding</em>. This is especially true if you want
to use the timing feature to play it back at the same speed that it
happened at. In contrast, writing a <code>demonstrate</code> script is the same
as writing any regular script for the interpreter you&rsquo;re
targeting. You are totally offline, and you can write and edit the
script directly, and then run it with demonstrate to make sure it does
exactly what you want.</p>

<p>From what I&rsquo;ve been told about the early days of programming, the
difference between recording an interaction with <code>script</code> and writing
a <code>demonstrate</code> script is approximately the same as the difference
between writing programs on punch cards and writing programs in a text
editor on a computer. If you mess up while punching the card, you have
to start over from the beginning (barring awesome hacks
<a href="https://twitter.com/francesc/status/521602168022118400">like this</a>).</p>

<p>Yup, that&rsquo;s it. If you&rsquo;re interested, check it out
<a href="https://github.com/RadicalZephyr/demonstrate.sh">on Github</a>. Pull requests welcome :)</p>
]]></content>
  </entry>
  
</feed>
