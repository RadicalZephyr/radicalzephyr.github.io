<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ev3 | Zephyrizing]]></title>
  <link href="http://www.zephyrizing.net/blog/categories/ev3/atom.xml" rel="self"/>
  <link href="http://www.zephyrizing.net/"/>
  <updated>2015-04-16T18:50:58-05:00</updated>
  <id>http://www.zephyrizing.net/</id>
  <author>
    <name><![CDATA[Geoff Shannon]]></name>
    <email><![CDATA[geoffpshannon@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LeJOS and Clojure]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/04/17/lejos-and-clojure/"/>
    <updated>2014-04-17T18:00:00-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/04/17/lejos-and-clojure</id>
    <content type="html"><![CDATA[This is a short followup to my first post about
[experimenting with the Lego EV3's][lego-ev3] and [leJOS]. Shortly
after I wrote that post, I went on the Clojure IRC channel and talked
to [Phil Hagelberg][technomancy] and some other helpful folks about my
issues. They steered me away from attempting to install [Leiningen] on
the EV3 itself, which was a relief since I think that way lay
madness. Instead, they suggested that I have a small launcher program
that would just setup a REPL. Then I could run my robot-controlling
Clojure code from there.

[lego-ev3]: /blog/2013/10/31/leJOS-and-EV3/

<!--more-->

This advice led to the creation of [ev3-nrepl]. It&#8217;s basically a small
skeleton Clojure project to provide the basis for running Clojure code
on the EV3. It&#8217;s a minimalist setup, so it should provide a good
starting point for other people to continue experimenting. I tried to
explain how to use it fairly clearly, as well as add all the links to
the necessary documentation to get leJOS running on the EV3.

Unfortunately, despite this seemingly great start, I never ended up
actually doing anything interesting with Clojure on the EV3. There are
two related reasons for this. First, the robotics class I was in
started having actual coding assignments (thanks to the fact that we
could now run leJOS). Second, it turns out that leJOS is designed from
an incredibly stateful and imperative point of view. This makes it
very hard to develop clean Clojure code that makes use of their
API. Specifically, leJOS makes the assumption that any code making use
of it is going to start-up, do robot stuff, and then die. A Clojure
REPL obviously breaks this assumption rather badly. As it turned out,
this was the most painful when I was trying to figure out how to
program and build my robot at the same time.

What I wanted to do was be able to open a Clojure REPL connect to it,
and then leave it running for a long time. This is my normal modus
operandi, but the EV3 makes it even more critical that this
work. Because of the limited hardware, it takes several minutes for
nrepl to actually boot up.

I think that using Clojure as a prototyping tool for building robots
with the EV3 could be incredibly powerful. All of the
[arguments](http://www.infoq.com/presentations/Clojure-Java-Interop)
for why Clojure is a great language for exploring Java API&#8217;s are
applicable to working with the EV3 API&#8217;s. Possibly even more so, since
there is something really, really cool about typing some commands at
the REPL and having your robot start moving around and doing
stuff. Unfortunately, because of the current architecture of leJOS and
the limited processing power of the EV3&#8217;s it&#8217;s not quite there yet.

[leJOS]: http://lejos.org
[technomancy]: http://technomancy.us/
[leiningen]: http://leiningen.org/
[ev3-nrepl]: https://github.com/RadicalZephyr/ev3-nrepl
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure, LeJOS and EV3]]></title>
    <link href="http://www.zephyrizing.net/blog/2013/10/31/leJOS-and-EV3/"/>
    <updated>2013-10-31T21:00:00-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2013/10/31/leJOS-and-EV3</id>
    <content type="html"><![CDATA[I've had the opportunity in the last couple weeks to start playing
with a Lego Mindstorms EV3.  Since this hardware is such a new release
though, most of the normal contenders in the robot programming scene
(namely, RobotC) haven't had time to update their offerings to work
with it.

Enter [LeJOS][lejos].  Apparently the maintainer of the LeJOS project
got early access to the developer documentation and other necessary
infos, so he's been able to develop a setup for allowing people to
program their EV3 using Java.

<!--more-->

It&#8217;s a really elegant solution actually.  Since the EV3 already runs a
full linux kernel, he just modified the base Legos linux image.  You
then partition a microSD card and write this image to it.  Now you can
boot the EV3 from the microSD card and ssh into it over either WiFi
(if you have an external USB wifi adapter that&#8217;s compatible), or over
USB (a more recent feature).

My next goal is to get a clojure projet running on the ev3.  There are
two approaches that I could take.  First, I could try AOT compiling my
clojure source and then shipping just the uberjar to the EV3.  This
seems the most straightforward.  However, following this plan I almost
immediately ran into a stumbling block.  The LeJOS java library cannot
be compiled using Leiningen when not on the EV3.

Apparently this is because something about the clojure compilation
process actually loads the EV3 classes into the JVM.  This causes the
static initializers to be run.  And the static initializers look for
specific files in the /dev directory to try and do their thing.

Obviously, when you&#8217;re not on an EV3 these files don&#8217;t exist.

So the second way of doing things would be to attempt to install
leiningen on the EV3 itself.  I see a lot of potential problems with
this, first and foremost being how do I do it without a direct
connection to the internet?  Secondly, the linux installation is very
minimal, and might not actually contain all the necessary tools to
install and use leiningen.

[lejos]: http://lejos.org
]]></content>
  </entry>
  
</feed>
