<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Clojure | Zephyrizing]]></title>
  <link href="http://www.zephyrizing.net/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://www.zephyrizing.net/"/>
  <updated>2015-07-15T12:28:09-05:00</updated>
  <id>http://www.zephyrizing.net/</id>
  <author>
    <name><![CDATA[Geoff Shannon]]></name>
    <email><![CDATA[geoffpshannon@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Domain Driven Design and Clojure]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/05/21/domain-driven-design-and-clojure/"/>
    <updated>2015-05-21T10:41:29-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/05/21/domain-driven-design-and-clojure</id>
    <content type="html"><![CDATA[I've been reading an excellent book recently: [_Domain Driven Design_][DDD]
by Eric Evans. I just finished the section on Entities and Value
Objects, and it's caused me to start thinking about Clojure and the
"sane state management model" that language advocates/enforces.

[DDD]: https://en.wikipedia.org/wiki/Domain-driven_design

<!--more-->

The Clojure state model bears some strong similarities to what Evans
talks about when discussing the needs and uses for Entities and Value
Objects. Entities he says should be used to represent things where
their continuity of identity is more important than their current
value. Value Objects are the opposite, the important part of a Value
Object is the data it holds or represents, to the extent that Value
Objects with the same value are totally interchangeable.

He goes on to talk about the benefits that immutability and safe
arbitrary sharing that this interchangeability can give you.
Specifically, the relative looseness of the constraints on Value
Objects gives a system designer more freedom to implement Value
Objects in a way that has extra benefits, such as increased
performance or memory efficiency.

I&#8217;m just going to pull some quotes directly from
[the page on clojure.org about state][clj-state].

[clj-state]: http://clojure.org/state

First, some words about identity:

> While some programs are merely large functions, e.g. compilers or
> theorem provers, many others are not - they are more like working
> models, and as such need to support what I&#8217;ll refer to in this
> discussion as identity. By identity I mean a stable logical entity
> associated with a series of different values over time. Models need
> identity for the same reasons humans need identity - to represent
> the world. How could it work if identities like &#8216;today&#8217; or &#8216;America&#8217;
> had to represent a single constant value for all time?

And now, values:

> So, for this discussion, an identity is an entity that has a state,
> which is its value at a point in time. And a value is something that
> doesn&#8217;t change. 42 doesn&#8217;t change. June 29th 2008 doesn&#8217;t
> change. Points don&#8217;t move, dates don&#8217;t change, no matter what some
> bad class libraries may cause you to believe. Even aggregates are
> values. The set of my favorite foods doesn&#8217;t change, i.e. if I
> prefer different foods in the future, that will be a different set.

Clearly Rich Hickey was thinking along the same lines as Eric
Evans. In fact, I would say that Clojure is a programming language
that is built on a firm conceptual model of the domain of
programming. I think this is one of the things that makes Clojure such
a joy to program in. Especially once you&#8217;re familiar with the
language, the standard idioms and the general layout of it&#8217;s
libraries. Everything is highly conceptually consistent. There have
been very few points where I learned something new about Clojure and
thought &#8220;Well that doesn&#8217;t really make sense&#8230;&#8221; More often when I
learn something new it fits smoothly into the mental model that I
already have about how the language works.

I guess this Domain Driven Design stuff might really work&#8230;
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chestnut - Annotated]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/05/10/chestnut-annotated/"/>
    <updated>2015-05-10T13:34:16-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/05/10/chestnut-annotated</id>
    <content type="html"><![CDATA[#### A Note about version numbers

At the time of this writing, there were several newer versions of many
of the dependencies used in Chestnut. In particular, the ClojureScript
core team had fairly recently released a new version with
[vastly simplified REPL setup requirements][cljs-new-repl] which
triggered changes to many of the related ClojureScript tooling
libraries (Piggieback, and Weasel especially). So PLEASE! Use the
latest version of Chestnut, or if you're setting up your own project
then look up the latest versions on [Clojars][clojars]

[cljs-new-repl]: https://github.com/clojure/clojurescript/wiki/Running-REPLs
[clojars]: http://clojars.org/

## On to the Annotating!

As I wrote [recently][yaks], I recently dove head first into doing web
development with Clojure and Clojurescript. Along the way I learned a
whole heck of a lot about how to actually set up a [Leiningen][lein]
project to support a nice workflow for such a project. However, most
of my new-found knowledge has already been put together into a very
nice package called [Chestnut][chestnut]. However, at first glance
(and second and third glance really) Chestnut projects are complex and
intimidating.

[lein]: http://leiningen.org/
[chestnut]: https://github.com/plexus/chestnut

This post is an annotated walkthrough of the configuration that a new
Chestnut comes with. The best way to follow along would be to start
off by running `lein new chestnut tour` in shell and then exploring
the files as I talk about them.

[yaks]: /blog/2015/04/04/shaving-the-clojurescript-yaks/

<!--more-->

Let&#8217;s start by looking at the base directory.

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Directories
</span><span class='line'>- resources
</span><span class='line'>- src
</span><span class='line'>- env
</span><span class='line'>
</span><span class='line'># Files
</span><span class='line'>- LICENSE
</span><span class='line'>- README.md
</span><span class='line'>- code_of_conduct.md
</span><span class='line'>- project.clj
</span><span class='line'>- Procfile
</span><span class='line'>- system.properties</span></code></pre></td></tr></table></div></figure>

If you&#8217;re familiar with Clojure development at all, this should look
very familiar to you. But there a few unusual things: the `Procfile`
and `system.properties` files, and the `env` folder.  The `Procfile`
is a file for letting [Heroku][hero] know how to run your app, and the
contents of it are explained well in the
[Heroku guide to getting started with Clojure][clj-get-started].

[hero]: https://www.heroku.com/
[clj-get-started]:
https://devcenter.heroku.com/articles/getting-started-with-clojure#define-a-procfile

If we use the awesome [tree][tree] program to visualize some of these
directories we can see some interesting stuff. First, `src` looks
pretty standard for Clojure, with the addition of a second tree for
cljs files.

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>src
</span><span class='line'>├── clj
</span><span class='line'>│   └── tour
</span><span class='line'>│       └── server.clj
</span><span class='line'>└── cljs
</span><span class='line'>    └── tour
</span><span class='line'>        └── core.cljs</span></code></pre></td></tr></table></div></figure>

The same is true of the `test` folder. But what&#8217;s really interesting
is what is in that new `env` folder.

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>env
</span><span class='line'>├── dev
</span><span class='line'>│   ├── clj
</span><span class='line'>│   │   └── tour
</span><span class='line'>│   │       └── dev.clj
</span><span class='line'>│   └── cljs
</span><span class='line'>│       └── tour
</span><span class='line'>│           └── main.cljs
</span><span class='line'>├── prod
</span><span class='line'>│   ├── clj
</span><span class='line'>│   │   └── tour
</span><span class='line'>│   │       └── dev.clj
</span><span class='line'>│   └── cljs
</span><span class='line'>│       └── tour
</span><span class='line'>│           └── main.cljs
</span><span class='line'>└── test
</span><span class='line'>    ├── js
</span><span class='line'>    │   ├── polyfill.js
</span><span class='line'>    │   └── unit-test.js
</span><span class='line'>    └── unit-test.html</span></code></pre></td></tr></table></div></figure>

What we see is that there are three top-level directories underneath
`env`, and below each of these we see what looks like normal Clojure
and Clojurescript source trees. Veeery, interesting.

Now let&#8217;s jump and take a look at the `project.clj`. This is where the
heart of the action is. The first is boring normal project meta-data,
and we&#8217;re going to skip it. The next section is interesting though.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="ss">:source-paths</span> <span class="p">[</span><span class="s">&quot;src/clj&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="ss">:repl-options</span> <span class="p">{</span><span class="ss">:timeout</span> <span class="mi">200000</span><span class="p">}</span> <span class="c1">;; Defaults to 30000 (30 seconds)</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">:test-paths</span> <span class="p">[</span><span class="s">&quot;spec/clj&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

The `:repl-options` is straightforward. It just increases the timeout
when launching a REPL. Presumably this is because Chestnut REPL&#8217;s are
so filled with awesome that they take longer to load ;) The `*-paths`
options are simple too.  They just override the default place that
Leiningen looks for Clojure source and test files by default.

> N.B. The version of Chestnut I generated this with actually has a
> bug, since it generated &#8220;spec/clj&#8221; as the test path, but no &#8220;spec&#8221;
> folder.

Next come the dependencies and plugins needed by this project.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">org.clojure/clojure</span> <span class="s">&quot;1.6.0&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">org.clojure/clojurescript</span> <span class="s">&quot;0.0-2511&quot;</span> <span class="ss">:scope</span> <span class="s">&quot;provided&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">ring</span> <span class="s">&quot;1.3.2&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">ring/ring-defaults</span> <span class="s">&quot;0.1.3&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">compojure</span> <span class="s">&quot;1.3.1&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">enlive</span> <span class="s">&quot;1.1.5&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">om</span> <span class="s">&quot;0.8.0-rc1&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">environ</span> <span class="s">&quot;1.0.0&quot;</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">:plugins</span> <span class="p">[[</span><span class="nv">lein-cljsbuild</span> <span class="s">&quot;1.0.3&quot;</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">lein-environ</span> <span class="s">&quot;1.0.0&quot;</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>

Clojure and Clojurescript are obviously necessary, and when you&#8217;re
using Clojurescript with Leiningen, you probably want the
[lein-cljsbuild][cljsbuild] plugin for compiling your
Clojurescript. [Ring][ring] is the standard Clojure web application&#8217;s
library. [Ring-defaults][ring-def] is a library for providing standard
configurations of [Ring middleware][ring-mid].  [Compojure][compojure]
is a routing library built on top of Ring.

<sub>
I&#8217;m not quite sure why the Clojurescript dependency is marked as
`provided`&#8230;
</sub>

[ring]: https://github.com/ring-clojure/ring#ring
[ring-def]: https://github.com/ring-clojure/ring-defaults#ring-defaults
[ring-mid]: https://github.com/ring-clojure/ring/wiki/Concepts#middleware
[compojure]: https://github.com/weavejester/compojure#compojure

[Enlive][enlive] is a &#8220;a selector-based (à la CSS) templating library
for Clojure.&#8221; Very cool stuff, and wildly useful for many other HTML
processing/producing/consuming tasks than just templating.
Unfortunately very under-documented. [Om][om] is the only
Clojurescript specific dependency in the list, but it&#8217;s a pretty cool
one. It&#8217;s a Clojurescript interface to Facebook&#8217;s React.js library.

[enlive]: https://github.com/cgrand/enlive#enlive-
[om]: https://github.com/omcljs/om#om

Finally we have the [Environ][environ] library, and it&#8217;s associated
`lein-environ` plugin. As their README says:

> Environ is a Clojure library for managing environment settings from
> a number of different sources.

[environ]: https://github.com/weavejester/environ#environ

However, it is also the basis for a lot of the really neat things that
Chestnut does.

Next up, we have some more basic configuration stuff.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="ss">:min-lein-version</span> <span class="s">&quot;2.5.0&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">:uberjar-name</span> <span class="s">&quot;tour.jar&quot;</span>
</span></code></pre></td></tr></table></div></figure>

These two settings are specifically to help with deployment to Heroku
which looks for the `:min-lein-version` key to determine what version
of lein to build your app with. Chestnut also changes the uberjar name
so that the Procfile can specify a specific filename. Normally, the
uberjar name is derived from the project name and the current
version. However, this makes it a moving target.  Every time you bump
your version number you would have to update the Procfile to stay in
sync. This way, the uberjar always has one name and the Procfile never
needs to change.

Finally, we have the basic cljs build configuration:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="ss">:cljsbuild</span> <span class="p">{</span><span class="ss">:builds</span> <span class="p">{</span><span class="ss">:app</span> <span class="p">{</span><span class="ss">:source-paths</span> <span class="p">[</span><span class="s">&quot;src/cljs&quot;</span><span class="p">]</span>
</span><span class='line'>                             <span class="ss">:compiler</span> <span class="p">{</span><span class="ss">:output-to</span>     <span class="s">&quot;resources/public/js/app.js&quot;</span>
</span><span class='line'>                                        <span class="ss">:output-dir</span>    <span class="s">&quot;resources/public/js/out&quot;</span>
</span><span class='line'>                                        <span class="ss">:source-map</span>    <span class="s">&quot;resources/public/js/out.js.map&quot;</span>
</span><span class='line'>                                        <span class="ss">:preamble</span>      <span class="p">[</span><span class="s">&quot;react/react.min.js&quot;</span><span class="p">]</span>
</span><span class='line'>                                        <span class="ss">:optimizations</span> <span class="ss">:none</span>
</span><span class='line'>                                        <span class="ss">:pretty-print</span>  <span class="nv">true</span><span class="p">}}}}</span>
</span></code></pre></td></tr></table></div></figure>

This is remarkably similar to the configuration from the
[lein-cljsbuild none example project][none-example], and a standard
setup to enable source-maps.

[none-example]: https://github.com/emezeske/lein-cljsbuild/blob/1.0.5/example-projects/none/project.clj

### Profiles

So far, most of what we&#8217;ve seen is fairly standard
clojure/clojurescript configuration stuff. But one of the things that
makes Chestnut awesome is that it makes really good use of the
Leiningen profiles feature. In particular, it uses profiles to
concisely specify different clojurescript compilation settings and add
dependencies that are only needed for development. If this is the
first time you&#8217;ve heard about Leiningen profiles, you should probably
go [read about it][lein-profiles]. The basic summary is this though:

> You can place any arbitrary key/value pairs supported by defproject
> into a given profile and they will be merged into the project map
> when that profile is activated.

[lein-profiles]: https://github.com/technomancy/leiningen/blob/master/doc/PROFILES.md#profiles

Let&#8217;s start with the extra `:dev` setups. It starts off nice and easy
just adding more clojure source and test paths and some extra
development-only dependencies.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="ss">:profiles</span> <span class="p">{</span><span class="ss">:dev</span> <span class="p">{</span><span class="ss">:source-paths</span> <span class="p">[</span><span class="s">&quot;env/dev/clj&quot;</span><span class="p">]</span>
</span><span class='line'>                   <span class="ss">:test-paths</span> <span class="p">[</span><span class="s">&quot;test/clj&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>                   <span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">figwheel</span> <span class="s">&quot;0.2.1-SNAPSHOT&quot;</span><span class="p">]</span>
</span><span class='line'>                                  <span class="p">[</span><span class="nv">figwheel-sidecar</span> <span class="s">&quot;0.2.1-SNAPSHOT&quot;</span><span class="p">]</span>
</span><span class='line'>                                  <span class="p">[</span><span class="nv">com.cemerick/piggieback</span> <span class="s">&quot;0.1.3&quot;</span><span class="p">]</span>
</span><span class='line'>                                  <span class="p">[</span><span class="nv">weasel</span> <span class="s">&quot;0.4.2&quot;</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>

Notice that there is a similar entry under the `:uberjar` profile for
`:source-paths` but that the `:test-paths` are omitted (since the
uberjar is typically for distributing production code).

[Figwheel][fig] is a very cool project that &#8220;pushes ClojureScript code
changes to the client.&#8221; This enables a very smooth Clojurescript
workflow. It&#8217;s so seamless in fact that in some ways it makes
Clojurescript programming *more enjoyable* than working with Clojure!

[fig]: https://github.com/bhauman/lein-figwheel#lein-figwheel

[Piggieback][piggie] provides support for running a ClojureScript REPL
on top of an nREPL session. Chas goes into the reasons of why this is
a desirable thing in the README, so go check it out if you&#8217;re interested.

[piggie]: https://github.com/cemerick/piggieback#piggieback-

Finally, [Weasel][weasel] allows your ClojureScript REPL to use
WebSockets to communicate with your chosen execution environment.
Again, their README has good information about why this might be a
thing you want.

[weasel]: https://github.com/tomjakubowski/weasel#weasel

The next two sections are pretty much just setup for Piggieback and
Figwheel:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>               <span class="ss">:repl-options</span> <span class="p">{</span><span class="ss">:init-ns</span> <span class="nv">tour.server</span>
</span><span class='line'>                              <span class="ss">:nrepl-middleware</span> <span class="p">[</span><span class="nv">cemerick.piggieback/wrap-cljs-repl</span><span class="p">]}</span>
</span><span class='line'>
</span><span class='line'>               <span class="ss">:plugins</span> <span class="p">[[</span><span class="nv">lein-figwheel</span> <span class="s">&quot;0.2.1-SNAPSHOT&quot;</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'>               <span class="ss">:figwheel</span> <span class="p">{</span><span class="ss">:http-server-root</span> <span class="s">&quot;public&quot;</span>
</span><span class='line'>                          <span class="ss">:server-port</span> <span class="mi">3449</span>
</span><span class='line'>                          <span class="ss">:css-dirs</span> <span class="p">[</span><span class="s">&quot;resources/public/css&quot;</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>

Then both the dev and uberjar profiles contain an `:env` map
specifying either that `:is-dev` is `true` or `false`. These
configurations hook into the Environ library and allow you to specify
the value of environment variables directly in the project.clj
file. This particular usage should be pretty straightforward; it&#8217;s
basically a simple switch that allows us to tell in our code whether
or not this is a dev build/run or not.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>               <span class="ss">:env</span> <span class="p">{</span><span class="ss">:is-dev</span> <span class="nv">true</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

The only thing remaining in the dev profile now is the cljsbuild test
configuration. Though once again, notice that there is the small
addition of the `env/dev/cljs` path as a source for our previosly
configured `app` ClojureScript build.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>               <span class="ss">:cljsbuild</span> <span class="p">{</span><span class="ss">:test-commands</span> <span class="p">{</span> <span class="s">&quot;test&quot;</span> <span class="p">[</span><span class="s">&quot;phantomjs&quot;</span> <span class="s">&quot;env/test/js/unit-test.js&quot;</span> <span class="s">&quot;env/test/unit-test.html&quot;</span><span class="p">]</span> <span class="p">}</span>
</span><span class='line'>                           <span class="ss">:builds</span> <span class="p">{</span><span class="ss">:app</span> <span class="p">{</span><span class="ss">:source-paths</span> <span class="p">[</span><span class="s">&quot;env/dev/cljs&quot;</span><span class="p">]}</span>
</span><span class='line'>                                    <span class="ss">:test</span> <span class="p">{</span><span class="ss">:source-paths</span> <span class="p">[</span><span class="s">&quot;src/cljs&quot;</span> <span class="s">&quot;test/cljs&quot;</span><span class="p">]</span>
</span><span class='line'>                                           <span class="ss">:compiler</span> <span class="p">{</span><span class="ss">:output-to</span>     <span class="s">&quot;resources/public/js/app_test.js&quot;</span>
</span><span class='line'>                                                      <span class="ss">:output-dir</span>    <span class="s">&quot;resources/public/js/test&quot;</span>
</span><span class='line'>                                                      <span class="ss">:source-map</span>    <span class="s">&quot;resources/public/js/test.js.map&quot;</span>
</span><span class='line'>                                                      <span class="ss">:preamble</span>      <span class="p">[</span><span class="s">&quot;react/react.min.js&quot;</span><span class="p">]</span>
</span><span class='line'>                                                      <span class="ss">:optimizations</span> <span class="ss">:whitespace</span>
</span><span class='line'>                                                      <span class="ss">:pretty-print</span>  <span class="nv">false</span><span class="p">}}}}}</span>
</span></code></pre></td></tr></table></div></figure>

Compared to the `:dev` profile, the `:uberjar` is quite simple:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>         <span class="ss">:uberjar</span> <span class="p">{</span><span class="ss">:source-paths</span> <span class="p">[</span><span class="s">&quot;env/prod/clj&quot;</span><span class="p">]</span>
</span><span class='line'>                   <span class="ss">:hooks</span> <span class="p">[</span><span class="nv">leiningen.cljsbuild</span><span class="p">]</span>
</span><span class='line'>                   <span class="ss">:env</span> <span class="p">{</span><span class="ss">:production</span> <span class="nv">true</span><span class="p">}</span>
</span><span class='line'>                   <span class="ss">:omit-source</span> <span class="nv">true</span>
</span><span class='line'>                   <span class="ss">:aot</span> <span class="ss">:all</span>
</span><span class='line'>                   <span class="ss">:cljsbuild</span> <span class="p">{</span><span class="ss">:builds</span> <span class="p">{</span><span class="ss">:app</span>
</span><span class='line'>                                        <span class="p">{</span><span class="ss">:source-paths</span> <span class="p">[</span><span class="s">&quot;env/prod/cljs&quot;</span><span class="p">]</span>
</span><span class='line'>                                         <span class="ss">:compiler</span>
</span><span class='line'>                                         <span class="p">{</span><span class="ss">:optimizations</span> <span class="ss">:advanced</span>
</span><span class='line'>                                          <span class="ss">:pretty-print</span> <span class="nv">false</span><span class="p">}}}}}})</span>
</span></code></pre></td></tr></table></div></figure>

The main difference is the addition of three pieces of configuration
that make this a true production build. The `:hooks` option causes
leiningen to run the `leiningen.cljsbuild/activate` function to let it
[hook into the defualt Leiningen tasks][hook].

[hook]: https://github.com/technomancy/leiningen/blob/master/doc/PLUGINS.md#hooks

Then `:omit-source` simply directs leiningen not to include the
clojure source files in the resulting uberjar, and `:aot :all` causes
the Clojure compiler to [Ahead-of-time compile][aot] all your clojure
code. The idea behind both these configs is to make your final uberjar
as lean and performant as possible, at the expense of some (probably
not needed) flexibility.

[aot]: http://clojure.org/compilation

So that&#8217;s it for Chestnut&#8217;s `project.clj`. It looks intimidating at
first, but in the end it is quite approachable when you break it down
into it&#8217;s component pieces.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shaving the Clojurescript Yak(s)]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/04/04/shaving-the-clojurescript-yaks/"/>
    <updated>2015-04-04T13:08:18-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/04/04/shaving-the-clojurescript-yaks</id>
    <content type="html"><![CDATA[About a week ago I got fed up with a [terrible website][mangafox] that
had comics on it I wanted to read.  So I decided to write a little web
app to make the reading experience more pleasant. Since I'm an avid
[Clojurian][clojure], I've been interested in checking out
[Clojurescript][cljs] for doing web development, and in particular
exploring the wonderful new world of React.js wrappers available in
Clojurescript. This is the story of how I learned to setup a
Clojurescript project.

[mangafox]: http://mangafox.me/
[clojure]: http://clojure.org/
[cljs]: http://clojure.org/clojurescript

<!--more-->

Since I&#8217;ve been interested in Clojurescript for a while, and even
toyed with it a few times, I came into this project with at least a
fair idea of what was out there. I knew about Om, and new basically
how the Clojurescript compilation process worked. I also am vaguely
comfortable with setting up a basic Clojure web app using [Ring][ring]
and [Compojure][compojure].

[ring]: https://github.com/ring-clojure/ring
[compojure]: https://github.com/weavejester/compojure

I was also aware that there had been significant advances in the
Clojurescript workflow in the past few years. Most importantly I knew
about an apparently awesome Leiningen project template for
Clojure/Clojurescript web apps called [Chestnut][chestnut]. However,
the times that I had tried to get up and running with Chestnut
previously I was totally overwhelmed by the amount of unfamiliar
code/configuration that it produced. Quite frankly, it seemed
excessive, and quickly led to me giving up on whatever
project-of-the-moment had inspired me.

[chestnut]: https://github.com/plexus/chestnut

So! This time, I determined to not start with Chestnut, and instead
build up slowly from the basic Lein app template that I was already
familiar with. And so commenced roughly five full days of mostly
yak-shaving. I&#8217;m not going to try and recount it all here; just the
highlights will be more than enough.

## How I Shaved My Yak

I started with off with a very vanilla `lein new app
comic-reader`. From there, I copied the basic dependencies for a
jetty/ring/compojure web app from my [url-shortener][shorturl]
project. I made some basic routes to make sure everything was working
correctly.

[shorturl]: https://github.com/RadicalZephyr/url-shortener

Next came adding Clojurescript into the project. This meant setuping
the `project.clj` to point to where the `*.cljs` files would live, and
then configuring the Clojurescript compiler.  Basic Clojurescript
compilation with [lein-cljsbuild][cljsbuild] is not totally trivial to
configure, especially since there are now many different options to
the Clojurescript compiler and many resources on the web have
older/outdated configuration examples, and typically no explanation
whatsoever of why they have it configured they way they do. But
overall it wasn&#8217;t too tough. It helped significantly that I could
again copy setups I had previously found to work.

[cljsbuild]: https://github.com/emezeske/lein-cljsbuild

At this point, I was sick of shaving Yaks for a moment so I went and
learned how to use [Enlive][enlive] for doing
[web scraping][en-scrape]! Then, feeling refreshed, I went back to the
Yak.

[enlive]: https://github.com/cgrand/enlive
[en-scrape]: https://github.com/swannodette/enlive-tutorial#an-introduction-to-enlive

I knew that I wanted the awesome [Figwheel][fig] plugin for an awesome
(mostly) reload-less Clojurescript experience. Again, Figwheel comes
with a Lein template that I didn&#8217;t use directly. Instead, I made an
extra copy and then used it as a reference for when my configuration
based on reading the documentation didn&#8217;t work.

[fig]: https://github.com/bhauman/lein-figwheel

Next step was adding in Om, and making a basic page setup
there. Again, nothing incredibly hard. I mostly just followed the
tutorial and everything came together fairly quickly. Only maybe an
hour of struggling and cursing at my computer. Then, I decided that I
wanted to build a single-page application (SPA). So I started looking
at libraries like [Secretary][secretary] and
[Sablono][sablono]. Eventually, after reading several blog posts and
pages of documentation, I decided that I actually wanted to use
[Reagent][reagent] instead of Om. Luckily I hadn&#8217;t written much actual
code before I came to that decision.

[secretary]: https://github.com/gf3/secretary
[sablono]: https://github.com/r0man/sablono
[reagent]: https://github.com/reagent-project/reagent

After playing with Reagent for a while, I started having difficulty
with thinking about how to use it as the basis for a SPA, especially
with in-browser routing happening, and changing the history token so
that different app states would be bookmark-able. (N.B. I&#8217;ve minimized
the explanation of this considerably. I spent a good chunk of time
wrestling with getting history integration working with Reagent before
realizing that Reagent&#8217;s flow didn&#8217;t make any damn sense to me.)

Back to the Google! After quite a lot of searching, sleeping, reading,
and searching again I found [re-frame][re-frame] and it&#8217;s epic
manifesto. After reading the whole damn thing (and all of the
&#8220;read-this-first&#8221; links), I decided that I would switch from vanilla
Reagent to re-frame. Again, thank goodness I hadn&#8217;t really written any
significant code that was tightly coupled to reagent.

[re-frame]: https://github.com/Day8/re-frame

At this point, most everything worked pretty nicely, but there was
some significant ugliness about. I had my Figwheel configuration
inline in the same file as my main site code, and the clojurescript
configurations for production and dev were getting quite messy. After
incrementally gaining experience with most of the gaggle of
technologies that Chestnut uses, I felt prepared to tackle their
template again. So I started using it as a reference to enhance my own
configuration.

In particular, I started doing this when I wanted to deploy my app to
Heroku. It turns out that there are a whole raft of things that where
wrong with my configuration from Heroku&#8217;s point of view. But after
about two hours of compare/edit/deploy cycles, I finally managed to
deploy my app to Heroku.

## Wrapping Up

To sum it all up, while this was in some ways a very frustrating
exercise (especially at times during the process!), overall it was
also a really excellent learning experience. Too often I try and
approach too many new things all at once. This often leads quickly to
getting overwhelmed by all the new-ness, and then often giving
up. It&#8217;s not a great pattern.

The longer that I practice programming, the more firmly I come to
believe that incremental, evolutions of projects and knowledge are
fundamentally more approachable, sustainable and, quite simply, more
fun!

Now I&#8217;m feeling sort of pumped to do an &#8220;Annotated Chestnut&#8221;
walkthrough of what all the various configurations in Chestnut are
doing, and why they are useful and cool.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adventures With Clojure Macros]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/10/14/adventures-with-clojure-macros/"/>
    <updated>2014-10-14T18:20:56-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/10/14/adventures-with-clojure-macros</id>
    <content type="html"><![CDATA[So, this is the second day of my second week of [Hacker School]. I'm
finally starting to feel like I'm getting into the
groove.

So I tackled [DCPL] in Clojure once again. I found two sort of scary
things. One, although my code was in a git repo, it wasn't pushed to
Github. Two, there was a big hairy macro that had apparently replaced
the core of my postfix program, but it wasn't checked in!!! Bad past
Geoff. Very bad, no good software practices...

[Hacker School]: https://www.hackerschool.com/
[DCPL]: http://mitpress.mit.edu/books/design-concepts-programming-languages

<!--more-->


Anyhow, so I cleaned things up, and pushed up to Github (it&#8217;s
[here][postfix-code] FYI), and then I started playing with that macro
again. Turns out it pretty much worked. After a bit of mucking around
I managed to get it going. This quick success buoyed my spirits and I
thought, why don&#8217;t I write another&#8230; replacing repetitive code is
awesome etc.

[postfix-code]: https://github.com/RadicalZephyr/postfix-clj

Then there I wrote some tests, and it turns out that it didn&#8217;t
actually work. Repeat for the better part of two hours with testing
getting slowly better and my implementation getting slowly more
correct. But, there were lots of little successes throughout, so I
didn&#8217;t get discouraged, and the thrill of surmounting the difficulties
I encountered gave me a warm glow when I overcame them (macro writing
is hard! I know, because [Paul Graham told me so][pgmacro] ;).

[pgmacro]: http://www.paulgraham.com/avg.html

Anyhow, my success at writing this one macro made me want to write
another.  And I immediately saw an opportunity!  All of the binary
math operations for postfix are going to have the exact same form,
even with the last macro I wrote. etc. etc. about that macro, goes
pretty smooth.

Anyhow, so that went alright and now there are a bunch of tests I want
to write, just to validate that my macro is producing reasonable code
and continues to do so.

But&#8230; these tests are going to be SOOOO similar!!!  Are you thinking
what I&#8217;m thinking? Awww, yeah! Time for another macro.

So I start writing a macro to generate some simple tests for me.

All the tests have this general form:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">deftest</span> <span class="nv">subcommand-test</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">testing</span> <span class="s">&quot;Sub command&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">sub-cmd</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'>           <span class="p">[</span><span class="mi">-1</span><span class="p">]))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">sub-cmd</span> <span class="p">[</span><span class="mi">0</span> <span class="mi">3</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'>           <span class="p">[</span><span class="mi">0</span> <span class="mi">1</span><span class="p">]))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nf">thrown-with-msg?</span> <span class="nv">clojure.lang.ExceptionInfo</span>
</span><span class='line'>                          <span class="o">#</span><span class="s">&quot;sub: not enough values on the stack&quot;</span>
</span><span class='line'>                          <span class="p">(</span><span class="nf">sub-cmd</span> <span class="p">[</span><span class="mi">1</span><span class="p">])))))</span>
</span></code></pre></td></tr></table></div></figure>


So I start my macro working on that basic outline. Over the course of
another hour or so, I tweak and work it up to be this:


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">defbinary-op-test</span> <span class="p">[</span><span class="nv">cmd-name</span> <span class="nv">op</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">cmd-name</span> <span class="p">(</span><span class="nb">name </span><span class="nv">cmd-name</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">fn-name</span>  <span class="p">(</span><span class="nb">symbol </span><span class="p">(</span><span class="nb">str </span><span class="nv">cmd-name</span> <span class="s">&quot;-cmd&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">test-args</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="nv">op-result</span> <span class="p">(</span><span class="nb">vector </span><span class="p">(</span><span class="nb">apply </span><span class="nv">op</span> <span class="p">(</span><span class="nb">reverse </span><span class="nv">test-args</span><span class="p">)))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">prn </span><span class="s">&quot;test-args:&quot;</span> <span class="nv">test-args</span> <span class="s">&quot;\nop result:&quot;</span> <span class="nv">op-result</span><span class="p">)</span>
</span><span class='line'>    <span class="o">`</span><span class="p">(</span><span class="nf">testing</span> <span class="o">~</span><span class="p">(</span><span class="nb">str </span><span class="nv">cmd-name</span> <span class="s">&quot; command&quot;</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="o">~</span><span class="ss">&#39;=</span> <span class="p">(</span><span class="o">~</span><span class="nv">fn-name</span> <span class="o">~</span><span class="nv">test-args</span><span class="p">)</span>
</span><span class='line'>              <span class="o">~</span><span class="nv">op-result</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="o">~</span><span class="ss">&#39;=</span> <span class="p">(</span><span class="o">~</span><span class="nv">fn-name</span> <span class="o">~</span><span class="p">(</span><span class="nb">into </span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="nv">test-args</span><span class="p">))</span>
</span><span class='line'>              <span class="o">~</span><span class="p">(</span><span class="nb">into </span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="nv">op-result</span><span class="p">)))</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="o">~</span><span class="ss">&#39;thrown-with-msg?</span> <span class="nv">clojure.lang.ExceptionInfo</span>
</span><span class='line'>                               <span class="p">(</span><span class="nb">re-pattern </span><span class="o">~</span><span class="p">(</span><span class="nb">str </span><span class="nv">cmd-name</span>
</span><span class='line'>                                                 <span class="s">&quot;: not enough values on the stack&quot;</span><span class="p">))</span>
</span><span class='line'>                               <span class="p">(</span><span class="o">~</span><span class="nv">fn-name</span> <span class="p">[</span><span class="mi">1</span><span class="p">]))))))</span>
</span></code></pre></td></tr></table></div></figure>

Okay, it looks like a monster.  But it&#8217;s pretty straightforward.
Since my binary ops are actually implemented by the core functions
they represent I&#8217;m not concerned with the correctness or with testing
that they work per se. I&#8217;m more concerned with the vectors going in
and coming out.  So I figure, I&#8217;ll use the same numbers for all of
them, and have the macro generate the result of actually applying the
given binary operator to the data I&#8217;ve hardcoded.

That&#8217;s whats going inside the `let` with `test-args` and `op-result`.

There are a couple of other tricky things I found out. For instance,
the `is` testing macro is looking for exactly the symbol `=` not for
`clojure.core/=` or for `postfix.core-test/thrown-with-msg?`. I know,
because those are the things `defbinary-op-test` produced before I put
in the unquoted-quote `~&#8217;` to stop the automatic namespace resolution,
as described in the [Joy of Clojure][awesomebook].

[awesomebook]: http://www.manning.com/fogus2/


But then, after I debugged all of these little problems, I discovered
that, though my tests were being generated syntactically correctly,
they were failing!

Now, given the way that I constructed the macro, this didn&#8217;t seem
possible.  I mean, I&#8217;m literally testing that my command, which uses
the given operator, produces the same thing as that operator.

So I dig in to make sure my macro is doing the right stuff, and pull
out `(clojure.pprint/pprint (macroexpand-1 &#8216;(defbinary-op-test add
+)))`

which produces this:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">clojure.test/testing</span>
</span><span class='line'> <span class="s">&quot;add command&quot;</span>
</span><span class='line'> <span class="p">(</span><span class="nf">clojure.test/is</span> <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">add-cmd</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])</span> <span class="p">[</span><span class="mi">3</span><span class="p">]))</span>
</span><span class='line'> <span class="p">(</span><span class="nf">clojure.test/is</span> <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">add-cmd</span> <span class="p">[</span><span class="mi">0</span> <span class="mi">3</span> <span class="mi">1</span><span class="p">])</span> <span class="p">[</span><span class="mi">0</span> <span class="mi">3</span><span class="p">]))</span>
</span><span class='line'> <span class="p">(</span><span class="nf">clojure.test/is</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">thrown-with-msg?</span>
</span><span class='line'>   <span class="nv">clojure.lang.ExceptionInfo</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">clojure.core/re-pattern</span> <span class="s">&quot;add: not enough values on the stack&quot;</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">add-cmd</span> <span class="p">[</span><span class="mi">1</span><span class="p">]))))</span>
</span></code></pre></td></tr></table></div></figure>


Okay, okay everything looks good&#8230; Wait a second&#8230; Did the macro
produce the result that 3 + 1 is 3?  Okay, let&#8217;s take a closer look at
that macro again. Specifically, the two relevant portions of the let:


    test-args [3 1]
    op-result (vector (apply op (reverse test-args)))]


and the part where `op-result` is used:

    (is (~&#8217;= (~fn-name ~test-args)
           ~op-result))


Okay, everthing looks pretty kosher, but to be sure, let&#8217;s try it out
in the repl, with the appropriate values filled in.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">op</span> <span class="nv">+</span>
</span><span class='line'>      <span class="nv">test-args</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">vector </span><span class="p">(</span><span class="nb">apply </span><span class="nv">op</span> <span class="p">(</span><span class="nb">reverse </span><span class="nv">test-args</span><span class="p">))))</span>
</span><span class='line'><span class="c1">;; =&gt; [4]</span>
</span></code></pre></td></tr></table></div></figure>

That&#8217;s correct.  But that macroexpand clearly shows a `[3]` where that
`[4]` should be.

Okay, maybe I didn&#8217;t reproduce something correctly in the REPL.  Let&#8217;s
put some print statements in the macro before the expansion

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">defbinary-op-test</span> <span class="p">[</span><span class="nv">cmd-name</span> <span class="nv">op</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">cmd-name</span> <span class="p">(</span><span class="nb">name </span><span class="nv">cmd-name</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">fn-name</span>  <span class="p">(</span><span class="nb">symbol </span><span class="p">(</span><span class="nb">str </span><span class="nv">cmd-name</span> <span class="s">&quot;-cmd&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">test-args</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="nv">op-result</span> <span class="p">(</span><span class="nb">vector </span><span class="p">(</span><span class="nb">apply </span><span class="nv">op</span> <span class="p">(</span><span class="nb">reverse </span><span class="nv">test-args</span><span class="p">)))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">prn </span><span class="s">&quot;test-args:&quot;</span> <span class="nv">test-args</span> <span class="s">&quot;op result:&quot;</span> <span class="nv">op-result</span><span class="p">)</span>
</span><span class='line'>    <span class="o">`</span><span class="p">(</span><span class="nf">testing</span> <span class="o">~</span><span class="p">(</span><span class="nb">str </span><span class="nv">cmd-name</span> <span class="s">&quot; command&quot;</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="o">~</span><span class="ss">&#39;=</span> <span class="p">(</span><span class="o">~</span><span class="nv">fn-name</span> <span class="o">~</span><span class="nv">test-args</span><span class="p">)</span>
</span><span class='line'>              <span class="o">~</span><span class="nv">op-result</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="o">~</span><span class="ss">&#39;=</span> <span class="p">(</span><span class="o">~</span><span class="nv">fn-name</span> <span class="o">~</span><span class="p">(</span><span class="nb">into </span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="nv">test-args</span><span class="p">))</span>
</span><span class='line'>              <span class="o">~</span><span class="p">(</span><span class="nb">into </span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="nv">op-result</span><span class="p">)))</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="o">~</span><span class="ss">&#39;thrown-with-msg?</span> <span class="nv">clojure.lang.ExceptionInfo</span>
</span><span class='line'>                               <span class="p">(</span><span class="nb">re-pattern </span><span class="o">~</span><span class="p">(</span><span class="nb">str </span><span class="nv">cmd-name</span>
</span><span class='line'>                                                 <span class="s">&quot;: not enough values on the stack&quot;</span><span class="p">))</span>
</span><span class='line'>                               <span class="p">(</span><span class="o">~</span><span class="nv">fn-name</span> <span class="p">[</span><span class="mi">1</span><span class="p">]))))))</span>
</span></code></pre></td></tr></table></div></figure>

When I reload the namespace I get this:

    :reloading (postfix.core postfix.core-test)
    &#8220;test-args:&#8221; [3 1] &#8220;op result:&#8221; [3]
    &#8220;test-args:&#8221; [3 1] &#8220;op result:&#8221; [3]
    &#8220;test-args:&#8221; [3 1] &#8220;op result:&#8221; [3]
    &#8220;test-args:&#8221; [3 1] &#8220;op result:&#8221; [3]

Okay, that&#8217;s clearly what&#8217;s happening but it&#8217;s still really strange
that the `[3]` is showing up at all. So how about a
[minimal working example][MWE] (or rather, not-working in this case)?

[MWE]: https://en.wikipedia.org/wiki/Minimal_Working_Example


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">deftestaddproblem</span> <span class="p">[</span><span class="nv">op</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">test-args</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="nv">op-result</span> <span class="p">(</span><span class="nb">vector </span><span class="p">(</span><span class="nb">apply </span><span class="nv">op</span> <span class="p">(</span><span class="nb">reverse </span><span class="nv">test-args</span><span class="p">)))]</span>
</span><span class='line'>    <span class="o">`</span><span class="p">[</span><span class="o">~</span><span class="nv">test-args</span> <span class="o">~</span><span class="nv">op-result</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


Then macroexpanding it:


    (clojure.pprint/pprint (macroexpand-1 &#8216;(deftestaddproblem +)))
    [[3 1] [3]]


Just for sanity, lets make sure it&#8217;s the right version of `+`:


    (clojure.pprint/pprint (macroexpand-1 &#8216;(deftestaddproblem clojure.core/+)))
    [[3 1] [3]]


What is going on!?!?!?!?! Okay, back to the REPL. This time, a raw
REPL from `lein repl` in my home directory.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="kd">defmacro </span><span class="nv">dotest</span> <span class="p">[</span><span class="nv">op</span><span class="p">]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>   <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">test-args</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>         <span class="nv">op-result</span> <span class="p">(</span><span class="nb">vector </span><span class="p">(</span><span class="nb">apply </span><span class="nv">op</span> <span class="p">(</span><span class="nb">reverse </span><span class="nv">test-args</span><span class="p">)))]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>     <span class="o">`</span><span class="p">[</span><span class="o">~</span><span class="nv">test-args</span> <span class="o">~</span><span class="nv">op-result</span><span class="p">]))</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;user/dotest</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest</span> <span class="nv">+</span><span class="p">)</span>
</span><span class='line'><span class="p">[[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">3</span><span class="p">]]</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest</span> <span class="nv">-</span><span class="p">)</span>
</span><span class='line'><span class="p">[[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">3</span><span class="p">]]</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest</span> <span class="nv">*</span><span class="p">)</span>
</span><span class='line'><span class="p">[[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">3</span><span class="p">]]</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest</span> <span class="nv">/</span><span class="p">)</span>
</span><span class='line'><span class="p">[[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">3</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;; And without using the macro preprocessing</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">vector </span><span class="p">(</span><span class="nb">apply + </span><span class="p">(</span><span class="nb">reverse </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])))</span>
</span><span class='line'><span class="p">[</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">vector </span><span class="p">(</span><span class="nb">apply - </span><span class="p">(</span><span class="nb">reverse </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])))</span>
</span><span class='line'><span class="p">[</span><span class="mi">-2</span><span class="p">]</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">vector </span><span class="p">(</span><span class="nb">apply * </span><span class="p">(</span><span class="nb">reverse </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])))</span>
</span><span class='line'><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">vector </span><span class="p">(</span><span class="nb">apply / </span><span class="p">(</span><span class="nb">reverse </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])))</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="nv">/3</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Removing more complexity...</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="kd">defmacro </span><span class="nv">dotest2</span> <span class="p">[</span><span class="nv">op</span><span class="p">]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>   <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">test-args</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>         <span class="nv">op-result</span> <span class="p">(</span><span class="nb">apply </span><span class="nv">op</span> <span class="nv">test-args</span><span class="p">)]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>    <span class="o">`</span><span class="p">[</span><span class="o">~</span><span class="nv">test-args</span> <span class="o">~</span><span class="nv">op-result</span><span class="p">]))</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;user/dotest2</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest2</span> <span class="nv">+</span><span class="p">)</span>
</span><span class='line'><span class="p">[[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest2</span> <span class="nv">-</span><span class="p">)</span>
</span><span class='line'><span class="p">[[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest2</span> <span class="nv">*</span><span class="p">)</span>
</span><span class='line'><span class="p">[[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest2</span> <span class="nv">/</span><span class="p">)</span>
</span><span class='line'><span class="p">[[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; And again outside of the macro</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">apply + </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">apply - </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">apply * </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">apply / </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; More experiments</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="kd">defmacro </span><span class="nv">dotest3</span> <span class="p">[]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>   <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">+-res</span> <span class="p">(</span><span class="nb">apply + </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>         <span class="nv">--res</span> <span class="p">(</span><span class="nb">apply - </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>         <span class="nv">*-res</span> <span class="p">(</span><span class="nb">apply * </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>         <span class="nv">div-res</span> <span class="p">(</span><span class="nb">apply / </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">])]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>    <span class="o">`</span><span class="p">[</span><span class="o">~</span><span class="nv">+-res</span> <span class="o">~</span><span class="nv">--res</span> <span class="o">~</span><span class="nv">*-res</span> <span class="o">~</span><span class="nv">div-res</span><span class="p">]))</span>
</span><span class='line'><span class="mi">3</span><span class="o">#</span><span class="ss">&#39;user/dotest3</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest3</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mi">4</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; And another</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="kd">defmacro </span><span class="nv">dotest4</span> <span class="p">[]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>   <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">args</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>         <span class="nv">+-res</span> <span class="p">(</span><span class="nb">apply + </span><span class="nv">args</span><span class="p">)</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>         <span class="nv">--res</span> <span class="p">(</span><span class="nb">apply - </span><span class="nv">args</span><span class="p">)</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>         <span class="nv">*-res</span> <span class="p">(</span><span class="nb">apply * </span><span class="nv">args</span><span class="p">)</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>         <span class="nv">div-res</span> <span class="p">(</span><span class="nb">apply / </span><span class="nv">args</span><span class="p">)]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>    <span class="o">`</span><span class="p">[</span><span class="o">~</span><span class="nv">+-res</span> <span class="o">~</span><span class="nv">--res</span> <span class="o">~</span><span class="nv">*-res</span> <span class="o">~</span><span class="nv">div-res</span><span class="p">]))</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;user/dotest4</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest4</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mi">4</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; This might be important...</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="kd">defmacro </span><span class="nv">dotest5</span> <span class="p">[</span><span class="nv">op</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>   <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">res</span> <span class="p">(</span><span class="nb">apply </span><span class="nv">op</span> <span class="nv">args</span><span class="p">)]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>    <span class="o">`</span><span class="p">[</span><span class="o">~</span><span class="nv">op</span> <span class="o">~</span><span class="nv">args</span> <span class="o">~</span><span class="nv">res</span><span class="p">]))</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;user/dotest5</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest5</span> <span class="nb">+ </span><span class="p">[</span><span class="mi">3</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'><span class="nv">ArityException</span> <span class="nv">Wrong</span> <span class="nv">number</span> <span class="nv">of</span> <span class="nv">args</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="nv">passed</span> <span class="nv">to</span><span class="err">:</span> <span class="nv">Symbol</span>  <span class="nv">clojure.lang.Compiler.macroexpand1</span> <span class="p">(</span><span class="nf">Compiler.java</span><span class="ss">:6557</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Or not... may just be a problem</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="kd">defmacro </span><span class="nv">dotest5</span> <span class="p">[</span><span class="nv">op</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>   <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">res</span> <span class="p">(</span><span class="nb">apply </span><span class="nv">op</span> <span class="nv">args</span><span class="p">)]</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">_=&gt;</span>  <span class="o">`</span><span class="p">[</span><span class="o">~</span><span class="nv">args</span> <span class="o">~</span><span class="nv">res</span><span class="p">]))</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;user/dotest5</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dotest5</span> <span class="nb">+ </span><span class="p">[</span><span class="mi">1</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'><span class="p">[[</span><span class="mi">1</span> <span class="mi">2</span><span class="p">]</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; For sanity checking purposes, since apply can only be used with</span>
</span><span class='line'><span class="c1">;; functions</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">fn?</span> <span class="nv">+</span><span class="p">)</span>
</span><span class='line'><span class="nv">true</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">fn?</span> <span class="nv">-</span><span class="p">)</span>
</span><span class='line'><span class="nv">true</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">fn?</span> <span class="nv">*</span><span class="p">)</span>
</span><span class='line'><span class="nv">true</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">fn?</span> <span class="nv">/</span><span class="p">)</span>
</span><span class='line'><span class="nv">true</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; And as Kevin Lynagh helpfully pointed out to me, macros don&#39;t</span>
</span><span class='line'><span class="c1">;; evaluate their arguments...  Time to re-read the section on macros</span>
</span><span class='line'><span class="c1">;; in Joy of Clojure</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">apply </span><span class="ss">&#39;+</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">apply </span><span class="p">(</span><span class="nb">eval </span><span class="ss">&#39;+</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeJOS and Clojure]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/04/17/lejos-and-clojure/"/>
    <updated>2014-04-17T18:00:00-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/04/17/lejos-and-clojure</id>
    <content type="html"><![CDATA[This is a short followup to my first post about
[experimenting with the Lego EV3's][lego-ev3] and [leJOS]. Shortly
after I wrote that post, I went on the Clojure IRC channel and talked
to [Phil Hagelberg][technomancy] and some other helpful folks about my
issues. They steered me away from attempting to install [Leiningen] on
the EV3 itself, which was a relief since I think that way lay
madness. Instead, they suggested that I have a small launcher program
that would just setup a REPL. Then I could run my robot-controlling
Clojure code from there.

[lego-ev3]: /blog/2013/10/31/leJOS-and-EV3/

<!--more-->

This advice led to the creation of [ev3-nrepl]. It&#8217;s basically a small
skeleton Clojure project to provide the basis for running Clojure code
on the EV3. It&#8217;s a minimalist setup, so it should provide a good
starting point for other people to continue experimenting. I tried to
explain how to use it fairly clearly, as well as add all the links to
the necessary documentation to get leJOS running on the EV3.

Unfortunately, despite this seemingly great start, I never ended up
actually doing anything interesting with Clojure on the EV3. There are
two related reasons for this. First, the robotics class I was in
started having actual coding assignments (thanks to the fact that we
could now run leJOS). Second, it turns out that leJOS is designed from
an incredibly stateful and imperative point of view. This makes it
very hard to develop clean Clojure code that makes use of their
API. Specifically, leJOS makes the assumption that any code making use
of it is going to start-up, do robot stuff, and then die. A Clojure
REPL obviously breaks this assumption rather badly. As it turned out,
this was the most painful when I was trying to figure out how to
program and build my robot at the same time.

What I wanted to do was be able to open a Clojure REPL connect to it,
and then leave it running for a long time. This is my normal modus
operandi, but the EV3 makes it even more critical that this
work. Because of the limited hardware, it takes several minutes for
nrepl to actually boot up.

I think that using Clojure as a prototyping tool for building robots
with the EV3 could be incredibly powerful. All of the
[arguments](http://www.infoq.com/presentations/Clojure-Java-Interop)
for why Clojure is a great language for exploring Java API&#8217;s are
applicable to working with the EV3 API&#8217;s. Possibly even more so, since
there is something really, really cool about typing some commands at
the REPL and having your robot start moving around and doing
stuff. Unfortunately, because of the current architecture of leJOS and
the limited processing power of the EV3&#8217;s it&#8217;s not quite there yet.

[leJOS]: http://lejos.org
[technomancy]: http://technomancy.us/
[leiningen]: http://leiningen.org/
[ev3-nrepl]: https://github.com/RadicalZephyr/ev3-nrepl
]]></content>
  </entry>
  
</feed>
