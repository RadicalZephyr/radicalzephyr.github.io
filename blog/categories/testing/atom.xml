<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testing | Zephyrizing]]></title>
  <link href="http://www.zephyrizing.net/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://www.zephyrizing.net/"/>
  <updated>2015-05-20T01:09:06-05:00</updated>
  <id>http://www.zephyrizing.net/</id>
  <author>
    <name><![CDATA[Geoff Shannon]]></name>
    <email><![CDATA[geoffpshannon@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing and the Structures of Learning Environments]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/05/06/testing-and-the-structures-of-learning-environments/"/>
    <updated>2015-05-06T09:22:53-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/05/06/testing-and-the-structures-of-learning-environments</id>
    <content type="html"><![CDATA[I've been fortunate this last year in getting to spend time in several
radically different learning environments in a relatively short span
of time. These experiences have gotten me thinking about the relative
pros and cons, also about how I respond to the amount of structure the
environment offers.

<!--more-->

### The University

Okay, let&#8217;s start off with the most structured of all, the
university. &#8220;formal education&#8221; is certainly the most structured of all
the environments I&#8217;ve been in recently. Apart from the lower-levels of
the same system, I&#8217;m having a hard time of thinking of a more
structured type of learning. I&#8217;ve written before quite extensively
about specific problems I have with the established school system, so
I&#8217;ll just leave it at that. However, university courses are highly
structured. They are actually required to by the nature of the
system. Even Fairhaven College, a place which essentially strives for
less structure only achieves that, less structure.

An excellent symbol (and indeed, a representation) of that structure
is the course syllabus. Contained in that one document are supposed to
be all the expectations and requirements for &#8220;doing well&#8221; in the
class. I noticed something towards the end of my college career. These
documents started getting more formulaic. In fact, they seem to be
approaching the type of jargon-ified meanings as &#8220;lawyer-ese.&#8221; For
instance, my university had a policy that no assignments could be
given to students during &#8220;dead week&#8221; - the week before finals -
*unless* the teacher had mentioned that it was possible in the
syllabus.

Because of this, many professors simply had a clause in their &#8220;stock&#8221;
syllabus that mentioned that there might be assignments due during
dead week, just to reserve the option. First of all, I have a problem
with a document that requires so much boilerplate that there can be a
&#8220;stock&#8221; version of it. Second, the system of rules and requirements
that caused teachers to always include a certain statement in the
syllabus regardless of their plans for the class, made the whole
system into a game, pitting students against each other, and often
also into opposition with their professors.

I resisted playing this game for a long time (most of my life
actually). After taking two years off from school when my mother fell
ill, I came back with a conviction that this game was a necessary evil
that I needed to play, and play well. So I did. I got excellent grades
in my last several quarters at Western in all of my classes, despite
taking heavy credit loads of all difficult classes. But I didn&#8217;t learn
as much.

My normal method of doing school appears somewhat lackadaisical
compared to the studious diligence of many &#8220;good&#8221; students. But part
of the reason for this is that I tend to follow my interests, and go
well beyond what is being asked of me by the teacher. A classic
example was a paper I needed to write for a history class in high
school. I needed to do research on some historical topic, but on the
way I stumbled upon some fascinating information about dolphins. I
spent most of my evening reading and learning much about dolphins, and
not researching for the paper. My high school pre-Calculus teacher
summarized my attitude towards school by bestowing an award on me at
the end of the year: &#8220;Highest Learning to Grade ratio.&#8221;

### The Recurse Center

At the opposite end of the structure spectrum we have the Recurse
Center. It is often difficult to explain to people exactly why I chose
to go to the Recurse Center last fall. I usually fall back on
paraphrasing the tag line from their website:

> The Recurse Center is a free, self-directed, educational retreat for
> people who want to get better at programming, whether they&#8217;ve been
> coding for three decades or three months.

The key part of that statement for me is the &#8220;self-directed&#8221;
portion. The vast majority of what I learned during my CS degree came
from entirely self-directed exploration so it seemed like a natural
fit.

But they are serious when they say self-directed. The structure of
their environment is at a very bare minimum. About as bare as you can
get I think and still build a sense of community around a shared
experience. The structure and workings of the Recurse Center have been
written about by many of the students as well as the people who run
it. But for comparison&#8217;s sake, I want to mention the few structural
elements that make up the Recurse Center.

First, they spend a half day at the beginning of the batch with a
welcome meet-and-greet breakfast. This is followed by talks by the
founders and facilitators to &#8220;set the tone&#8221; and people&#8217;s expectations
for the batch. These mostly consist of talking about what they want
the Recurse Center to be, and the lightweight social rules that they
follow to help achieve that. After that, there are a few logistical
matters like keycards and access to the chat client, but then you are
thrown head-first into being at the Recurse Center: i.e. sitting in
room with about 60 other people, and learning about programming.

There are a few more things, like the Monday night talks by the
current resident or other interesting person, or the daily checkins
with other RC&#8217;ers. But other than that pretty much everything is up to
the participants of the batch. If people want to organize a daily
reading group you can do that. Or you can find someone interested in
pairing on a project with you. Or you can go to a short
presentation/talk someone has decided to give.

If this sounds vague and confusing it&#8217;s because of the lack of
structure. It sounds like a platitude, but spending three months at
the Recurse Center really can be whatever you want it to be. A lot of
people take some time to adjust to this looseness, and there are
facilitators whose job is precisely that, to facilitate people in
their self-directed learning. Whether that means brain-storming about
projects to work on, or giving code review, or pairing on a
particularly difficult problem their whole job is to be available to
help RC&#8217;ers make the most of their time their. As a bonus they get to
spend their days doing their own self-directed learning.

The structure - or lack thereof - of the Recurse Center was inspired
at least in part by the unschooling movement as talked about by Grace
Llewellyn. I&#8217;ve [written before][unschoolove] about how I fell in love
with the idea of unschooling. But my time at the Recurse Center was
the first time I actually got to fully and intentionally practice
it. Three months was not long enough.

[unschoolove]: /blog/2014/05/06/s-and-e-part-three:-the-teenage-liberation-handbook/

Despite the brevity of the experience, it did me a world of good. My
last year at college playing their game to the hilt sort of killed
something in me. I stopped enjoying programming, and I stopped seeking
out learning on my own as much. Killed is a rather strong word but
that&#8217;s how it felt. Maybe it would be more appropriate to say that it
simply wore me out. I had no energy, no [gumption] left to put into
anything. At the Recurse Center though, I built massive amounts of
gumption. So much so that I haven&#8217;t seriously found myself lacking it
since. If for only that reason, the Recurse Center was the perfect
antidote to my time at university. And I rediscovered my joy in
programming.

[gumption]: /blog/2014/05/01/s-and-e-part-two:-gumption/

### 8th Light

Now I&#8217;m an apprentice at 8th Light. I sought out 8th Light primarily
because of their apprenticeship program, and the remarkable similarity
it bore to [my own idealized conception][codeacademy] of how to teach
someone how to program.

[codeacademy]: /blog/2014/06/07/s-and-e-part-seven:-onward/

It is sort of a fascinating and fortuitous coincidence that the amount
of structure here is in between that found at the Recurse Center and
in universities. Whether it is actually &#8220;just right&#8221; remains to be
seen. So far the balance between guidance and self-directed
exploration has been fairly ideal. Having weekly check-in&#8217;s with my
mentors puts a firm bound on how long I might drift without
purpose. Though I haven&#8217;t found that to be a problem here, it was
definitely something I needed to be mindful of during my time at the
Recurse Center. I also find it helpful to have a direction set for me,
with concrete and achievable tasks to mark the route.

One interesting thought I&#8217;ve had recently is an analogy between the
structure of these various learning environments and software testing.
I think that the Recurse Center is much like the undisciplined hacking
on a pet project. There may be tests, but they are impromptu and
somewhat haphazard. More projected onto the structure of the code
after completion than designed into it from the beginning. You can get
a lot done in this fashion, but it&#8217;s also easy to get lost in the
weeds (though this is largely the point as far as many RC&#8217;ers are
concerned).

A university degree program is then more like poorly executed TDD. The
tests are written first - mostly. But they are written with a mind to
*how* the task will be accomplished and are tightly, almost
inextricably, coupled to the implementation. They define a rigid but
currently stable and verified system. But woe betide the person who
tries to change anything, because much of the code and all of the
tests will break.

8th Light then is TDD done well. The tests are written first and they
specify the behavior of the system, not the implementation. The
desired goal is achieved through (rapid) iteration and feedback.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning TDD]]></title>
    <link href="http://www.zephyrizing.net/blog/2015/04/14/learning-tdd/"/>
    <updated>2015-04-14T14:37:34-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2015/04/14/learning-tdd</id>
    <content type="html"><![CDATA[This is my first week at 8th Light and I've been working on writing an
object-oriented Tic Tac Toe program.  This would be no big deal for
typically, even though I'm doing it in a language I'm unfamiliar with.

Except! I'm trying to very rigorously drive the development with
tests.

<!--more-->

This is a fairly new experience for me. I mean, sure, when I first
read about TDD a while ago, I got really interested and excited about
it. I played with it a little bit, and tried to do some small stuff in
it. But I quickly got overwhelmed with the difficulty of &#8220;How do you
even get started?&#8221;

Monday, I made very minimal progress. I felt stuck not really sure
where to begin, and what to do. I ended up by basically writing tests
for a simple Board data class where I could make marks, and then see
that the marks were actually set. This felt highly unimpressive as the
output of my first day.

Tuesday and Wednesday I made some more progress. The thing that helped
for most was certainly reaching out for guidance from my mentors. I
had a good conversation with Brian. Despite it&#8217;s somewhat brief and
vague nature it actually was very helpful. And I did some pairing with
Zach that really helped on the Ruby comfortability front. Just seeing
how someone who knows how to use Ruby approaches things made me feel
more confident and grounded in the language.

I also did quite a bit of Googling and reading about Ruby concepts and
paradigms. There wasn&#8217;t anything really specific that I was looking
for, I was just trying to absorb some of the context of the community
by seeing what is talked about and the sorts of code snippets that are
out there. To an outside observer this probably seemed mostly like
procrastinating. To be fair, I sort of judged it that way myself.

The thing is though, in all my professional software development work,
I&#8217;ve noticed that whenever I end up procrastinating and sort of
&#8220;working around&#8221; a difficulty I&#8217;m having a peculiar thing happens. If
I try to force myself to face it head on and work at it, nothing
really good comes out of it. Often I just end up feeling stuck and
then I&#8217;m really unproductive, just staring at the keyboard.

But I find if I just relax into the procrastination, and try to stay
working on related things, that eventually everything sort of gels in
my mind, and then when I come back to the &#8220;hard&#8221; thing I&#8217;m usually
able to make some useful headway.

Today was that day for TDD in Ruby; I felt like everything sort of
came together. I came into work determined not to &#8220;procrastinate&#8221; like
I did for much of yesterday. I started off by starting to test drive a
Console or display class. But I quickly realized that this would just
be a thin wrapper on top of the IO class that already exists in Ruby!
So I went back to implementing my game class, and used mocks to
replace an instance of an IO class.

From there I got into a very nice flow. Even the tricky nature of
testing the main game loop didn&#8217;t seem overly difficult in my mind. By
the end of the day I had gotten to the point where I couldn&#8217;t really
think of any more functionality that would be needed to play an actual
game at the command line.

When I wired up the class to finally actually test it from end to end
and try to play a game, there were some unexpected problems. But the
basic logical structure of the game was pretty much entirely
correct. And I knew it would be, because of the tests that I wrote.

Very cool.
]]></content>
  </entry>
  
</feed>
