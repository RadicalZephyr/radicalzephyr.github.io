<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: S&e | Zephyrizing]]></title>
  <link href="http://www.zephyrizing.net/blog/categories/s-and-e/atom.xml" rel="self"/>
  <link href="http://www.zephyrizing.net/"/>
  <updated>2015-04-16T18:52:00-05:00</updated>
  <id>http://www.zephyrizing.net/</id>
  <author>
    <name><![CDATA[Geoff Shannon]]></name>
    <email><![CDATA[geoffpshannon@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Onward]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/06/07/s-and-e-part-seven:-onward/"/>
    <updated>2014-06-07T22:00:00-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/06/07/s-and-e-part-seven:-onward</id>
    <content type="html"><![CDATA[The path to my graduation has been a long one. For almost a year now
different people have been asking me what I'm going to do once I
graduate. For the most part my answer has been that I'm focusing on
getting to graduation, and I'll handle the rest as it comes.

<!--more-->

While probably not the most satisfying answer, it seems to suffice.
The truth is, I&#8217;ve made enough of a plan that I won&#8217;t have to scramble
for a job once I do graduate. I have an offer from Sage Bionetworks -
the company that I did an internship with - to do some part-time
contract programming for them. The pay rate is low for my industry,
but it is a very livable wage. The plan is that I can relax and
decompress from the madness of my final weeks at Western while working
for Sage. It will be another Vacation. Then, when I&#8217;m ready, I can
start to apply for a more long term position at a place of my
choosing.

I&#8217;ve been ruminating on the different possibilities for where I&#8217;d like
to work. By and large, I have set my sights high, and I have a
short-list of companies that I would like to work for. I was content
with this loose plan; that is, until a few days ago.

On Monday, April 14 I was killing time between classes by browsing the
internet, when I stumbled across something called Hacker School. Now,
the mainstream media may have given you an idea of what the word
hacker means.  Let me define how it is used in programming circles.

A hacker is not someone who breaks into computer systems for fun or
profit. Those people are known as crackers and are regarded among
programmers as the criminals that they usually are. To programmers,
&#8220;Hacker&#8221; signifies someone who is very good at coming up with clever
and interesting solutions to any sort of problem. Eric Raymond writes
about the definition of a hacker in his guide, &#8220;How to Become a
Hacker&#8221;:

> &#8220;There is a community, a shared culture, of expert programmers and
> networking wizards that traces its history back through decades to
> the first time-sharing minicomputers and the earliest ARPAnet
> experiments. The members of this culture originated the term
> ‘hacker’. Hackers built the Internet. Hackers made the Unix
> operating system what it is today. Hackers make the World Wide Web
> work.&#8221;

When I saw the name &#8220;Hacker School,&#8221; I was immediately intrigued and
needed to investigate. The Hacker School website self-describes the
program as &#8220;like a writer&#8217;s retreat for programmers.&#8221; It is organized
into three &#8220;batches&#8221; per year, where each batch is made up of roughly
60 people. A batch consists of all the people coming together to work
in a shared space in New York City for a period of three months. The
primary purpose of Hacker School is to help participants grow
significantly as programmers. This is what they have to say about
their pedagogy:

> &#8220;&#8230;Hacker School is largely unstructured, self-directed, and
> project-based. That&#8217;s because we value internal motivation over
> external motivation, and self-direction over coercion. We believe
> people learn best when they have the freedom to explore their
> interests and passions, surrounded by friendly and intellectually
> curious peers and mentors.&#8221;

I had two major emotional reactions as I read more of Hacker School&#8217;s
website: elation, and frustration. Both emotions were highly familiar
to me. These feelings were almost identical to my first experience
with the _Teenage Liberation Handbook_.

This last year has been a trial for me academically. I have taken the
heaviest loads of my entire college career during these last three
quarters. I have sustained my motivation to do this by remembering how
near I am to completing this dreadful prerequisite to the rest of my
life. When I started to understand what Hacker School was, some
crucial part of this motivation broke.

Through my experiences during the time I took off after my junior year
I managed to convince myself that I needed to finish my Computer
Science degree in order to find work as a programmer. That conviction
is part of what I was looking for when I took that time off. I was
unsure how meaningful my degree would be, and that was preventing me
from being fully committed. The difficulty I had simply getting
responses to my resume, and what I learned talking to professional
programmers, managed to convince me of the utility of finishing my
degree.

Hacker School promises that there is a different path. Once again, I
find myself in the position of asking &#8220;Why didn&#8217;t I know about this?&#8221;
The synchronicity of this is amazing: I dropped all my classes just
weeks after the second Hacker School batch began. If I had known about
it, I might have followed an entirely different path.

What is it about our society that these less travelled paths are so
invisible? In much of our literature and art we venerate those who
take these alternate paths. Daniel Quinn unintentionally proposes a
partial answer in his books _Ishmael_, _My Ishmael_, and _The Story of
B_. The basic idea that he writes about is that the dominant culture
in the world today is essentially formed around a single idea: that
there is one right way to live.

There is a great deal more to his analysis. One of the most important
pieces to me is that our cultural paradigm is such that we can be told
by others how we should live, but it is taboo to try and discover it
for ourselves. Why is that so? Does it have to be that way? Or can we
as a society learn to continually re-evaluate what we are doing and
how we are living?

These questions are a fundamental part of the way I am trying to live
my life. They are my companions. My guides.

There is a set of practices in the programming world today that have
become something of a fad. It is most generally identified by the name
&#8220;Agile Development.&#8221; One of the original co-authors of the _Manifesto
for Agile Software Development_ recently wrote a blog post entitled
&#8220;Agile Is Dead (Long Live Agility).&#8221; In it he describes the genesis of
the Manifesto and how the word Agile has subsequently been subverted
to the point of losing all meaning. Several times throughout the
article he mentions the four values that brought about the original
Manifesto.

 - *__Individuals and Interactions__* over _Processes and Tools_
 - *__Working Software__* over _Comprehensive Documentation_
 - *__Customer Collaboration__* over _Contract Negotiation_, and
 - *__Responding to Change__* over _Following a Plan_

Along with these four key values, the manifesto also contained a list
of practices that the founders associated with them. The second value
is the most directly tied to programming. Both the second and third
values are fairly tied to the world of business and programming. But I
think that the first and fourth values may actually be excellent
guides for living in a more universal sense.

The idea of living in a world were we value individuals and
interactions more than we value processes and tools is highly
appealing to me. I think it&#8217;s telling to look at the people who
develop software and seeing them develop these ideas. Most of what we
do is to develop tools! I don&#8217;t even know how to explain how important
I think the fourth value is.

Most importantly, with minor creative adaptation, the ideas that
surround these two values are applicable to the way that we inhabit
this planet we call home. I have many vague future plans for my
life. I know that something I feel strongly committed to is trying to
help change our modern culture from being so destructive towards the
planet. This sounds like a big job. But, as my friend Garrett likes to
keep saying &#8220;You have to focus on the things that you can actually
begin to address.&#8221; I whole-heartedly agree.

There are three problems that I&#8217;ve been pondering during the last few
years. First, many people who are in the business of programming have
talked about how difficult it is to hire programmers. Particularly,
how it&#8217;s really hard to hire good programmers. Second, I turned 18 and
entered the world of work just a year or two before the &#8220;great
recession&#8221; hit. One thing that I have noticed is that entry-level jobs
in pretty much every field out there have disappeared. What has
replaced them are internships; often unpaid. Third, during my time
working as a freelance programmer, I noticed that there was a certain
size of problem that is very awkward to try and solve. Large enough to
require experienced developers, but not quite large enough to justify
the resources required to hire the right caliber of professional.

These three problems have led me to the idea of creating a company
intended to address all three of these issues. I call it the Code
Academy. There are three core values that have guided my thoughts
about how the Academy would work.

First, everyone gets paid. In the society we live in today it simply
isn&#8217;t feasible for most people to do work without being paid. It&#8217;s
also incredibly unfair. The flip side to this is that everyone should
be paid commensurately to how much they are contributing.

Second, everyone will work on real projects. One of the most
detrimental things about the Computer Science program at Western - and
in universities in general - is that they invariably have students
work on &#8220;toy projects.&#8221; By this, I mean a couple of things. First, the
time students have to work on any one project is very limited. Worse,
it&#8217;s limited in an artificial way, constricted by the bounds of a
single school &#8220;unit,&#8221; whether that is a quarter or a semester. Second,
because of the need for the university to rank students with grades,
most code is written by only one student. Collaboration, a key
component of all real-world programming, is actively disallowed under
the purview of academic dishonesty. Finally, somewhat corollary to the
first two, students get to write all of their code from scratch.

This is probably the worst of the &#8220;toy code&#8221; effects. In the
professional programming world, far less new code is written. In
general, there&#8217;s a rule that &#8220;code is read far more often than it is
written.&#8221; A large part of any programmer&#8217;s job is going to be dealing
with pre-existing code. Whether that will be in order to modify it to
do something new, or simply to fix minor imperfections or &#8220;bugs&#8221; in
it, most programmers spend a substantial portion of their time
attempting to read and understand code that other people have
written. This is simply not a skill that is taught or even given a
cursory mention in the typical Computer Science curriculum.

The final core value of my Code Academy is that the best way to learn
is to teach. I&#8217;ve been a mentor for the CS department for nearly four
years now. During that time I have helped other students overcome a
wide range of issues. Many of the problems that they faced were issues
I never encountered in my own work. In addition, having to explain
complex programming topics to people with little background in it has
been a challenging task. I&#8217;m reminded by a quote attributed to Albert
Einstein: &#8220;If you can&#8217;t explain it simply, you don&#8217;t understand it
well enough.&#8221; The efforts I have gone through to try and explain deep
and complex topics in Computer Science to novices and laymen alike has
deepened my own understanding of those topics immeasurably.

In the context of the Code Academy, teaching as learning will play an
extraordinarily important role. I see a system where as novices become
journeymen, they immediately become responsible for mentoring new
novices. This will help them solidify their own understanding.

This Code Academy is a long term dream. My conception of it is still
nascent. Also, I don&#8217;t feel that I&#8217;m currently qualified, or prepared
to undertake this particular journey. I still have a lot of growing to
do, both as a programmer. This is actually one of the reasons that I
am so looking forward to going to Hacker School. My Code Academy
springs from a desire to address similar problems that the Hacker School
founders are trying to ameliorate. But our approach is in some ways
fundamentally different. I hope to learn a lot from how Hacker School
is structured in addition to what I get out of being there as a student.

### Afterthought

For the non-programmers in the audience, there is a small amount of
symbolism in the numbering of the sections. Since most programs grow
and change substantially throughout their life time, they are given
version numbers to help both the developers and their users
communicate about which iteration of the software is being used, or
has a problem. These version numbers typically have the form of two or
three integers separated by periods (i.e. &#8220;1.0&#8221; or &#8220;1.0.0&#8221;).

Each position has a specific meaning. The leftmost number indicates
the &#8220;major version number.&#8221; This is usually started at 1, and then
increases monotonically when major changes to the software are made. I
saw a picture on the internet recently that illustrates the level of
change I&#8217;m talking about quite well. To explain what changes were made
for version 2.0.0 of some piece of software, the author said &#8220;Rewrote
everything.&#8221; It is usually expected that users will have to repurchase
the software in some fashion after major version increments.

The middle number is the minor version number. This is reserved for
significant updates to the product. Typically minor version updates
are the addition of minor new features or fixes. The final version
number, which is often omitted in software for &#8220;end users&#8221; - as
opposed to software that developers themselves use - is the patch
number. This is used for when very small fixes to minor flaws need to
be released.

The life-cycle of a piece of software starts out usually with either
no version number, or with a version of 0.1.0. The initial zero for
the major version means that this piece of software is still a work in
progress that is evolving too rapidly to justify updating the version
number every time changes are made.

<sub>The original formatting of this paper (written in markdown,
compiled to LaTeX with pandoc and then into a pdf with pdflatex, all
orchestrated by a Makefile naturally :) had no major sections so every
section had a leading &#8220;0.&#8221;</sub>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Waiting]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/06/03/s-and-e-part-six:-waiting/"/>
    <updated>2014-06-03T22:00:00-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/06/03/s-and-e-part-six:-waiting</id>
    <content type="html"><![CDATA[When I read, I immerse myself in the words. Reading has always been
an escape for me. I would used to sit for hours in my mother's house
reading - no, devouring - books, using them to escape from the world
around me. I loved the fantasy books best, with their worlds of magic
and dragons, knights and villains.

I learned terrible habits about reading too. I wanted so much to be a
fast reader that my brain learned to identify passages that were “just
description.” I’ve never really gotten what people mean when they say
“I saw the book in my mind.” Visualization has never come easily to
me, and I think in part it’s because I never really read the
descriptions.

<!--more-->

But this is a weird contradiction. I wanted to escape into these
books, but I skimmed the details, the little essences? I don’t know.
But I find myself still doing it. I have to consciously slow myself
down in order to not skip them. I notice my eyes jump, and then
recognize that I didn’t actually read that last paragraph.

Part of my Fairhaven graduation requirement was the advanced seminar
class. In that class, we all read the book _Wave_ by Sonali
Deraniyagala. In it, she recounts her experience of being swept up in
the 2004 tsunami in Sri Lanka. She lost her whole family in an
instant. Her husband, two sons; both her parents. She also writes
about the aftermath in her life, of how she eventually is able to move
on and heal. It is a vivid book, and not one that I likely would have
sought out on my own.

Reading _Wave_ was a different experience for me than most books. I
didn’t want to escape into it. If anything, I wanted the opposite, to
help Sonali escape from the life of torment that she relates to us. I
have lost people in my life. My grandfather, more than a decade ago.
A childhood friend who I’d fallen out of touch with who took his own
life. More recently my grandmother; not dead, but lost to us through
Alzheimers. But it feels… not right to try and compare these to
Sonali’s loss. Not just because I wasn’t as close to these people as
she was to her family, though this is true. But because my experience
of those losses was so different, so much more distant.

There is a one point in her story that I can relate to. Towards the
middle, when she says &#8220;But there are those I see time and again , have
drinks with, share jokes, and even they don’t know.&#8221; She talks about
feeling like a fraud. That not telling people she is &#8220;cut loose,
adrift, hazy about [her] identity.&#8221; This I feel I know something
about.

It started out that I would take just one quarter off. Fall of 2012,
I signed up for classes, and then I simply couldn’t face it. In
retrospect, it was amazingly fortuitous. Almost like I knew, deep
down what was going to happen. Instead of school, I decided to try and
find work as a programmer. To validate for myself whether finishing up
my degree was really necessary. This was hard. I learned many hard
lessons that fall. About managing my time, about the kinds of jobs I
did not want to do. About the kind of clients to avoid. Then, the
week after Thanksgiving, my mother was diagnosed with brain cancer.

It started with her having trouble walking. I noticed while strolling
through the autumnal Arboretum in Seattle near her house. Her right
foot kept dragging. I asked her about it, and she said it felt very
odd. On Monday she&#8217;d make an appointment with her doctor to see what
was going on. But two days later she couldn&#8217;t move her leg at all.

Everything after that was a blur. Frantic calls to the doctor,
eventually rushing off to the hospital. So many of her close friends
clustered around, I felt lost in the confusion and chaos. In the
midst of this, I had just started negotiating with a potential new
client. I kept talking to them, worried enough about my finances that
it didn&#8217;t really sink how serious the situation with my mother really
was.

I imagine what would have happened if I had tried to take classes that
fall. I would have gone home over Thanksgiving, much as I actually
did. Then, when my mother was spending her first couple days in the
hospital, getting a biopsy of her brain, I would have been in the
midst of dead week. Before we really knew what was wrong with her, I
would have been immersed in preparing for finals. While she was trying
to reacclimatize to her own home, I might have been taking finals.

Or else, I would have dropped it all. An entire quarter&#8217;s worth of
time and effort made meaningless in the space of a phone call. I&#8217;m
honestly not sure what I would have done, how things would have gone.

The months that followed were also a whirl. The madness of trying to
reorganize her home so that she could live there. Starting
chemotherapy and radiation treatments. I could smell the poison in the
chemo pills. The smell of their residue in her urine permeated the
bathroom. This didn&#8217;t seem like healing. I saw my mother, the
strongest person that I know, utterly defeated and humiliated.

But all of this was in Seattle. To my friends in Bellingham, I simply
disappeared. I only personally told three or four people. Many more
have heard either from my loving girlfriend or through the proverbial
grapevine. It was agonizing revealing this massive thing to a few
close friends. The thought of telling everyone was overwhelming. I
wanted people to know but not to have to tell them. That made it
awkward. Most people don&#8217;t just bring something like that up.

At a time when I most needed my friends physical presence and support,
everyone seemed determined to let me have my space. But I couldn&#8217;t
reach out to them, to tell them that wasn&#8217;t what I needed. I didn&#8217;t
know what I needed.

The first time I told someone not close to me was an old roommate of
mine. I ran into her in the grocery store in Bellingham. We chatted
for a moment, this and that. Then she asked what I was up to. I said
living in Seattle, and she asked &#8220;Why?&#8221; &#8220;Because my mother has brain
cancer.&#8221; I responded. That pretty much ended the conversation. I felt
sad. I hadn&#8217;t meant to drop that weight on her; as Sonali says, &#8220;it&#8217;s
too horrifying, too huge.&#8221; But I didn&#8217;t know how to reveal it any
other way.

Gradually I learned how to be more circumspect. &#8220;My mother is very
ill.&#8221; My therapist suggested that. She helped me brainstorm. Helped me
navigate between the feelings of deceit for hiding it and not being
able to tell. I also grew more comfortable with the weight of it. I no
longer needed to try and lay it down so abruptly, the way one drops a
heavy stone. I grew stronger, and marveled at my own strength.

So one quarter turned into two, then three. Suddenly a year had
passed. Eventually, our lives calmed and settled enough that I sought
an internship at a local tech company. I stayed there for six months.
I found stability in the day-to-day routine of working nine to five.
Or more accurately, ten to six.

Now, more than two years later, my mother is doing quite well. It’s
strange to be back in Bellingham, and to still have friends who don’t
know what has happened. She is responding to treatment so well, it
seems like the emergency has been put on hold. But in another way, we
are all still waiting for the other shoe to drop. But we have to stop
waiting at some point.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Contact]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/05/14/s-and-e-part-five:-first-contact/"/>
    <updated>2014-05-14T22:00:00-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/05/14/s-and-e-part-five:-first-contact</id>
    <content type="html"><![CDATA[At the time, I was infatuated with a particular video game. This game
was called Neverwinter Nights and it was a sword-and-sorcery adventure
game. This was one of the reasons that I loved it so much; it brought
to life all of my favorite childhood stories about dragons and elves
and magic.

This was not the first such game I had played. It was however, the
first game I encountered that gave players the ability to use the
tools of the game to construct their own world and scenarios. The
developers of the game actually included for free all of the tools
that they had used themselves to create the game. I was enthralled by
this toolkit.

<!--more-->

I spent hours simply exploring it. I would browse the apparently
endless menus and dialogs, marveling at the enormity of this program
and captivated by what it promised to allow me to do. I fiddled around
with placing groups of fantastic creatures in small worlds of my own
creation. But I quickly came to realize that the real key to making
living worlds lay in something called NWScript.


My curiosity in exploring the toolkit exposed me to the existence of a
programming language embedded within it. This language allowed you to
do nearly anything in the context of the game. It was through
&#8220;scripts&#8221; - short, specific programs written in NWScript - that you
could make pulling a lever cause a door to unlock, or make it so that
a sleeping dragon would awaken with a terrible roar when a character
tripped over a stone while trying to sneak past.

Somehow, I found a set of tutorials for learning NWScript on the
internet. From what I recall they were excellent; very informative,
and engagingly written. I worked through them diligently, and gained a
rudimentary ability to do things with NWScript. But I was at a loss of
what to do with my new-found power. I fiddled around making little toy
things. I expanded on the idea of a switch unlocking a door by
requiring two switches to be thrown. But I had no idea how to go about
constructing a compelling story for other players to interact with,
and without a motivating context my little magic tricks meant nothing.

In retrospect, although I was technically capable of writing simple
scripts, I actually fundamentally missed one of the central points
that the tutorials tried to teach me. One of the most basic tools of a
programmer is the ability to abstract. Dictionary.com provides several
definitions for using &#8216;abstract&#8217; as a verb. The one that suits my
usage the best is

> &#8220;to consider as a general quality or characteristic apart from
> specific objects or instances: to abstract the notions of time,
> space, and matter.&#8221;

To really talk about what abstraction in programming means though,
first we need to dive into what programming is a bit. To do that, I&#8217;d
like to defer to one of the giants of the field, Harold (Hal) Abelson.
Abelson is responsible for an enormous amount of important work in the
world of programming and Computer Science. Among the most well known
of those contributions is his co-development, along with Gerald Jay
Sussman, of MIT&#8217;s introductory computer science course _6.001
Structure and Interpretation of Computer Programs_. There is also a
book bearing the same name, which is colluqially referred to as &#8220;the
wizard book&#8221; or simply SICP (&#8220;SICK-pee,&#8221; pronounced like chickpea).

There are videos available online of the lecture series, delivered by
Abelson and Sussman. The first lecture begins with Abelson greeting
the classroom:

> I&#8217;d like to welcome you to this course on &#8220;Computer Science.&#8221;
> Actually, that&#8217;s a terrible way to start. That is a terrible name for
> this business. First of all it&#8217;s not a science.  It might be
> engineering or it might be art, but we&#8217;ll actually see that computer
> so-called science actually has a lot in common with magic and we&#8217;ll
> see that in this course. So it&#8217;s not a science.  It&#8217;s also not really
> very much about computers. And it&#8217;s not about computers in the same
> sense that physics is not really about particle accelerators, and
> biology is not really about microscopes and petri dishes.

This gives a brief sense of what programming is not. But that just
raises the question of what it actually is. What follows is an excerpt
from the preface to the first edition of the SICP book.

> &#8220;&#8230; we want to establish the idea that a computer language is not
> just a way of getting a computer to perform operations but rather
> that it is a novel formal medium for expressing ideas about
> methodology.&#8221;

This was an incredibly novel concept when the book was first
published. In many ways, it is still novel to many professional
programmers. It was certainly mind-expanding to me.

There is so much more that I could say about programming. I&#8217;ve been
immersed in that world for a large portion of the last six years; I
can talk almost endlessly about it. I think what&#8217;s more interesting
though is to try to communicate why I&#8217;ve chosen to live in that world
these several years.

Most of the time when people close to me ask &#8220;Why programming?&#8221; I say
something about how programming is like puzzles. This is true.
Especially the kind of puzzles where two pieces of metal have been
formed and twisted together and need to be teased apart in just the
right way. But it only goes so far. I like puzzles, but I love magic.

I talked earlier about my love for fantasy novels. Especially the kind
with magic in them. The idea of magic has always intrigued me: the
invocation of mysterious powers through the precise usage of arcane
knowledge. To me the best kind of world to live in is one where magic
abounds.

In many ways, the process of programming is very similar to this
conception of magic. The practitioner (programmer), learns obscure and
bizarre languages. Through long and diligent study they gain the
ability to command formless spirits that are capable of affecting the
real world.

This is what programming means to me. It is an immensely powerful form
of expression. It requires serious commitment, and hard work to bear
fruit. And like any superpower, with great power comes great
responsibility.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gap Year]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/05/10/s-and-e-part-four:-gap-year/"/>
    <updated>2014-05-10T22:00:00-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/05/10/s-and-e-part-four:-gap-year</id>
    <content type="html"><![CDATA[So I followed through and took one year off from school. A "Gap Year"
as it is somewhat euphemistically referred to. I spent some time
working for a cousin in Portland doing construction. After that I
helped my dad move a boat from Puerto Vallarta to San Diego. When I
returned from that, I was hired by a family friend, David Firth, as a
shop hand for his small business.

That was about six months into my Vacation.  Shortly after I started
working for him, I had to start thinking about whether I was going to
return to school the following fall. It was immediately clear to me
that I was still not ready to go back, so one year turned into two.

<!--more-->

I ended up working for David Firth for most of the balance of my
Vacation. I learned a fantastic amount there. David is an amazing man,
both incredibly intelligent and talented, and incredibly driven.

I learned many things during my time working with him. He directly
trained me in many tasks and skills; through my work I got the chance
to practice and develop others. I learned how to pressure seal and
test a vacuum tank, prepare and wire complex devices, turn metal on a
lathe, use a mill, hand-form sheet metal, arc-weld sheet metal, pour a
polyethylene mold, along with many other skills.

David also taught me to use &#8220;gentle but appropriate force.&#8221; When I
first started working for him, I had a tendency to apply all of my
strength to any given task. He taught me to pay attention to what I
was applying force to - whether it was tightening a bolt, or replacing
a light bulb - and to gauge whether or not I was over-stressing the
material. This was an invaluable help to me, at a time when I was
still becoming used to the full strength of my adult body.

David also taught me many things implicitly. Since I was his only
employee, I got to work very closely with him. My job was essentially
to build the machines that he spent his days designing. When I
encountered unexpected difficulties in production, I would ask David
how to resolve them. This occurred often at first as I was still
learning the process of building the machines. Later, the difficulties
were fewer but often more profound.

Sometimes when I encountered a difficulty in some assembly step, it
wasn&#8217;t indicative of my lack of expertise. Sometimes it was the
process itself that was flawed. As David inspected every issue he
would analyze the problem out loud. He didn&#8217;t do this for my benefit;
it was his process. But it gave me the chance to watch him at work. As
he was analyzing the issues, he compared them to his intentions in the
design phase; he triaged which problems were design flaws, and which
were caused by imprecision in the work done by outside
contractors. And he talked about the solutions.

It was during one of these reactive design sessions that I decided to
go back to school. I was so inspired by my exposure to his design
process, that I wanted to pursue a discipline that would allow me to
do that kind of work. I have always loved &#8220;inventing&#8221; things.  When I
was little, my mother had a box of mechanical, electrical and plumbing
junk that was my &#8220;invention box.&#8221; Really the process that I love is
designing things. I used to spend hours drawing pictures of devices
that I wanted to build. I&#8217;ve continued to do this throughout my life,
up to and including while I was working for David. However, I rarely,
if ever actually ended up building any of my creations. Working with
David, I got a glimpse of what it would take to bring my ideas into
the world. It made me want to be able to do that.

I decided to return to college to pursue an engineering degree. In
retrospect, I&#8217;m not sure why I decided on engineering. David&#8217;s degree
was in Industrial Design. Perhaps I felt intimidated by the art
requirements. Regardless, because of my new rationale for college, I
started looking beyond St. John&#8217;s to different schools with good
engineering programs. During this time, my mother urged me once again
to take a look at Western Washington University.

## Going Back?

Mostly to humor my mother, I did some browsing around on the internet
about Western. Somehow, I stumbled across the Fairhaven College
website and was intrigued enough to stick around. I ended up finding a
list of colleges that had similar goals as Fairhaven. Seeing both
St. John&#8217;s College and Colorado College - another college I was very
intrigued by - on the list, I was immediately sold. Once again, when
it came time to apply, I knew that Western, and specifically
Fairhaven, was the only school that I was interested in attending. I
applied only to Fairhaven, and visited the campus for the first time
on the day of my Fairhaven interview.

As I was preparing to go to Western during the last few months that I
worked for David Firth, I started to teach myself programming. That
was actually part of how I knew I was in a better space to go back to
school. I had rediscovered my love of learning, and was pursuing it in
my own free time for my own sake. I have wanted to learn to program
for a long time. It&#8217;s very difficult at this point to pinpoint when
that desire first manifested itself, because for a long time it didn&#8217;t
seem feasible. I didn&#8217;t have much access to computers when I was
younger, and certainly no mentors to help me get started on that
path. So I just sort of admired computers from arm&#8217;s length. When I
combined this long standing semi-obsession with the sense of
empowerment and increased interest in learning I got from taking time
off, it was inevitable that I would start programming; and I loved it.

I spent most of my first year at Western taking mainly Fairhaven
classes. Along with those, I took the entry level programming class
during winter quarter, and did quite well. During spring quarter, I
took my first engineering class. The difference between the two was
extreme. Despite some initial frustrations with the programming
language used in Computer Science 141, I thoroughly enjoyed the
class. Engineering Technology 110 was a very different story.

From a certain perspective, it might just have been happenstance. I
enjoyed the engineering class, but I had no preparation for it. At the
same time, I got the feeling that a significant number of the other
students already had a greater amount of knowledge and experience. In
the programming class though, I was clearly ahead of the curve. During
the weekly labs it was obvious that there were only a few other people
that knew as much about programming as I did. For this class I was
clearly over-prepared. These seemingly minor differences resulted in
massively different reactions from me. Solely on the basis of those
two classes I decided to pursue a computer science major instead of
engineering.

In another lifetime I can see myself getting more hands on experience
building things when I was little. Instead of spending all of my
energy on the initial design phase, I would have learned more about
how to actually build things. This would have prepared me better for
the engineering class, and I might have had an experience more
comparable to the programming class.  What I don&#8217;t know is whether
that would have made a difference. As I said earlier, I spent quite a
lot of time building things with David.

In some respects, this story about how and why I became a CS major is
another &#8220;single story&#8221; that I tell myself about my life. But this
story isn&#8217;t really serving a particular purpose; it&#8217;s mostly because I
forget the other parts. In reality, I didn&#8217;t first teach myself to
program while I was working for David Firth right before I started at
Western in 2008. It really started six years earlier, when I was 14.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Teenage Liberation Handbook]]></title>
    <link href="http://www.zephyrizing.net/blog/2014/05/06/s-and-e-part-three:-the-teenage-liberation-handbook/"/>
    <updated>2014-05-06T22:00:00-05:00</updated>
    <id>http://www.zephyrizing.net/blog/2014/05/06/s-and-e-part-three:-the-teenage-liberation-handbook</id>
    <content type="html"><![CDATA[The book that has had the greatest impact on my educational journey is
_The Teenage Liberation Handbook: How to Quit School and Get a Real
Life and Education_ by Grace Llewellyn. An opinionated title to be
sure, and it is an opinionated book. I was first introduced to this
book by one of my most beloved high school teachers, Steve Miranda. He
gave the first chapter to us as a reading in a class entitled
_Literature and Philosophy_. The section we read is an allegory about
education that illustrates the author's view of what our educational
system does to the minds of the young. It is heartbreaking.

<!--more-->

Reading that story was probably the first time I was moved to tears by
a piece of writing. Just thinking about that time brings back powerful
emotions. That story spoke to me. The author Daniel Quinn defines a
story as a device that we humans use for understanding the world
around us better. This story helped me to make sense of my
relationship with school. It gave me permission to dislike school in a
way I never had felt free to before. It gave me words to articulate my
distaste, and it showed me that other people could and did feel the
same way.

I was touched also because the tale is legitimately a tragic one. It
tells the story of a young child, full of enthusiasm and the joy of
learning. And it shows how after exposure to the dull monotony of the
classroom environment and the &#8220;processed gruel&#8221; form of knowledge
found there, her enthusiasm steadily faded. And finally, it shows her
breaking free.

Perhaps the most important reason that this story was so powerful for
me was because it made me grieve for myself. It made me grieve for the
countless hours, mostly wasted, spent in that limiting school
environment.  It made me grieve for the massive amount of energy I
spent resisting the inertia of that system.  It made me grieve for all
of the times that I had forced myself to crush my own resistance. But
most of all it made me grieve for the lost opportunity that this story
represented.

How I wish I had found that book sooner. When I first read that story,
I was 18 and just three months away from graduating from high school.

I read the rest of book voraciously as soon as I could get my hands on
it. Through that, I gained a deeper understanding of the ideas about
school that Llewellyn hinted at in the portion of it that I read for
my class. _The Teenage Liberation Handbook_ describes something called
&#8220;unschooling.&#8221; Llewellyn intentionally avoids using the term
&#8220;home-schooling&#8221; because of the baggage that it carries, and also
because of the connotations that it is just &#8220;school, but at home.&#8221;

Unschooling is emphatically different from both traditional school,
and home-schooling. It emphasizes personal interest, and
self-direction. It defines the role of the parent as facilitator not
teacher. Most importantly, it emphasizes that learning can - and
should - happen anywhere, and anytime; in fact, it should happen
everywhere, and all the time.

The expressiveness of her allegory gave me a hint of what unschooling
offered.  That hint was enough for me to recognize that I had missed
my opportunity. I wanted it so badly.

The emotional response is a huge part of why this book was so
influential for me. But I also loved her vision. The more that I read
of it, the more engaged I became and the more excited and despairing I
felt. I was excited by the possibilities that I saw in what Llewellyn
described. I despaired because it seemed so unattainable for me. And I
struggled as I read that book. I struggled with whether I wanted to
quit school and pursue unschooling. Ultimately, I took the easier path
and simply graduated from high school. But even at that late date, I
was so inspired by her ideas that I wanted to immediately quit school
and pursue an unschooled education for myself.

Since then I have wanted to spread the message. The single thing that
bothers me most about my own history is that I never knew that I had
any choice other than school. Unfortunately, I&#8217;m not much of an
activist - far too introverted - and I don&#8217;t personally know very many
teenagers.

So many other pieces of my educational journey since then are deeply
related to my reading of this book. The time that I took off after I
graduated high school is a prominent example. So is the two year break
I took between my junior and senior year at Western. I had been
considering taking time off after high school before I read the
handbook, but Llewellyn&#8217;s description of what she called &#8220;the
Vacation&#8221; made me certain that I wanted that reset.

For a teen pursuing unschooling, the Vacation is the period of time
between when they stop attending traditional school, and when they
start pursuing their learning in earnest. Grace warns that if you try
and make the transition too quickly, too much baggage about learning
is carried along and your attempts at unschooling will be
disappointing at best and disastrous at worst. She devotes an entire
chapter to describing the importance of it, and she presents a very
convincing case.

Reading the _Teenage Liberation Handbook_ made me realize how toxic my
attitude towards school had become. Her words helped me decomplect my
feelings about school from my feelings about learning. It also helped
me to start to recognize the negative cycle I was in regarding hating
school and resisting the forms that it imposed. I realized that if I
was going to go to college, I needed to do it on my own terms, and I
needed to leave behind some of the baggage that I had accumulated
about education.
]]></content>
  </entry>
  
</feed>
